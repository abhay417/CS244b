!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPT_STAT	xdrpp/xdrpp/exception.h	/^  enum { ACCEPT_STAT, AUTH_STAT, REJECT_STAT } type_;$/;"	e	enum:xdr::xdr_call_error::__anon34
ACLOCAL	xdrpp/Makefile	/^ACLOCAL = ${SHELL} \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp\/missing aclocal-1.14$/;"	m
ACLOCAL_M4	xdrpp/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADDR	server/sqlite3.c	9341;"	d	file:
AGGREGATE	server/sqlite3.c	10868;"	d	file:
AGGREGATE2	server/sqlite3.c	10871;"	d	file:
ALWAYS	server/sqlite3.c	129398;"	d	file:
ALWAYS	server/sqlite3.c	129401;"	d	file:
ALWAYS	server/sqlite3.c	8132;"	d	file:
ALWAYS	server/sqlite3.c	8135;"	d	file:
ALWAYS	server/sqlite3.c	8138;"	d	file:
AMTAR	xdrpp/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	xdrpp/Makefile	/^AM_CPPFLAGS = $(cereal_CPPFLAGS)$/;"	m
AM_DEFAULT_VERBOSITY	xdrpp/Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_RECURSIVE_TARGETS	xdrpp/Makefile	/^AM_RECURSIVE_TARGETS = cscope$/;"	m
AM_V_AR	xdrpp/Makefile	/^AM_V_AR = $(am__v_AR_$(V))$/;"	m
AM_V_CC	xdrpp/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	xdrpp/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	xdrpp/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	xdrpp/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	xdrpp/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_LEX	xdrpp/Makefile	/^AM_V_LEX = $(am__v_LEX_$(V))$/;"	m
AM_V_P	xdrpp/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_YACC	xdrpp/Makefile	/^AM_V_YACC = $(am__v_YACC_$(V))$/;"	m
AM_V_at	xdrpp/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_YFLAGS	xdrpp/Makefile	/^AM_YFLAGS = -d$/;"	m
AR	xdrpp/Makefile	/^AR = ar$/;"	m
ARFLAGS	xdrpp/Makefile	/^ARFLAGS = cru$/;"	m
ARRAY	xdrpp/xdrc/xdrc_internal.h	/^  enum { SCALAR, PTR, ARRAY, VEC } qual {SCALAR};$/;"	e	enum:rpc_decl::__anon28
ASSIGN_LIKE	xdrpp/xdrpp/types.h	390;"	d
ASSIGN_LIKE	xdrpp/xdrpp/types.h	404;"	d
AUTH_STAT	xdrpp/xdrpp/exception.h	/^  enum { ACCEPT_STAT, AUTH_STAT, REJECT_STAT } type_;$/;"	e	enum:xdr::xdr_call_error::__anon34
AUTOCONF	xdrpp/Makefile	/^AUTOCONF = ${SHELL} \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp\/missing autoconf$/;"	m
AUTOHEADER	xdrpp/Makefile	/^AUTOHEADER = ${SHELL} \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp\/missing autoheader$/;"	m
AUTOMAKE	xdrpp/Makefile	/^AUTOMAKE = ${SHELL} \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp\/missing automake-1.14$/;"	m
AWK	xdrpp/Makefile	/^AWK = gawk$/;"	m
AdjustTree	server/sqlite3.c	/^static int AdjustTree($/;"	f	file:
AggInfo	server/sqlite3.c	/^struct AggInfo {$/;"	s	file:
AggInfo	server/sqlite3.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	server/sqlite3.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	server/sqlite3.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
ApplyCostMultiplier	server/sqlite3.c	117806;"	d	file:
ApplyCostMultiplier	server/sqlite3.c	117808;"	d	file:
ArraySize	server/sqlite3.c	8809;"	d	file:
AttachKey	server/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	server/sqlite3.c	/^struct AuthContext {$/;"	s	file:
AuthContext	server/sqlite3.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	server/sqlite3.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	server/sqlite3.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	server/sqlite3.c	/^struct AuxData {$/;"	s	file:
AuxData	server/sqlite3.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
BEGIN	xdrpp/xdrc/scan.cc	125;"	d	file:
BITVEC_HASH	server/sqlite3.c	38087;"	d	file:
BITVEC_MXHASH	server/sqlite3.c	38082;"	d	file:
BITVEC_NBIT	server/sqlite3.c	38076;"	d	file:
BITVEC_NELEM	server/sqlite3.c	38074;"	d	file:
BITVEC_NINT	server/sqlite3.c	38079;"	d	file:
BITVEC_NPTR	server/sqlite3.c	38089;"	d	file:
BITVEC_SZ	server/sqlite3.c	38060;"	d	file:
BITVEC_SZELEM	server/sqlite3.c	38072;"	d	file:
BITVEC_TELEM	server/sqlite3.c	38070;"	d	file:
BITVEC_USIZE	server/sqlite3.c	38064;"	d	file:
BMS	server/sqlite3.c	11672;"	d	file:
BTALLOC_ANY	server/sqlite3.c	52150;"	d	file:
BTALLOC_EXACT	server/sqlite3.c	52151;"	d	file:
BTALLOC_LE	server/sqlite3.c	52152;"	d	file:
BTCF_AtLast	server/sqlite3.c	51662;"	d	file:
BTCF_Incrblob	server/sqlite3.c	51663;"	d	file:
BTCF_ValidNKey	server/sqlite3.c	51660;"	d	file:
BTCF_ValidOvfl	server/sqlite3.c	51661;"	d	file:
BTCF_WriteFlag	server/sqlite3.c	51659;"	d	file:
BTCURSOR_MAX_DEPTH	server/sqlite3.c	51620;"	d	file:
BTREE_APPLICATION_ID	server/sqlite3.c	9072;"	d	file:
BTREE_AUTOVACUUM_FULL	server/sqlite3.c	8959;"	d	file:
BTREE_AUTOVACUUM_INCR	server/sqlite3.c	8960;"	d	file:
BTREE_AUTOVACUUM_NONE	server/sqlite3.c	8958;"	d	file:
BTREE_BLOBKEY	server/sqlite3.c	9040;"	d	file:
BTREE_BULKLOAD	server/sqlite3.c	9078;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	server/sqlite3.c	9067;"	d	file:
BTREE_FILE_FORMAT	server/sqlite3.c	9066;"	d	file:
BTREE_FREE_PAGE_COUNT	server/sqlite3.c	9064;"	d	file:
BTREE_INCR_VACUUM	server/sqlite3.c	9071;"	d	file:
BTREE_INTKEY	server/sqlite3.c	9039;"	d	file:
BTREE_LARGEST_ROOT_PAGE	server/sqlite3.c	9068;"	d	file:
BTREE_MEMORY	server/sqlite3.c	8986;"	d	file:
BTREE_OMIT_JOURNAL	server/sqlite3.c	8985;"	d	file:
BTREE_SCHEMA_VERSION	server/sqlite3.c	9065;"	d	file:
BTREE_SINGLE	server/sqlite3.c	8987;"	d	file:
BTREE_TEXT_ENCODING	server/sqlite3.c	9069;"	d	file:
BTREE_UNORDERED	server/sqlite3.c	8988;"	d	file:
BTREE_USER_VERSION	server/sqlite3.c	9070;"	d	file:
BTS_EXCLUSIVE	server/sqlite3.c	51593;"	d	file:
BTS_INITIALLY_EMPTY	server/sqlite3.c	51591;"	d	file:
BTS_NO_WAL	server/sqlite3.c	51592;"	d	file:
BTS_PAGESIZE_FIXED	server/sqlite3.c	51589;"	d	file:
BTS_PENDING	server/sqlite3.c	51594;"	d	file:
BTS_READ_ONLY	server/sqlite3.c	51588;"	d	file:
BTS_SECURE_DELETE	server/sqlite3.c	51590;"	d	file:
BUILT_SOURCES	xdrpp/Makefile	/^BUILT_SOURCES = xdrc\/parse.cc xdrc\/parse.hh xdrc\/scan.cc	\\$/;"	m
BYTESWAP32	server/sqlite3.c	48608;"	d	file:
BenignMallocHooks	server/sqlite3.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	server/sqlite3.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	server/sqlite3.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	server/sqlite3.c	/^struct Bitvec {$/;"	s	file:
Bitvec	server/sqlite3.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Blob	server/sqlite3.c	/^struct Blob {$/;"	s	file:
Blob	server/sqlite3.c	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob	file:
Bool	server/sqlite3.c	/^typedef unsigned Bool;$/;"	t	file:
BtCursor	server/sqlite3.c	/^struct BtCursor {$/;"	s	file:
BtCursor	server/sqlite3.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	server/sqlite3.c	/^struct BtLock {$/;"	s	file:
BtLock	server/sqlite3.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	server/sqlite3.c	/^struct BtShared {$/;"	s	file:
BtShared	server/sqlite3.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	server/sqlite3.c	/^struct Btree {$/;"	s	file:
Btree	server/sqlite3.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BusyHandler	server/sqlite3.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	server/sqlite3.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	server/sqlite3.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	server/sqlite3.c	14169;"	d	file:
CC	xdrpp/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	xdrpp/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	xdrpp/Makefile	/^CCLD = $(CC)$/;"	m
CEREAL_ARCHIVE_TAKES_NAME	xdrpp/xdrpp/cereal.h	104;"	d
CEREAL_ARCHIVE_TAKES_NAME	xdrpp/xdrpp/cereal.h	111;"	d
CFLAGS	Makefile	/^CFLAGS := -ggdb3 -O0 -pthread$/;"	m
CFLAGS	xdrpp/Makefile	/^CFLAGS = -g -O2$/;"	m
CHECK_PAGE	server/sqlite3.c	41986;"	d	file:
CHECK_PAGE	server/sqlite3.c	41997;"	d	file:
CHECK_SIZE	xdrpp/tests/marshal.cc	26;"	d	file:
CLEANFILES	xdrpp/Makefile	/^CLEANFILES = *~ *\/*~ *\/*\/*~ .gitignore~ tests\/xdrtest.hh	\\$/;"	m
CLEARBIT	server/sqlite3.c	38320;"	d	file:
CLOSEBRACE	xdrpp/xdrc/xdrc_internal.h	/^		 NAMESPACE, CLOSEBRACE } type;$/;"	e	enum:rpc_sym::symtype
CODEC1	server/sqlite3.c	41201;"	d	file:
CODEC1	server/sqlite3.c	41207;"	d	file:
CODEC2	server/sqlite3.c	41203;"	d	file:
CODEC2	server/sqlite3.c	41208;"	d	file:
COLFLAG_HIDDEN	server/sqlite3.c	10928;"	d	file:
COLFLAG_PRIMKEY	server/sqlite3.c	10927;"	d	file:
COLNAME_COLUMN	server/sqlite3.c	9324;"	d	file:
COLNAME_DATABASE	server/sqlite3.c	9322;"	d	file:
COLNAME_DECLTYPE	server/sqlite3.c	9321;"	d	file:
COLNAME_N	server/sqlite3.c	9326;"	d	file:
COLNAME_N	server/sqlite3.c	9329;"	d	file:
COLNAME_N	server/sqlite3.c	9331;"	d	file:
COLNAME_NAME	server/sqlite3.c	9320;"	d	file:
COLNAME_TABLE	server/sqlite3.c	9323;"	d	file:
COLUMN_MASK	server/sqlite3.c	96894;"	d	file:
COMPILE	xdrpp/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	xdrpp/Makefile	/^CONFIG_CLEAN_FILES = xdrpp\/endian.h xdrpp.pc xdrpp-uninstalled.pc$/;"	m
CONFIG_CLEAN_VPATH_FILES	xdrpp/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	xdrpp/Makefile	/^CONFIG_HEADER = config.h$/;"	m
CONST	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
CORRUPT_DB	server/sqlite3.c	12402;"	d	file:
CPP	xdrpp/Makefile	/^CPP = gcc -E -xc$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS := `$(PKGCONFIG) --cflags xdrpp` -I.$/;"	m
CPPFLAGS	xdrpp/Makefile	/^CPPFLAGS = $/;"	m
CPP_COMMAND	xdrpp/config.h	8;"	d
CSCOPE	xdrpp/Makefile	/^CSCOPE = cscope$/;"	m
CSERVER_OBJ	cacheserver/Makefile	/^CSERVER_OBJ := $(CSERVER_OBJ:.cc=.o)$/;"	m
CSERVER_OBJ	cacheserver/Makefile	/^CSERVER_OBJ := $(CSERVER_SRC:.c=.o)$/;"	m
CSERVER_SRC	cacheserver/Makefile	/^CSERVER_SRC := cacheserver\/cacheserver.cc \\$/;"	m
CTAGS	xdrpp/Makefile	/^CTAGS = ctags$/;"	m
CTIMEOPT_VAL	server/sqlite3.c	13610;"	d	file:
CTIMEOPT_VAL_	server/sqlite3.c	13609;"	d	file:
CTRL_FREE	server/sqlite3.c	18032;"	d	file:
CTRL_LOGSIZE	server/sqlite3.c	18031;"	d	file:
CURSOR_FAULT	server/sqlite3.c	51699;"	d	file:
CURSOR_INVALID	server/sqlite3.c	51695;"	d	file:
CURSOR_REQUIRESEEK	server/sqlite3.c	51698;"	d	file:
CURSOR_SKIPNEXT	server/sqlite3.c	51697;"	d	file:
CURSOR_VALID	server/sqlite3.c	51696;"	d	file:
CXX	xdrpp/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	xdrpp/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	xdrpp/Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	xdrpp/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS := -ggdb3 -O0 -pthread -std=c++11$/;"	m
CXXFLAGS	xdrpp/Makefile	/^CXXFLAGS = -ggdb3 -O0 -pthread -std=c++11 -Wall $/;"	m
CXXLD	xdrpp/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	xdrpp/Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYGPATH_W	xdrpp/Makefile	/^CYGPATH_W = echo$/;"	m
CellInfo	server/sqlite3.c	/^struct CellInfo {$/;"	s	file:
CellInfo	server/sqlite3.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
ChooseLeaf	server/sqlite3.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	server/sqlite3.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
Client	include/client.h	/^class Client {$/;"	c
Client	libclient/client.cc	/^Client::Client()$/;"	f	class:Client
ClientError	include/client.h	/^enum ClientError {$/;"	g
ClientException	include/client.h	/^    ClientException(enum ClientError err) { errcode = err; }$/;"	f	class:ClientException
ClientException	include/client.h	/^class ClientException : public std::exception {$/;"	c
Cmd_CacheContents	shell/shell.cc	/^Cmd_CacheContents(int argc, const char *argv[])$/;"	f
Cmd_CacheServer	shell/shell.cc	/^Cmd_CacheServer(int argc, const char *argv[])$/;"	f
Cmd_Heartbeat	shell/shell.cc	/^Cmd_Heartbeat(int argc, const char *argv[])$/;"	f
Cmd_Help	shell/shell.cc	/^Cmd_Help(int argc, const char *argv[])$/;"	f
CollSeq	server/sqlite3.c	/^struct CollSeq {$/;"	s	file:
CollSeq	server/sqlite3.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	server/sqlite3.c	/^struct Column {$/;"	s	file:
Column	server/sqlite3.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
ConstFactorOk	server/sqlite3.c	10754;"	d	file:
CountCtx	server/sqlite3.c	/^struct CountCtx {$/;"	s	file:
CountCtx	server/sqlite3.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
CreateBindListenSocket	server/server.cc	/^CreateBindListenSocket(int port) $/;"	f
Cte	server/sqlite3.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:
D	server/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DATA	xdrpp/Makefile	/^DATA = $(pkgconfig_DATA)$/;"	m
DB_Empty	server/sqlite3.c	10473;"	d	file:
DB_SchemaLoaded	server/sqlite3.c	10471;"	d	file:
DB_UnresetViews	server/sqlite3.c	10472;"	d	file:
DCOORD	server/sqlite3.c	147638;"	d	file:
DCOORD	server/sqlite3.c	147640;"	d	file:
DEBUG_MAX_ARGS	shell/shell.cc	21;"	d	file:
DEBUG_MAX_LINE	shell/shell.cc	22;"	d	file:
DEFAULT_INCLUDES	xdrpp/Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFS	xdrpp/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	xdrpp/Makefile	/^DEPDIR = .deps$/;"	m
DIRECT_MODE	server/sqlite3.c	46751;"	d	file:
DISTFILES	xdrpp/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	xdrpp/Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	xdrpp/Makefile	/^DIST_COMMON = INSTALL NEWS README AUTHORS ChangeLog \\$/;"	m
DIST_SOURCES	xdrpp/Makefile	/^DIST_SOURCES = $(xdrpp_libxdrpp_a_SOURCES) \\$/;"	m
DIST_TARGETS	xdrpp/Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
DOCID_CMP	server/sqlite3.c	131954;"	d	file:
DOTLOCK_SUFFIX	server/sqlite3.c	26785;"	d	file:
DO_OS_MALLOC_TEST	server/sqlite3.c	15936;"	d	file:
DO_OS_MALLOC_TEST	server/sqlite3.c	15943;"	d	file:
DateTime	server/sqlite3.c	/^struct DateTime {$/;"	s	file:
DateTime	server/sqlite3.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	server/sqlite3.c	/^struct Db {$/;"	s	file:
Db	server/sqlite3.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	server/sqlite3.c	10459;"	d	file:
DbFixer	server/sqlite3.c	/^struct DbFixer {$/;"	s	file:
DbFixer	server/sqlite3.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	server/sqlite3.c	10457;"	d	file:
DbHasProperty	server/sqlite3.c	10456;"	d	file:
DbMaskAllZero	server/sqlite3.c	12027;"	d	file:
DbMaskAllZero	server/sqlite3.c	12034;"	d	file:
DbMaskNonZero	server/sqlite3.c	12028;"	d	file:
DbMaskNonZero	server/sqlite3.c	12035;"	d	file:
DbMaskSet	server/sqlite3.c	12026;"	d	file:
DbMaskSet	server/sqlite3.c	12033;"	d	file:
DbMaskTest	server/sqlite3.c	12024;"	d	file:
DbMaskTest	server/sqlite3.c	12031;"	d	file:
DbMaskZero	server/sqlite3.c	12025;"	d	file:
DbMaskZero	server/sqlite3.c	12032;"	d	file:
DbPage	server/sqlite3.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	server/sqlite3.c	10458;"	d	file:
Deephemeralize	server/sqlite3.c	69088;"	d	file:
DispatchCommand	shell/shell.cc	/^DispatchCommand(char *buf)$/;"	f
DistinctCtx	server/sqlite3.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	server/sqlite3.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
ECHO	xdrpp/xdrc/scan.cc	715;"	d	file:
ECHO_C	xdrpp/Makefile	/^ECHO_C = $/;"	m
ECHO_N	xdrpp/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	xdrpp/Makefile	/^ECHO_T = $/;"	m
EGREP	xdrpp/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EIGHT_BYTE_ALIGNMENT	server/sqlite3.c	8698;"	d	file:
EIGHT_BYTE_ALIGNMENT	server/sqlite3.c	8700;"	d	file:
ENABLE_IF	xdrpp/xdrpp/printer.h	14;"	d
ENC	server/sqlite3.c	10683;"	d	file:
ENUM	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
EOB_ACT_CONTINUE_SCAN	xdrpp/xdrc/scan.cc	165;"	d	file:
EOB_ACT_END_OF_FILE	xdrpp/xdrc/scan.cc	166;"	d	file:
EOB_ACT_LAST_MATCH	xdrpp/xdrc/scan.cc	167;"	d	file:
EP_Agg	server/sqlite3.c	11536;"	d	file:
EP_Collate	server/sqlite3.c	11543;"	d	file:
EP_Constant	server/sqlite3.c	11554;"	d	file:
EP_DblQuoted	server/sqlite3.c	11541;"	d	file:
EP_Distinct	server/sqlite3.c	11539;"	d	file:
EP_Error	server/sqlite3.c	11538;"	d	file:
EP_FromJoin	server/sqlite3.c	11535;"	d	file:
EP_Generic	server/sqlite3.c	11544;"	d	file:
EP_InfixFunc	server/sqlite3.c	11542;"	d	file:
EP_IntValue	server/sqlite3.c	11545;"	d	file:
EP_MemToken	server/sqlite3.c	11551;"	d	file:
EP_NoReduce	server/sqlite3.c	11552;"	d	file:
EP_Reduced	server/sqlite3.c	11548;"	d	file:
EP_Resolved	server/sqlite3.c	11537;"	d	file:
EP_Skip	server/sqlite3.c	11547;"	d	file:
EP_Static	server/sqlite3.c	11550;"	d	file:
EP_TokenOnly	server/sqlite3.c	11549;"	d	file:
EP_Unlikely	server/sqlite3.c	11553;"	d	file:
EP_VarSelect	server/sqlite3.c	11540;"	d	file:
EP_xIsSelect	server/sqlite3.c	11546;"	d	file:
ETAGS	xdrpp/Makefile	/^ETAGS = etags$/;"	m
EXCLUSIVE_LOCK	server/sqlite3.c	10206;"	d	file:
EXEEXT	xdrpp/Makefile	/^EXEEXT = $/;"	m
EXIT_SUCCESS	xdrpp/xdrc/parse.cc	305;"	d	file:
EXIT_SUCCESS	xdrpp/xdrc/parse.cc	333;"	d	file:
EXPRDUP_REDUCE	server/sqlite3.c	11588;"	d	file:
EXPR_FULLSIZE	server/sqlite3.c	11580;"	d	file:
EXPR_REDUCEDSIZE	server/sqlite3.c	11581;"	d	file:
EXPR_TOKENONLYSIZE	server/sqlite3.c	11582;"	d	file:
EXTRA_DIST	xdrpp/Makefile	/^EXTRA_DIST = .gitignore doc\/xdrc.1 doc\/xdrc.1.md xdrpp\/endian.h.in	\\$/;"	m
EXTRA_SIZE	server/sqlite3.c	51448;"	d	file:
ExpandBlob	server/sqlite3.c	14495;"	d	file:
ExpandBlob	server/sqlite3.c	14498;"	d	file:
Explain	server/sqlite3.c	/^struct Explain {$/;"	s	file:
Explain	server/sqlite3.c	/^typedef struct Explain Explain;$/;"	t	typeref:struct:Explain	file:
Expr	server/sqlite3.c	/^struct Expr {$/;"	s	file:
Expr	server/sqlite3.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	server/sqlite3.c	11563;"	d	file:
ExprHasAllProperty	server/sqlite3.c	11561;"	d	file:
ExprHasProperty	server/sqlite3.c	11560;"	d	file:
ExprList	server/sqlite3.c	/^struct ExprList {$/;"	s	file:
ExprList	server/sqlite3.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	server/sqlite3.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetProperty	server/sqlite3.c	11562;"	d	file:
ExprSetVVAProperty	server/sqlite3.c	11570;"	d	file:
ExprSetVVAProperty	server/sqlite3.c	11572;"	d	file:
ExprSpan	server/sqlite3.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	server/sqlite3.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
FILEHANDLEID	server/sqlite3.c	40920;"	d	file:
FILE_ATTRIBUTE_MASK	server/sqlite3.c	32685;"	d	file:
FILE_FLAG_MASK	server/sqlite3.c	32681;"	d	file:
FKey	server/sqlite3.c	/^struct FKey {$/;"	s	file:
FKey	server/sqlite3.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_INTERN	server/sqlite3.c	20806;"	d	file:
FLAG_SIGNED	server/sqlite3.c	20805;"	d	file:
FLAG_STRING	server/sqlite3.c	20807;"	d	file:
FLEXINT_H	xdrpp/xdrc/scan.cc	29;"	d	file:
FLEX_BETA	xdrpp/xdrc/scan.cc	13;"	d	file:
FLEX_SCANNER	xdrpp/xdrc/scan.cc	8;"	d	file:
FOREGUARD	server/sqlite3.c	16797;"	d	file:
FOUR_BYTE_INT	server/sqlite3.c	66076;"	d	file:
FOUR_BYTE_UINT	server/sqlite3.c	66075;"	d	file:
FROM_STRING	xdrpp/xdrpp/iniparse.cc	55;"	d	file:
FROM_STRING	xdrpp/xdrpp/iniparse.h	49;"	d
FROM_STRING	xdrpp/xdrpp/iniparse.h	63;"	d
FTS3_AUX_SCHEMA	server/sqlite3.c	135418;"	d	file:
FTS3_DOCID_SEARCH	server/sqlite3.c	129592;"	d	file:
FTS3_EVAL_FILTER	server/sqlite3.c	129572;"	d	file:
FTS3_EVAL_MATCHINFO	server/sqlite3.c	129574;"	d	file:
FTS3_EVAL_NEXT	server/sqlite3.c	129573;"	d	file:
FTS3_FULLSCAN_SEARCH	server/sqlite3.c	129591;"	d	file:
FTS3_FULLTEXT_SEARCH	server/sqlite3.c	129593;"	d	file:
FTS3_HASH_BINARY	server/sqlite3.c	129257;"	d	file:
FTS3_HASH_STRING	server/sqlite3.c	129256;"	d	file:
FTS3_HAVE_DOCID_GE	server/sqlite3.c	129602;"	d	file:
FTS3_HAVE_DOCID_LE	server/sqlite3.c	129603;"	d	file:
FTS3_HAVE_LANGID	server/sqlite3.c	129601;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	server/sqlite3.c	145122;"	d	file:
FTS3_MATCHINFO_DEFAULT	server/sqlite3.c	145130;"	d	file:
FTS3_MATCHINFO_HITS	server/sqlite3.c	145125;"	d	file:
FTS3_MATCHINFO_LCS	server/sqlite3.c	145124;"	d	file:
FTS3_MATCHINFO_LENGTH	server/sqlite3.c	145123;"	d	file:
FTS3_MATCHINFO_NCOL	server/sqlite3.c	145120;"	d	file:
FTS3_MATCHINFO_NDOC	server/sqlite3.c	145121;"	d	file:
FTS3_MATCHINFO_NPHRASE	server/sqlite3.c	145119;"	d	file:
FTS3_MAX_PENDING_DATA	server/sqlite3.c	129332;"	d	file:
FTS3_MERGE_COUNT	server/sqlite3.c	129322;"	d	file:
FTS3_NODE_CHUNKSIZE	server/sqlite3.c	139496;"	d	file:
FTS3_NODE_CHUNKSIZE	server/sqlite3.c	139499;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	server/sqlite3.c	139497;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	server/sqlite3.c	139500;"	d	file:
FTS3_NODE_PADDING	server/sqlite3.c	139474;"	d	file:
FTS3_SEGCURSOR_ALL	server/sqlite3.c	129740;"	d	file:
FTS3_SEGCURSOR_PENDING	server/sqlite3.c	129739;"	d	file:
FTS3_SEGDIR_MAXLEVEL	server/sqlite3.c	129370;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	server/sqlite3.c	129371;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	server/sqlite3.c	129752;"	d	file:
FTS3_SEGMENT_FIRST	server/sqlite3.c	129755;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	server/sqlite3.c	129751;"	d	file:
FTS3_SEGMENT_PREFIX	server/sqlite3.c	129753;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	server/sqlite3.c	129750;"	d	file:
FTS3_SEGMENT_SCAN	server/sqlite3.c	129754;"	d	file:
FTS3_TOK_SCHEMA	server/sqlite3.c	139124;"	d	file:
FTS3_VARINT_MAX	server/sqlite3.c	129353;"	d	file:
FTS4AUX_EQ_CONSTRAINT	server/sqlite3.c	135511;"	d	file:
FTS4AUX_GE_CONSTRAINT	server/sqlite3.c	135512;"	d	file:
FTS4AUX_LE_CONSTRAINT	server/sqlite3.c	135513;"	d	file:
FTSQUERY_AND	server/sqlite3.c	129700;"	d	file:
FTSQUERY_NEAR	server/sqlite3.c	129698;"	d	file:
FTSQUERY_NOT	server/sqlite3.c	129699;"	d	file:
FTSQUERY_OR	server/sqlite3.c	129701;"	d	file:
FTSQUERY_PHRASE	server/sqlite3.c	129702;"	d	file:
FTS_CORRUPT_VTAB	server/sqlite3.c	129441;"	d	file:
FTS_CORRUPT_VTAB	server/sqlite3.c	129443;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	server/sqlite3.c	139462;"	d	file:
FTS_STAT_AUTOINCRMERGE	server/sqlite3.c	139509;"	d	file:
FTS_STAT_DOCTOTAL	server/sqlite3.c	139507;"	d	file:
FTS_STAT_INCRMERGEHINT	server/sqlite3.c	139508;"	d	file:
FULLY_WITHIN	server/sqlite3.c	7661;"	d	file:
FULLY_WITHIN	server/sqlite3.h	7537;"	d
FUNCTION	server/sqlite3.c	10853;"	d	file:
FUNCTION2	server/sqlite3.c	10859;"	d	file:
FUNC_PERFECT_MATCH	server/sqlite3.c	93031;"	d	file:
FileChunk	server/sqlite3.c	/^struct FileChunk {$/;"	s	file:
FileChunk	server/sqlite3.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	server/sqlite3.c	/^struct FilePoint {$/;"	s	file:
FilePoint	server/sqlite3.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
Fts3Cursor	server/sqlite3.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	server/sqlite3.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	server/sqlite3.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	server/sqlite3.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	server/sqlite3.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	server/sqlite3.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	server/sqlite3.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	server/sqlite3.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	server/sqlite3.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	server/sqlite3.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	server/sqlite3.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	server/sqlite3.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	server/sqlite3.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	server/sqlite3.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	server/sqlite3.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	server/sqlite3.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	server/sqlite3.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	server/sqlite3.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	server/sqlite3.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	server/sqlite3.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	server/sqlite3.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	server/sqlite3.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	server/sqlite3.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	server/sqlite3.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	server/sqlite3.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	server/sqlite3.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	server/sqlite3.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	server/sqlite3.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	server/sqlite3.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	server/sqlite3.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	server/sqlite3.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	server/sqlite3.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
Fts3tokCursor	server/sqlite3.c	/^struct Fts3tokCursor {$/;"	s	file:
Fts3tokCursor	server/sqlite3.c	/^typedef struct Fts3tokCursor Fts3tokCursor;$/;"	t	typeref:struct:Fts3tokCursor	file:
Fts3tokTable	server/sqlite3.c	/^struct Fts3tokTable {$/;"	s	file:
Fts3tokTable	server/sqlite3.c	/^typedef struct Fts3tokTable Fts3tokTable;$/;"	t	typeref:struct:Fts3tokTable	file:
FuncDef	server/sqlite3.c	/^struct FuncDef {$/;"	s	file:
FuncDef	server/sqlite3.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	server/sqlite3.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	server/sqlite3.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	server/sqlite3.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	server/sqlite3.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GETVARINT_INIT	server/sqlite3.c	129904;"	d	file:
GETVARINT_STEP	server/sqlite3.c	129901;"	d	file:
GFILE	xdrpp/xdrc/scan.cc	629;"	d	file:
GLOBAL	server/sqlite3.c	8842;"	d	file:
GLOBAL	server/sqlite3.c	8848;"	d	file:
GNL	xdrpp/xdrc/scan.cc	630;"	d	file:
GREP	xdrpp/Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	xdrpp/Makefile	/^GZIP_ENV = --best$/;"	m
GlobUpperToLower	server/sqlite3.c	94674;"	d	file:
GlobUpperToLower	server/sqlite3.c	94677;"	d	file:
GlobUpperToLowerAscii	server/sqlite3.c	94675;"	d	file:
GlobUpperToLowerAscii	server/sqlite3.c	94678;"	d	file:
HANDLE_TO_WINFILE	server/sqlite3.c	34456;"	d	file:
HASHRING_TIMEOUT	server/serverimpl.hh	18;"	d
HASHSIZE	server/sqlite3.c	147479;"	d	file:
HASHTABLE_HASH_1	server/sqlite3.c	48522;"	d	file:
HASHTABLE_NPAGE	server/sqlite3.c	48521;"	d	file:
HASHTABLE_NPAGE_ONE	server/sqlite3.c	48530;"	d	file:
HASHTABLE_NSLOT	server/sqlite3.c	48523;"	d	file:
HAS_CHILDREN	include/client.h	/^    HAS_CHILDREN,$/;"	e	enum:ClientError
HAVE_CXX11	xdrpp/Makefile	/^HAVE_CXX11 = $/;"	m
HAVE_FULLFSYNC	server/sqlite3.c	28134;"	d	file:
HAVE_FULLFSYNC	server/sqlite3.c	28136;"	d	file:
HAVE_INTTYPES_H	xdrpp/config.h	14;"	d
HAVE_LOCALTIME_S	server/sqlite3.c	15168;"	d	file:
HAVE_MEMORY_H	xdrpp/config.h	17;"	d
HAVE_MREMAP	server/sqlite3.c	25029;"	d	file:
HAVE_MREMAP	server/sqlite3.c	25031;"	d	file:
HAVE_STDINT_H	xdrpp/config.h	20;"	d
HAVE_STDLIB_H	xdrpp/config.h	23;"	d
HAVE_STRCHRNUL	server/sqlite3.c	20751;"	d	file:
HAVE_STRCHRNUL	server/sqlite3.c	20753;"	d	file:
HAVE_STRINGS_H	xdrpp/config.h	26;"	d
HAVE_STRING_H	xdrpp/config.h	29;"	d
HAVE_SYS_STAT_H	xdrpp/config.h	32;"	d
HAVE_SYS_TYPES_H	xdrpp/config.h	35;"	d
HAVE_UNISTD_H	xdrpp/config.h	38;"	d
HEADERS	xdrpp/Makefile	/^HEADERS = $(nodist_pkginclude_HEADERS) $(pkginclude_HEADERS)$/;"	m
HEARTBEAT_INTERVAL	cacheserver/cacheserver.cc	23;"	d	file:
HasRowid	server/sqlite3.c	11136;"	d	file:
Hash	server/sqlite3.c	/^struct Hash {$/;"	s	file:
Hash	server/sqlite3.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	server/sqlite3.c	/^struct HashElem {$/;"	s	file:
HashElem	server/sqlite3.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
Hashring	server/serverimpl.hh	/^typedef map<uint128_t, string> Hashring;$/;"	t
INCRINIT_NORMAL	server/sqlite3.c	77828;"	d	file:
INCRINIT_ROOT	server/sqlite3.c	77830;"	d	file:
INCRINIT_TASK	server/sqlite3.c	77829;"	d	file:
INITIAL	xdrpp/xdrc/scan.cc	628;"	d	file:
INSTALL	xdrpp/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	xdrpp/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	xdrpp/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	xdrpp/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	xdrpp/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	xdrpp/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INT16_MAX	xdrpp/xdrc/scan.cc	71;"	d	file:
INT16_MIN	xdrpp/xdrc/scan.cc	62;"	d	file:
INT16_TYPE	server/sqlite3.c	8557;"	d	file:
INT16_TYPE	server/sqlite3.c	8559;"	d	file:
INT32_MAX	xdrpp/xdrc/scan.cc	74;"	d	file:
INT32_MIN	xdrpp/xdrc/scan.cc	65;"	d	file:
INT8_MAX	xdrpp/xdrc/scan.cc	68;"	d	file:
INT8_MIN	xdrpp/xdrc/scan.cc	59;"	d	file:
INT8_TYPE	server/sqlite3.c	8571;"	d	file:
INT8_TYPE	server/sqlite3.c	8573;"	d	file:
INTERFACE	server/sqlite3.c	120290;"	d	file:
INVALID_FILE_ATTRIBUTES	server/sqlite3.c	32677;"	d	file:
INVALID_SET_FILE_POINTER	server/sqlite3.c	34808;"	d	file:
IN_DECLARE_VTAB	server/sqlite3.c	12164;"	d	file:
IN_DECLARE_VTAB	server/sqlite3.c	12166;"	d	file:
IN_INDEX_EPH	server/sqlite3.c	13216;"	d	file:
IN_INDEX_INDEX_ASC	server/sqlite3.c	13217;"	d	file:
IN_INDEX_INDEX_DESC	server/sqlite3.c	13218;"	d	file:
IN_INDEX_LOOP	server/sqlite3.c	13225;"	d	file:
IN_INDEX_MEMBERSHIP	server/sqlite3.c	13224;"	d	file:
IN_INDEX_NOOP	server/sqlite3.c	13219;"	d	file:
IN_INDEX_NOOP_OK	server/sqlite3.c	13223;"	d	file:
IN_INDEX_ROWID	server/sqlite3.c	13215;"	d	file:
IOMETHODS	server/sqlite3.c	29687;"	d	file:
IOTRACE	server/sqlite3.c	13275;"	d	file:
IOTRACE	server/sqlite3.c	13279;"	d	file:
ISAUTOVACUUM	server/sqlite3.c	51778;"	d	file:
ISAUTOVACUUM	server/sqlite3.c	51780;"	d	file:
IS_BIG_ENDIAN	xdrpp/Makefile	/^IS_BIG_ENDIAN = 0$/;"	m
IS_BIG_INT	server/sqlite3.c	8147;"	d	file:
IS_LOCK_ERROR	server/sqlite3.c	24681;"	d	file:
IcuCursor	server/sqlite3.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	server/sqlite3.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	server/sqlite3.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	server/sqlite3.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	server/sqlite3.c	124070;"	d	file:
IdChar	server/sqlite3.c	124088;"	d	file:
IdChar	server/sqlite3.c	124536;"	d	file:
IdChar	server/sqlite3.c	124540;"	d	file:
IdList	server/sqlite3.c	/^struct IdList {$/;"	s	file:
IdList	server/sqlite3.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	server/sqlite3.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IfNotOmitAV	server/sqlite3.c	52161;"	d	file:
IfNotOmitAV	server/sqlite3.c	52163;"	d	file:
IgnorableOrderby	server/sqlite3.c	11948;"	d	file:
InLoop	server/sqlite3.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon16::__anon17	file:
IncrMerger	server/sqlite3.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	server/sqlite3.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
Incrblob	server/sqlite3.c	/^struct Incrblob {$/;"	s	file:
Incrblob	server/sqlite3.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrmergeWriter	server/sqlite3.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	server/sqlite3.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	typeref:struct:IncrmergeWriter	file:
Index	server/sqlite3.c	/^struct Index {$/;"	s	file:
Index	server/sqlite3.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	server/sqlite3.c	/^struct IndexSample {$/;"	s	file:
IndexSample	server/sqlite3.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
IniGroup	xdrpp/xdrpp/iniparse.h	/^struct IniGroup {$/;"	s	namespace:xdr
IniLine	xdrpp/xdrpp/iniparse.h	/^class IniLine {$/;"	c	namespace:xdr
InitData	server/sqlite3.c	/^} InitData;$/;"	t	typeref:struct:__anon7	file:
IntegrityCk	server/sqlite3.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	server/sqlite3.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	server/sqlite3.c	11129;"	d	file:
IsHiddenColumn	server/sqlite3.c	11132;"	d	file:
IsPowerOfTwo	server/sqlite3.c	8814;"	d	file:
IsPrimaryKeyIndex	server/sqlite3.c	11334;"	d	file:
IsStat3	server/sqlite3.c	85932;"	d	file:
IsStat3	server/sqlite3.c	85935;"	d	file:
IsStat3	server/sqlite3.c	85938;"	d	file:
IsStat34	server/sqlite3.c	85942;"	d	file:
IsStat4	server/sqlite3.c	85931;"	d	file:
IsStat4	server/sqlite3.c	85934;"	d	file:
IsStat4	server/sqlite3.c	85937;"	d	file:
IsUniqueIndex	server/sqlite3.c	11337;"	d	file:
IsVirtual	server/sqlite3.c	11128;"	d	file:
IsVirtual	server/sqlite3.c	11131;"	d	file:
JOURNAL_CHUNKSIZE	server/sqlite3.c	78753;"	d	file:
JOURNAL_HDR_SZ	server/sqlite3.c	41556;"	d	file:
JOURNAL_PG_SZ	server/sqlite3.c	41550;"	d	file:
JT_CROSS	server/sqlite3.c	11733;"	d	file:
JT_ERROR	server/sqlite3.c	11738;"	d	file:
JT_INNER	server/sqlite3.c	11732;"	d	file:
JT_LEFT	server/sqlite3.c	11735;"	d	file:
JT_NATURAL	server/sqlite3.c	11734;"	d	file:
JT_OUTER	server/sqlite3.c	11737;"	d	file:
JT_RIGHT	server/sqlite3.c	11736;"	d	file:
JournalFile	server/sqlite3.c	/^struct JournalFile {$/;"	s	file:
JournalFile	server/sqlite3.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	server/sqlite3.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KEY_NOT_FOUND	include/client.h	/^    KEY_NOT_FOUND,$/;"	e	enum:ClientError
KeyClass	server/sqlite3.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	server/sqlite3.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	server/sqlite3.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	server/sqlite3.c	132615;"	d	file:
LARGEST_INT64	server/sqlite3.c	8674;"	d	file:
LCS_ITERATOR_FINISHED	server/sqlite3.c	145990;"	d	file:
LD	Makefile	/^LD := $(CXX)$/;"	m
LDADD	xdrpp/Makefile	/^LDADD = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
LDFLAGS	Makefile	/^LDFLAGS := -g -pthread $(LIBDIRS)$/;"	m
LDFLAGS	xdrpp/Makefile	/^LDFLAGS = $/;"	m
LEX	xdrpp/Makefile	/^LEX = flex$/;"	m
LEXCOMPILE	xdrpp/Makefile	/^LEXCOMPILE = $(LEX) $(AM_LFLAGS) $(LFLAGS)$/;"	m
LEXLIB	xdrpp/Makefile	/^LEXLIB = -lfl$/;"	m
LEX_OUTPUT_ROOT	xdrpp/Makefile	/^LEX_OUTPUT_ROOT = lex.yy$/;"	m
LIBCLIENT_OBJ	libclient/Makefile	/^LIBCLIENT_OBJ := $(LIBCLIENT_SRC:.cc=.o)$/;"	m
LIBCLIENT_SRC	libclient/Makefile	/^LIBCLIENT_SRC := libclient\/client.cc$/;"	m
LIBDIRS	Makefile	/^LIBDIRS := -Llibclient$/;"	m
LIBOBJS	xdrpp/Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	xdrpp/Makefile	/^LIBRARIES = $(lib_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS := -lclient -lcrypto `$(PKGCONFIG) --libs xdrpp` -ldl$/;"	m
LIBS	xdrpp/Makefile	/^LIBS = $/;"	m
LIKEFUNC	server/sqlite3.c	10865;"	d	file:
LINK	xdrpp/Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LITERAL	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
LOCKFILE_EXCLUSIVE_LOCK	server/sqlite3.c	35287;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	server/sqlite3.c	35283;"	d	file:
LOGMAX	server/sqlite3.c	18026;"	d	file:
LONGDOUBLE_TYPE	server/sqlite3.c	8437;"	d	file:
LONGDOUBLE_TYPE	server/sqlite3.c	8577;"	d	file:
LTLIBOBJS	xdrpp/Makefile	/^LTLIBOBJS = $/;"	m
LcsIterator	server/sqlite3.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	server/sqlite3.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LikeOp	server/sqlite3.c	/^struct LikeOp {$/;"	s	file:
LimitVal	server/sqlite3.c	/^struct LimitVal {$/;"	s	file:
LoadDoclistCtx	server/sqlite3.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	server/sqlite3.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LogEst	server/sqlite3.c	/^typedef INT16_TYPE LogEst;$/;"	t	file:
Lookaside	server/sqlite3.c	/^struct Lookaside {$/;"	s	file:
Lookaside	server/sqlite3.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	server/sqlite3.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	server/sqlite3.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	server/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MAINTAINERCLEANFILES	xdrpp/Makefile	/^MAINTAINERCLEANFILES = xdrc\/parse.hh xdrc\/parse.cc xdrc\/scan.cc	\\$/;"	m
MAKEINFO	xdrpp/Makefile	/^MAKEINFO = ${SHELL} \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp\/missing makeinfo$/;"	m
MALFORMED_KEY	include/client.h	/^    MALFORMED_KEY,$/;"	e	enum:ClientError
MANS	xdrpp/Makefile	/^MANS = $(man_MANS)$/;"	m
MASKBIT	server/sqlite3.c	11677;"	d	file:
MASKBIT32	server/sqlite3.c	11678;"	d	file:
MASTER_NAME	server/sqlite3.c	8792;"	d	file:
MASTER_ROOT	server/sqlite3.c	8798;"	d	file:
MAX	server/sqlite3.c	129346;"	d	file:
MAX	server/sqlite3.c	147738;"	d	file:
MAX	server/sqlite3.c	8522;"	d	file:
MAX_6BYTE	server/sqlite3.c	65924;"	d	file:
MAX_INCR_PHRASE_TOKENS	server/sqlite3.c	133678;"	d	file:
MAX_PATH	server/sqlite3.c	32564;"	d	file:
MAX_PATHNAME	server/sqlite3.c	24675;"	d	file:
MAX_ROWID	server/sqlite3.c	72965;"	d	file:
MAX_SECTOR_SIZE	server/sqlite3.c	41217;"	d	file:
MEM5LINK	server/sqlite3.c	18089;"	d	file:
MEMCELLSIZE	server/sqlite3.c	62297;"	d	file:
MEMDB	server/sqlite3.c	41565;"	d	file:
MEMDB	server/sqlite3.c	41567;"	d	file:
MEMTYPE_DB	server/sqlite3.c	13324;"	d	file:
MEMTYPE_HEAP	server/sqlite3.c	13320;"	d	file:
MEMTYPE_LOOKASIDE	server/sqlite3.c	13321;"	d	file:
MEMTYPE_PCACHE	server/sqlite3.c	13323;"	d	file:
MEMTYPE_SCRATCH	server/sqlite3.c	13322;"	d	file:
MEM_AffMask	server/sqlite3.c	14218;"	d	file:
MEM_Agg	server/sqlite3.c	14235;"	d	file:
MEM_Blob	server/sqlite3.c	14217;"	d	file:
MEM_Cleared	server/sqlite3.c	14222;"	d	file:
MEM_Dyn	server/sqlite3.c	14232;"	d	file:
MEM_Ephem	server/sqlite3.c	14234;"	d	file:
MEM_Frame	server/sqlite3.c	14220;"	d	file:
MEM_Int	server/sqlite3.c	14215;"	d	file:
MEM_Null	server/sqlite3.c	14213;"	d	file:
MEM_Real	server/sqlite3.c	14216;"	d	file:
MEM_RowSet	server/sqlite3.c	14219;"	d	file:
MEM_Static	server/sqlite3.c	14233;"	d	file:
MEM_Str	server/sqlite3.c	14214;"	d	file:
MEM_Term	server/sqlite3.c	14231;"	d	file:
MEM_TypeMask	server/sqlite3.c	14223;"	d	file:
MEM_Undefined	server/sqlite3.c	14221;"	d	file:
MEM_Zero	server/sqlite3.c	14236;"	d	file:
MEM_Zero	server/sqlite3.c	14238;"	d	file:
MEM_Zero	server/sqlite3.c	14239;"	d	file:
MIN	server/sqlite3.c	129343;"	d	file:
MIN	server/sqlite3.c	147741;"	d	file:
MIN	server/sqlite3.c	8521;"	d	file:
MKDIR_P	xdrpp/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MUTEX_LOGIC	server/sqlite3.c	10398;"	d	file:
MUTEX_LOGIC	server/sqlite3.c	10400;"	d	file:
MX_CELL	server/sqlite3.c	51372;"	d	file:
MX_CELL_SIZE	server/sqlite3.c	51365;"	d	file:
MX_CLOSE_ATTEMPT	server/sqlite3.c	34888;"	d	file:
MX_SMALL	server/sqlite3.c	17299;"	d	file:
MatchInfo	server/sqlite3.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	server/sqlite3.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Mem	server/sqlite3.c	/^struct Mem {$/;"	s	file:
Mem	server/sqlite3.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	server/sqlite3.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	server/sqlite3.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	server/sqlite3.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	server/sqlite3.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	server/sqlite3.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	server/sqlite3.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	server/sqlite3.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	server/sqlite3.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	server/sqlite3.c	/^struct MemJournal {$/;"	s	file:
MemJournal	server/sqlite3.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	server/sqlite3.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	server/sqlite3.c	/^struct MemPage {$/;"	s	file:
MemPage	server/sqlite3.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	server/sqlite3.c	14245;"	d	file:
MemValue	server/sqlite3.c	/^  union MemValue {$/;"	u	struct:Mem	file:
MergeEngine	server/sqlite3.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	server/sqlite3.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
Module	server/sqlite3.c	/^struct Module {$/;"	s	file:
Module	server/sqlite3.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NAMESPACE	xdrpp/xdrc/xdrc_internal.h	/^		 NAMESPACE, CLOSEBRACE } type;$/;"	e	enum:rpc_sym::symtype
NB	server/sqlite3.c	58087;"	d	file:
NCELL	server/sqlite3.c	147684;"	d	file:
NCSIZE	server/sqlite3.c	16803;"	d	file:
NC_AllowAgg	server/sqlite3.c	11806;"	d	file:
NC_HasAgg	server/sqlite3.c	11807;"	d	file:
NC_InAggFunc	server/sqlite3.c	11809;"	d	file:
NC_IsCheck	server/sqlite3.c	11808;"	d	file:
NC_MinMaxAgg	server/sqlite3.c	11811;"	d	file:
NC_PartIdx	server/sqlite3.c	11810;"	d	file:
NDEBUG	server/sqlite3.c	129003;"	d	file:
NDEBUG	server/sqlite3.c	129423;"	d	file:
NDEBUG	server/sqlite3.c	8057;"	d	file:
NDEBUG	server/sqlite3.c	8060;"	d	file:
NDELAY	server/sqlite3.c	126118;"	d	file:
NEVER	server/sqlite3.c	129399;"	d	file:
NEVER	server/sqlite3.c	129402;"	d	file:
NEVER	server/sqlite3.c	8133;"	d	file:
NEVER	server/sqlite3.c	8136;"	d	file:
NEVER	server/sqlite3.c	8139;"	d	file:
NN	server/sqlite3.c	58086;"	d	file:
NORMAL_INSTALL	xdrpp/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	xdrpp/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOT_WITHIN	server/sqlite3.c	7659;"	d	file:
NOT_WITHIN	server/sqlite3.h	7535;"	d
NO_LOCK	server/sqlite3.c	10202;"	d	file:
NO_PARENT	include/client.h	/^    NO_PARENT,$/;"	e	enum:ClientError
NROFF	xdrpp/Makefile	/^NROFF = nroff$/;"	m
NTDDI_WIN8	server/sqlite3.c	32541;"	d	file:
NTDDI_WINBLUE	server/sqlite3.c	32545;"	d	file:
NUM_VIRTUAL_NODES	server/serverimpl.hh	19;"	d
N_HASH	server/sqlite3.c	17305;"	d	file:
N_OR_COST	server/sqlite3.c	113248;"	d	file:
N_SORT_BUCKET	server/sqlite3.c	38991;"	d	file:
N_STATEMENT	server/sqlite3.c	150386;"	d	file:
NameContext	server/sqlite3.c	/^struct NameContext {$/;"	s	file:
NameContext	server/sqlite3.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NodeReader	server/sqlite3.c	/^struct NodeReader {$/;"	s	file:
NodeReader	server/sqlite3.c	/^typedef struct NodeReader NodeReader;$/;"	t	typeref:struct:NodeReader	file:
NodeWriter	server/sqlite3.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	server/sqlite3.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	typeref:struct:NodeWriter	file:
Normal	xdrpp/xdrpp/pollset.h	/^    Normal = 0,$/;"	m	class:xdr::pollset_plus::wake_type
OBJEXT	xdrpp/Makefile	/^OBJEXT = o$/;"	m
OE_Abort	server/sqlite3.c	11210;"	d	file:
OE_Cascade	server/sqlite3.c	11218;"	d	file:
OE_Default	server/sqlite3.c	11220;"	d	file:
OE_Fail	server/sqlite3.c	11211;"	d	file:
OE_Ignore	server/sqlite3.c	11212;"	d	file:
OE_None	server/sqlite3.c	11208;"	d	file:
OE_Replace	server/sqlite3.c	11213;"	d	file:
OE_Restrict	server/sqlite3.c	11215;"	d	file:
OE_Rollback	server/sqlite3.c	11209;"	d	file:
OE_SetDflt	server/sqlite3.c	11217;"	d	file:
OE_SetNull	server/sqlite3.c	11216;"	d	file:
OMIT_TEMPDB	server/sqlite3.c	8456;"	d	file:
OMIT_TEMPDB	server/sqlite3.c	8458;"	d	file:
ONE_BYTE_INT	server/sqlite3.c	66072;"	d	file:
OPFLAG_APPEND	server/sqlite3.c	12185;"	d	file:
OPFLAG_BULKCSR	server/sqlite3.c	12190;"	d	file:
OPFLAG_CLEARCACHE	server/sqlite3.c	12187;"	d	file:
OPFLAG_EPHEM	server/sqlite3.c	12182;"	d	file:
OPFLAG_ISUPDATE	server/sqlite3.c	12184;"	d	file:
OPFLAG_LASTROWID	server/sqlite3.c	12183;"	d	file:
OPFLAG_LENGTHARG	server/sqlite3.c	12188;"	d	file:
OPFLAG_NCHANGE	server/sqlite3.c	12181;"	d	file:
OPFLAG_P2ISREG	server/sqlite3.c	12191;"	d	file:
OPFLAG_PERMUTE	server/sqlite3.c	12192;"	d	file:
OPFLAG_TYPEOFARG	server/sqlite3.c	12189;"	d	file:
OPFLAG_USESEEKRESULT	server/sqlite3.c	12186;"	d	file:
OPFLG_IN1	server/sqlite3.c	9514;"	d	file:
OPFLG_IN2	server/sqlite3.c	9515;"	d	file:
OPFLG_IN3	server/sqlite3.c	9516;"	d	file:
OPFLG_INITIALIZER	server/sqlite3.c	9519;"	d	file:
OPFLG_JUMP	server/sqlite3.c	9512;"	d	file:
OPFLG_OUT2	server/sqlite3.c	9517;"	d	file:
OPFLG_OUT2_PRERELEASE	server/sqlite3.c	9513;"	d	file:
OPFLG_OUT3	server/sqlite3.c	9518;"	d	file:
OPT_HELP	xdrpp/xdrc/xdrc.cc	/^  OPT_HELP,$/;"	e	enum:opttag	file:
OPT_HH	xdrpp/xdrc/xdrc.cc	/^  OPT_HH$/;"	e	enum:opttag	file:
OPT_SERVERCC	xdrpp/xdrc/xdrc.cc	/^  OPT_SERVERCC,$/;"	e	enum:opttag	file:
OPT_SERVERHH	xdrpp/xdrc/xdrc.cc	/^  OPT_SERVERHH,$/;"	e	enum:opttag	file:
OPT_VERSION	xdrpp/xdrc/xdrc.cc	/^  OPT_VERSION = 0x100,$/;"	e	enum:opttag	file:
OP_Add	server/sqlite3.c	9439;"	d	file:
OP_AddImm	server/sqlite3.c	9387;"	d	file:
OP_Affinity	server/sqlite3.c	9398;"	d	file:
OP_AggFinal	server/sqlite3.c	9490;"	d	file:
OP_AggStep	server/sqlite3.c	9360;"	d	file:
OP_And	server/sqlite3.c	9422;"	d	file:
OP_AutoCommit	server/sqlite3.c	9353;"	d	file:
OP_BitAnd	server/sqlite3.c	9435;"	d	file:
OP_BitNot	server/sqlite3.c	9446;"	d	file:
OP_BitOr	server/sqlite3.c	9436;"	d	file:
OP_Blob	server/sqlite3.c	9380;"	d	file:
OP_Cast	server/sqlite3.c	9390;"	d	file:
OP_Checkpoint	server/sqlite3.c	9361;"	d	file:
OP_Clear	server/sqlite3.c	9468;"	d	file:
OP_Close	server/sqlite3.c	9411;"	d	file:
OP_CollSeq	server/sqlite3.c	9386;"	d	file:
OP_Column	server/sqlite3.c	9397;"	d	file:
OP_Compare	server/sqlite3.c	9392;"	d	file:
OP_Concat	server/sqlite3.c	9444;"	d	file:
OP_Copy	server/sqlite3.c	9383;"	d	file:
OP_Count	server/sqlite3.c	9400;"	d	file:
OP_CreateIndex	server/sqlite3.c	9470;"	d	file:
OP_CreateTable	server/sqlite3.c	9471;"	d	file:
OP_Delete	server/sqlite3.c	9445;"	d	file:
OP_Destroy	server/sqlite3.c	9467;"	d	file:
OP_Divide	server/sqlite3.c	9442;"	d	file:
OP_DropIndex	server/sqlite3.c	9475;"	d	file:
OP_DropTable	server/sqlite3.c	9474;"	d	file:
OP_DropTrigger	server/sqlite3.c	9476;"	d	file:
OP_EndCoroutine	server/sqlite3.c	9371;"	d	file:
OP_Eq	server/sqlite3.c	9429;"	d	file:
OP_Expire	server/sqlite3.c	9492;"	d	file:
OP_Explain	server/sqlite3.c	9505;"	d	file:
OP_FkCounter	server/sqlite3.c	9484;"	d	file:
OP_FkIfZero	server/sqlite3.c	9485;"	d	file:
OP_Found	server/sqlite3.c	9419;"	d	file:
OP_Function	server/sqlite3.c	9351;"	d	file:
OP_Ge	server/sqlite3.c	9433;"	d	file:
OP_Gosub	server/sqlite3.c	9367;"	d	file:
OP_Goto	server/sqlite3.c	9366;"	d	file:
OP_Gt	server/sqlite3.c	9430;"	d	file:
OP_Halt	server/sqlite3.c	9374;"	d	file:
OP_HaltIfNull	server/sqlite3.c	9373;"	d	file:
OP_IdxDelete	server/sqlite3.c	9461;"	d	file:
OP_IdxGE	server/sqlite3.c	9466;"	d	file:
OP_IdxGT	server/sqlite3.c	9464;"	d	file:
OP_IdxInsert	server/sqlite3.c	9460;"	d	file:
OP_IdxLE	server/sqlite3.c	9463;"	d	file:
OP_IdxLT	server/sqlite3.c	9465;"	d	file:
OP_IdxRowid	server/sqlite3.c	9462;"	d	file:
OP_If	server/sqlite3.c	9395;"	d	file:
OP_IfNeg	server/sqlite3.c	9488;"	d	file:
OP_IfNot	server/sqlite3.c	9396;"	d	file:
OP_IfPos	server/sqlite3.c	9487;"	d	file:
OP_IfZero	server/sqlite3.c	9489;"	d	file:
OP_IncrVacuum	server/sqlite3.c	9491;"	d	file:
OP_Init	server/sqlite3.c	9503;"	d	file:
OP_InitCoroutine	server/sqlite3.c	9370;"	d	file:
OP_Insert	server/sqlite3.c	9425;"	d	file:
OP_InsertInt	server/sqlite3.c	9434;"	d	file:
OP_Int64	server/sqlite3.c	9376;"	d	file:
OP_Integer	server/sqlite3.c	9375;"	d	file:
OP_IntegrityCk	server/sqlite3.c	9477;"	d	file:
OP_IsNull	server/sqlite3.c	9426;"	d	file:
OP_JournalMode	server/sqlite3.c	9362;"	d	file:
OP_Jump	server/sqlite3.c	9393;"	d	file:
OP_Last	server/sqlite3.c	9455;"	d	file:
OP_Le	server/sqlite3.c	9431;"	d	file:
OP_LoadAnalysis	server/sqlite3.c	9473;"	d	file:
OP_Lt	server/sqlite3.c	9432;"	d	file:
OP_MakeRecord	server/sqlite3.c	9399;"	d	file:
OP_MaxPgcnt	server/sqlite3.c	9502;"	d	file:
OP_MemMax	server/sqlite3.c	9486;"	d	file:
OP_Move	server/sqlite3.c	9382;"	d	file:
OP_Multiply	server/sqlite3.c	9441;"	d	file:
OP_MustBeInt	server/sqlite3.c	9388;"	d	file:
OP_Ne	server/sqlite3.c	9428;"	d	file:
OP_NewRowid	server/sqlite3.c	9424;"	d	file:
OP_Next	server/sqlite3.c	9359;"	d	file:
OP_NextIfOpen	server/sqlite3.c	9357;"	d	file:
OP_NoConflict	server/sqlite3.c	9417;"	d	file:
OP_Noop	server/sqlite3.c	9504;"	d	file:
OP_Not	server/sqlite3.c	9369;"	d	file:
OP_NotExists	server/sqlite3.c	9420;"	d	file:
OP_NotFound	server/sqlite3.c	9418;"	d	file:
OP_NotNull	server/sqlite3.c	9427;"	d	file:
OP_Null	server/sqlite3.c	9378;"	d	file:
OP_NullRow	server/sqlite3.c	9454;"	d	file:
OP_Once	server/sqlite3.c	9394;"	d	file:
OP_OpenAutoindex	server/sqlite3.c	9406;"	d	file:
OP_OpenEphemeral	server/sqlite3.c	9407;"	d	file:
OP_OpenPseudo	server/sqlite3.c	9410;"	d	file:
OP_OpenRead	server/sqlite3.c	9404;"	d	file:
OP_OpenWrite	server/sqlite3.c	9405;"	d	file:
OP_Or	server/sqlite3.c	9421;"	d	file:
OP_Pagecount	server/sqlite3.c	9501;"	d	file:
OP_Param	server/sqlite3.c	9482;"	d	file:
OP_ParseSchema	server/sqlite3.c	9472;"	d	file:
OP_Permutation	server/sqlite3.c	9391;"	d	file:
OP_Prev	server/sqlite3.c	9358;"	d	file:
OP_PrevIfOpen	server/sqlite3.c	9356;"	d	file:
OP_Program	server/sqlite3.c	9481;"	d	file:
OP_ReadCookie	server/sqlite3.c	9401;"	d	file:
OP_Real	server/sqlite3.c	9483;"	d	file:
OP_RealAffinity	server/sqlite3.c	9389;"	d	file:
OP_Remainder	server/sqlite3.c	9443;"	d	file:
OP_ReopenIdx	server/sqlite3.c	9403;"	d	file:
OP_ResetCount	server/sqlite3.c	9448;"	d	file:
OP_ResetSorter	server/sqlite3.c	9469;"	d	file:
OP_ResultRow	server/sqlite3.c	9385;"	d	file:
OP_Return	server/sqlite3.c	9368;"	d	file:
OP_Rewind	server/sqlite3.c	9458;"	d	file:
OP_RowData	server/sqlite3.c	9452;"	d	file:
OP_RowKey	server/sqlite3.c	9451;"	d	file:
OP_RowSetAdd	server/sqlite3.c	9478;"	d	file:
OP_RowSetRead	server/sqlite3.c	9479;"	d	file:
OP_RowSetTest	server/sqlite3.c	9480;"	d	file:
OP_Rowid	server/sqlite3.c	9453;"	d	file:
OP_SCopy	server/sqlite3.c	9384;"	d	file:
OP_Savepoint	server/sqlite3.c	9352;"	d	file:
OP_Seek	server/sqlite3.c	9416;"	d	file:
OP_SeekGE	server/sqlite3.c	9414;"	d	file:
OP_SeekGT	server/sqlite3.c	9415;"	d	file:
OP_SeekLE	server/sqlite3.c	9413;"	d	file:
OP_SeekLT	server/sqlite3.c	9412;"	d	file:
OP_Sequence	server/sqlite3.c	9423;"	d	file:
OP_SequenceTest	server/sqlite3.c	9409;"	d	file:
OP_SetCookie	server/sqlite3.c	9402;"	d	file:
OP_ShiftLeft	server/sqlite3.c	9437;"	d	file:
OP_ShiftRight	server/sqlite3.c	9438;"	d	file:
OP_SoftNull	server/sqlite3.c	9379;"	d	file:
OP_Sort	server/sqlite3.c	9457;"	d	file:
OP_SorterCompare	server/sqlite3.c	9449;"	d	file:
OP_SorterData	server/sqlite3.c	9450;"	d	file:
OP_SorterInsert	server/sqlite3.c	9459;"	d	file:
OP_SorterNext	server/sqlite3.c	9355;"	d	file:
OP_SorterOpen	server/sqlite3.c	9408;"	d	file:
OP_SorterSort	server/sqlite3.c	9456;"	d	file:
OP_String	server/sqlite3.c	9377;"	d	file:
OP_String8	server/sqlite3.c	9447;"	d	file:
OP_Subtract	server/sqlite3.c	9440;"	d	file:
OP_TableLock	server/sqlite3.c	9493;"	d	file:
OP_Transaction	server/sqlite3.c	9354;"	d	file:
OP_VBegin	server/sqlite3.c	9494;"	d	file:
OP_VColumn	server/sqlite3.c	9498;"	d	file:
OP_VCreate	server/sqlite3.c	9495;"	d	file:
OP_VDestroy	server/sqlite3.c	9496;"	d	file:
OP_VFilter	server/sqlite3.c	9364;"	d	file:
OP_VNext	server/sqlite3.c	9499;"	d	file:
OP_VOpen	server/sqlite3.c	9497;"	d	file:
OP_VRename	server/sqlite3.c	9500;"	d	file:
OP_VUpdate	server/sqlite3.c	9365;"	d	file:
OP_Vacuum	server/sqlite3.c	9363;"	d	file:
OP_Variable	server/sqlite3.c	9381;"	d	file:
OP_Yield	server/sqlite3.c	9372;"	d	file:
OSTRACE	server/sqlite3.c	19306;"	d	file:
OSTRACE	server/sqlite3.c	19308;"	d	file:
OSTRACE	server/sqlite3.c	24825;"	d	file:
OSTRACE	server/sqlite3.c	24827;"	d	file:
OSTRACE	server/sqlite3.c	32326;"	d	file:
OSTRACE	server/sqlite3.c	32328;"	d	file:
OS_VXWORKS	server/sqlite3.c	24605;"	d	file:
OS_VXWORKS	server/sqlite3.c	24607;"	d	file:
O_BINARY	server/sqlite3.c	25011;"	d	file:
O_LARGEFILE	server/sqlite3.c	25001;"	d	file:
O_LARGEFILE	server/sqlite3.c	25004;"	d	file:
O_LARGEFILE	server/sqlite3.c	25005;"	d	file:
O_NOFOLLOW	server/sqlite3.c	25008;"	d	file:
Op	server/sqlite3.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpHelp	server/sqlite3.c	24359;"	d	file:
OpHelp	server/sqlite3.c	24361;"	d	file:
OpenCounter	server/sqlite3.c	19468;"	d	file:
OpenCounter	server/sqlite3.c	19470;"	d	file:
OpenCounter	server/sqlite3.c	24987;"	d	file:
OpenCounter	server/sqlite3.c	24989;"	d	file:
OpenCounter	server/sqlite3.c	32488;"	d	file:
OpenCounter	server/sqlite3.c	32490;"	d	file:
OptimizationDisabled	server/sqlite3.c	10743;"	d	file:
OptimizationDisabled	server/sqlite3.c	10746;"	d	file:
OptimizationEnabled	server/sqlite3.c	10744;"	d	file:
OptimizationEnabled	server/sqlite3.c	10747;"	d	file:
P4_ADVANCE	server/sqlite3.c	9308;"	d	file:
P4_COLLSEQ	server/sqlite3.c	9296;"	d	file:
P4_DYNAMIC	server/sqlite3.c	9294;"	d	file:
P4_FUNCDEF	server/sqlite3.c	9297;"	d	file:
P4_INT32	server/sqlite3.c	9305;"	d	file:
P4_INT64	server/sqlite3.c	9304;"	d	file:
P4_INTARRAY	server/sqlite3.c	9306;"	d	file:
P4_KEYINFO	server/sqlite3.c	9298;"	d	file:
P4_MEM	server/sqlite3.c	9299;"	d	file:
P4_MPRINTF	server/sqlite3.c	9302;"	d	file:
P4_NOTUSED	server/sqlite3.c	9293;"	d	file:
P4_REAL	server/sqlite3.c	9303;"	d	file:
P4_STATIC	server/sqlite3.c	9295;"	d	file:
P4_SUBPROGRAM	server/sqlite3.c	9307;"	d	file:
P4_TRANSIENT	server/sqlite3.c	9300;"	d	file:
P4_VTAB	server/sqlite3.c	9301;"	d	file:
P5_ConstraintCheck	server/sqlite3.c	9313;"	d	file:
P5_ConstraintFK	server/sqlite3.c	9314;"	d	file:
P5_ConstraintNotNull	server/sqlite3.c	9311;"	d	file:
P5_ConstraintUnique	server/sqlite3.c	9312;"	d	file:
PACKAGE	xdrpp/Makefile	/^PACKAGE = xdrpp$/;"	m
PACKAGE	xdrpp/config.h	41;"	d
PACKAGE_BUGREPORT	xdrpp/Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_BUGREPORT	xdrpp/config.h	44;"	d
PACKAGE_NAME	xdrpp/Makefile	/^PACKAGE_NAME = xdrpp$/;"	m
PACKAGE_NAME	xdrpp/config.h	47;"	d
PACKAGE_STRING	xdrpp/Makefile	/^PACKAGE_STRING = xdrpp 0$/;"	m
PACKAGE_STRING	xdrpp/config.h	50;"	d
PACKAGE_TARNAME	xdrpp/Makefile	/^PACKAGE_TARNAME = xdrpp$/;"	m
PACKAGE_TARNAME	xdrpp/config.h	53;"	d
PACKAGE_URL	xdrpp/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	xdrpp/config.h	56;"	d
PACKAGE_VERSION	xdrpp/Makefile	/^PACKAGE_VERSION = 0$/;"	m
PACKAGE_VERSION	xdrpp/config.h	59;"	d
PAGERID	server/sqlite3.c	40919;"	d	file:
PAGERTRACE	server/sqlite3.c	40908;"	d	file:
PAGER_CACHESPILL	server/sqlite3.c	9768;"	d	file:
PAGER_CKPT_FULLFSYNC	server/sqlite3.c	9767;"	d	file:
PAGER_ERROR	server/sqlite3.c	41145;"	d	file:
PAGER_FLAGS_MASK	server/sqlite3.c	9769;"	d	file:
PAGER_FULLFSYNC	server/sqlite3.c	9766;"	d	file:
PAGER_GET_NOCONTENT	server/sqlite3.c	9756;"	d	file:
PAGER_GET_READONLY	server/sqlite3.c	9757;"	d	file:
PAGER_INCR	server/sqlite3.c	41512;"	d	file:
PAGER_INCR	server/sqlite3.c	41514;"	d	file:
PAGER_JOURNALMODE_DELETE	server/sqlite3.c	9746;"	d	file:
PAGER_JOURNALMODE_MEMORY	server/sqlite3.c	9750;"	d	file:
PAGER_JOURNALMODE_OFF	server/sqlite3.c	9748;"	d	file:
PAGER_JOURNALMODE_PERSIST	server/sqlite3.c	9747;"	d	file:
PAGER_JOURNALMODE_QUERY	server/sqlite3.c	9745;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	server/sqlite3.c	9749;"	d	file:
PAGER_JOURNALMODE_WAL	server/sqlite3.c	9751;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	server/sqlite3.c	9740;"	d	file:
PAGER_LOCKINGMODE_NORMAL	server/sqlite3.c	9739;"	d	file:
PAGER_LOCKINGMODE_QUERY	server/sqlite3.c	9738;"	d	file:
PAGER_MAX_PGNO	server/sqlite3.c	41583;"	d	file:
PAGER_MEMORY	server/sqlite3.c	9733;"	d	file:
PAGER_MJ_PGNO	server/sqlite3.c	9725;"	d	file:
PAGER_OMIT_JOURNAL	server/sqlite3.c	9732;"	d	file:
PAGER_OPEN	server/sqlite3.c	41139;"	d	file:
PAGER_READER	server/sqlite3.c	41140;"	d	file:
PAGER_STAT_HIT	server/sqlite3.c	41499;"	d	file:
PAGER_STAT_MISS	server/sqlite3.c	41500;"	d	file:
PAGER_STAT_WRITE	server/sqlite3.c	41501;"	d	file:
PAGER_SYNCHRONOUS_FULL	server/sqlite3.c	9764;"	d	file:
PAGER_SYNCHRONOUS_MASK	server/sqlite3.c	9765;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	server/sqlite3.c	9763;"	d	file:
PAGER_SYNCHRONOUS_OFF	server/sqlite3.c	9762;"	d	file:
PAGER_WRITER_CACHEMOD	server/sqlite3.c	41142;"	d	file:
PAGER_WRITER_DBMOD	server/sqlite3.c	41143;"	d	file:
PAGER_WRITER_FINISHED	server/sqlite3.c	41144;"	d	file:
PAGER_WRITER_LOCKED	server/sqlite3.c	41141;"	d	file:
PARTLY_WITHIN	server/sqlite3.c	7660;"	d	file:
PARTLY_WITHIN	server/sqlite3.h	7536;"	d
PATH_SEPARATOR	xdrpp/Makefile	/^PATH_SEPARATOR = :$/;"	m
PCACHE_DIRTYLIST_ADD	server/sqlite3.c	38479;"	d	file:
PCACHE_DIRTYLIST_FRONT	server/sqlite3.c	38480;"	d	file:
PCACHE_DIRTYLIST_REMOVE	server/sqlite3.c	38478;"	d	file:
PCache	server/sqlite3.c	/^struct PCache {$/;"	s	file:
PCache	server/sqlite3.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	server/sqlite3.c	/^struct PCache1 {$/;"	s	file:
PCache1	server/sqlite3.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	server/sqlite3.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	server/sqlite3.c	10264;"	d	file:
PENDING_BYTE	server/sqlite3.c	10266;"	d	file:
PENDING_BYTE_PAGE	server/sqlite3.c	51704;"	d	file:
PENDING_LOCK	server/sqlite3.c	10205;"	d	file:
PGHDR_DIRTY	server/sqlite3.c	9936;"	d	file:
PGHDR_DONT_WRITE	server/sqlite3.c	9941;"	d	file:
PGHDR_MMAP	server/sqlite3.c	9943;"	d	file:
PGHDR_NEED_READ	server/sqlite3.c	9939;"	d	file:
PGHDR_NEED_SYNC	server/sqlite3.c	9937;"	d	file:
PGHDR_REUSE_UNLIKELY	server/sqlite3.c	9940;"	d	file:
PGroup	server/sqlite3.c	/^struct PGroup {$/;"	s	file:
PGroup	server/sqlite3.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
PKGCONFIG	Makefile	/^PKGCONFIG = PKG_CONFIG_PATH="xdrpp:$${PKG_CONFIG_PATH}" pkg-config$/;"	m
POSITION_LIST_END	server/sqlite3.c	131559;"	d	file:
POST_INSTALL	xdrpp/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	xdrpp/Makefile	/^POST_UNINSTALL = :$/;"	m
POS_COLUMN	server/sqlite3.c	129384;"	d	file:
POS_END	server/sqlite3.c	129385;"	d	file:
PRE_INSTALL	xdrpp/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	xdrpp/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAM	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
PROGRAMS	xdrpp/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROXY_CONCHVERSION	server/sqlite3.c	31361;"	d	file:
PROXY_HEADERLEN	server/sqlite3.c	31362;"	d	file:
PROXY_HOSTIDLEN	server/sqlite3.c	31323;"	d	file:
PROXY_MAXCONCHLEN	server/sqlite3.c	31364;"	d	file:
PROXY_PATHINDEX	server/sqlite3.c	31363;"	d	file:
PTF_INTKEY	server/sqlite3.c	51398;"	d	file:
PTF_LEAF	server/sqlite3.c	51401;"	d	file:
PTF_LEAFDATA	server/sqlite3.c	51400;"	d	file:
PTF_ZERODATA	server/sqlite3.c	51399;"	d	file:
PTR	xdrpp/xdrc/xdrc_internal.h	/^  enum { SCALAR, PTR, ARRAY, VEC } qual {SCALAR};$/;"	e	enum:rpc_decl::__anon28
PTRMAP_BTREE	server/sqlite3.c	51760;"	d	file:
PTRMAP_FREEPAGE	server/sqlite3.c	51757;"	d	file:
PTRMAP_ISPAGE	server/sqlite3.c	51723;"	d	file:
PTRMAP_OVERFLOW1	server/sqlite3.c	51758;"	d	file:
PTRMAP_OVERFLOW2	server/sqlite3.c	51759;"	d	file:
PTRMAP_PAGENO	server/sqlite3.c	51721;"	d	file:
PTRMAP_PTROFFSET	server/sqlite3.c	51722;"	d	file:
PTRMAP_ROOTPAGE	server/sqlite3.c	51756;"	d	file:
Pager	server/sqlite3.c	/^struct Pager {$/;"	s	file:
Pager	server/sqlite3.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	server/sqlite3.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	server/sqlite3.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	server/sqlite3.c	/^struct Parse {$/;"	s	file:
Parse	server/sqlite3.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	server/sqlite3.c	/^struct ParseContext {$/;"	s	file:
ParseContext	server/sqlite3.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	server/sqlite3.c	/^struct PendingList {$/;"	s	file:
PendingList	server/sqlite3.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	server/sqlite3.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	server/sqlite3.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	server/sqlite3.c	/^struct PgHdr {$/;"	s	file:
PgHdr	server/sqlite3.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	server/sqlite3.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	server/sqlite3.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	server/sqlite3.c	/^typedef u32 Pgno;$/;"	t	file:
PmaReader	server/sqlite3.c	/^struct PmaReader {$/;"	s	file:
PmaReader	server/sqlite3.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaWriter	server/sqlite3.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	server/sqlite3.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PragFlag_NeedSchema	server/sqlite3.c	100788;"	d	file:
PragTyp_ACTIVATE_EXTENSIONS	server/sqlite3.c	100782;"	d	file:
PragTyp_AUTO_VACUUM	server/sqlite3.c	100747;"	d	file:
PragTyp_BUSY_TIMEOUT	server/sqlite3.c	100749;"	d	file:
PragTyp_CACHE_SIZE	server/sqlite3.c	100750;"	d	file:
PragTyp_CASE_SENSITIVE_LIKE	server/sqlite3.c	100751;"	d	file:
PragTyp_COLLATION_LIST	server/sqlite3.c	100752;"	d	file:
PragTyp_COMPILE_OPTIONS	server/sqlite3.c	100753;"	d	file:
PragTyp_DATABASE_LIST	server/sqlite3.c	100755;"	d	file:
PragTyp_DATA_STORE_DIRECTORY	server/sqlite3.c	100754;"	d	file:
PragTyp_DEFAULT_CACHE_SIZE	server/sqlite3.c	100756;"	d	file:
PragTyp_ENCODING	server/sqlite3.c	100757;"	d	file:
PragTyp_FLAG	server/sqlite3.c	100748;"	d	file:
PragTyp_FOREIGN_KEY_CHECK	server/sqlite3.c	100758;"	d	file:
PragTyp_FOREIGN_KEY_LIST	server/sqlite3.c	100759;"	d	file:
PragTyp_HEADER_VALUE	server/sqlite3.c	100746;"	d	file:
PragTyp_HEXKEY	server/sqlite3.c	100783;"	d	file:
PragTyp_INCREMENTAL_VACUUM	server/sqlite3.c	100760;"	d	file:
PragTyp_INDEX_INFO	server/sqlite3.c	100761;"	d	file:
PragTyp_INDEX_LIST	server/sqlite3.c	100762;"	d	file:
PragTyp_INTEGRITY_CHECK	server/sqlite3.c	100763;"	d	file:
PragTyp_JOURNAL_MODE	server/sqlite3.c	100764;"	d	file:
PragTyp_JOURNAL_SIZE_LIMIT	server/sqlite3.c	100765;"	d	file:
PragTyp_KEY	server/sqlite3.c	100784;"	d	file:
PragTyp_LOCKING_MODE	server/sqlite3.c	100767;"	d	file:
PragTyp_LOCK_PROXY_FILE	server/sqlite3.c	100766;"	d	file:
PragTyp_LOCK_STATUS	server/sqlite3.c	100786;"	d	file:
PragTyp_MMAP_SIZE	server/sqlite3.c	100769;"	d	file:
PragTyp_PAGE_COUNT	server/sqlite3.c	100768;"	d	file:
PragTyp_PAGE_SIZE	server/sqlite3.c	100770;"	d	file:
PragTyp_PARSER_TRACE	server/sqlite3.c	100787;"	d	file:
PragTyp_REKEY	server/sqlite3.c	100785;"	d	file:
PragTyp_SECURE_DELETE	server/sqlite3.c	100771;"	d	file:
PragTyp_SHRINK_MEMORY	server/sqlite3.c	100772;"	d	file:
PragTyp_SOFT_HEAP_LIMIT	server/sqlite3.c	100773;"	d	file:
PragTyp_STATS	server/sqlite3.c	100774;"	d	file:
PragTyp_SYNCHRONOUS	server/sqlite3.c	100775;"	d	file:
PragTyp_TABLE_INFO	server/sqlite3.c	100776;"	d	file:
PragTyp_TEMP_STORE	server/sqlite3.c	100777;"	d	file:
PragTyp_TEMP_STORE_DIRECTORY	server/sqlite3.c	100778;"	d	file:
PragTyp_THREADS	server/sqlite3.c	100779;"	d	file:
PragTyp_WAL_AUTOCHECKPOINT	server/sqlite3.c	100780;"	d	file:
PragTyp_WAL_CHECKPOINT	server/sqlite3.c	100781;"	d	file:
Printer	xdrpp/xdrpp/printer.h	/^  Printer() {}$/;"	f	struct:xdr::detail::Printer
Printer	xdrpp/xdrpp/printer.h	/^  Printer(int indent) : indent_(indent) {}$/;"	f	struct:xdr::detail::Printer
Printer	xdrpp/xdrpp/printer.h	/^struct Printer {$/;"	s	namespace:xdr::detail
PrintfArguments	server/sqlite3.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	server/sqlite3.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
Prompt	shell/shell.cc	/^Prompt()$/;"	f
ProxyServerLoop	server/server.cc	/^ProxyServerLoop(void *)$/;"	f
RANLIB	xdrpp/Makefile	/^RANLIB = ranlib$/;"	m
READMARK_NOT_USED	server/sqlite3.c	48396;"	d	file:
READ_LOCK	server/sqlite3.c	51465;"	d	file:
READ_UTF16BE	server/sqlite3.c	22304;"	d	file:
READ_UTF16LE	server/sqlite3.c	22294;"	d	file:
READ_UTF8	server/sqlite3.c	146664;"	d	file:
READ_UTF8	server/sqlite3.c	22341;"	d	file:
REARGUARD	server/sqlite3.c	16798;"	d	file:
REGISTER_TRACE	server/sqlite3.c	69405;"	d	file:
REGISTER_TRACE	server/sqlite3.c	69407;"	d	file:
REJECT	xdrpp/xdrc/scan.cc	603;"	d	file:
REJECT_STAT	xdrpp/xdrpp/exception.h	/^  enum { ACCEPT_STAT, AUTH_STAT, REJECT_STAT } type_;$/;"	e	enum:xdr::xdr_call_error::__anon34
RESERVED_BYTE	server/sqlite3.c	10268;"	d	file:
RESERVED_LOCK	server/sqlite3.c	10204;"	d	file:
RNDAWAY	server/sqlite3.c	150146;"	d	file:
RNDTOWARDS	server/sqlite3.c	150145;"	d	file:
ROUND8	server/sqlite3.c	8681;"	d	file:
ROUNDDOWN8	server/sqlite3.c	8686;"	d	file:
ROWSET_ALLOCATION_SIZE	server/sqlite3.c	40207;"	d	file:
ROWSET_ENTRY_PER_CHUNK	server/sqlite3.c	40212;"	d	file:
ROWSET_NEXT	server/sqlite3.c	40261;"	d	file:
ROWSET_SORTED	server/sqlite3.c	40260;"	d	file:
RTREE_CACHE_SZ	server/sqlite3.c	147597;"	d	file:
RTREE_COORD_INT32	server/sqlite3.c	147535;"	d	file:
RTREE_COORD_REAL32	server/sqlite3.c	147534;"	d	file:
RTREE_DECODE_COORD	server/sqlite3.c	148304;"	d	file:
RTREE_DECODE_COORD	server/sqlite3.c	148312;"	d	file:
RTREE_DECODE_COORD	server/sqlite3.c	148318;"	d	file:
RTREE_DEFAULT_ROWEST	server/sqlite3.c	147488;"	d	file:
RTREE_EQ	server/sqlite3.c	147662;"	d	file:
RTREE_GE	server/sqlite3.c	147665;"	d	file:
RTREE_GEOMETRY_MAGIC	server/sqlite3.c	147722;"	d	file:
RTREE_GT	server/sqlite3.c	147666;"	d	file:
RTREE_LE	server/sqlite3.c	147663;"	d	file:
RTREE_LT	server/sqlite3.c	147664;"	d	file:
RTREE_MATCH	server/sqlite3.c	147667;"	d	file:
RTREE_MAXCELLS	server/sqlite3.c	147580;"	d	file:
RTREE_MAX_DEPTH	server/sqlite3.c	147589;"	d	file:
RTREE_MAX_DIMENSIONS	server/sqlite3.c	147473;"	d	file:
RTREE_MINCELLS	server/sqlite3.c	147578;"	d	file:
RTREE_MIN_ROWEST	server/sqlite3.c	147489;"	d	file:
RTREE_OF_CURSOR	server/sqlite3.c	147619;"	d	file:
RTREE_QUERY	server/sqlite3.c	147668;"	d	file:
RTREE_QUEUE_TRACE	server/sqlite3.c	148644;"	d	file:
RTREE_REINSERT	server/sqlite3.c	147579;"	d	file:
RTREE_ZERO	server/sqlite3.c	147545;"	d	file:
RTREE_ZERO	server/sqlite3.c	147549;"	d	file:
Read	xdrpp/xdrpp/pollset.h	/^    Read = kReadFlag,$/;"	e	enum:xdr::pollset::op_t
ReadOnce	xdrpp/xdrpp/pollset.h	/^    ReadOnce = kReadFlag | kOnceFlag,$/;"	e	enum:xdr::pollset::op_t
ReadWrite	xdrpp/xdrpp/pollset.h	/^    ReadWrite = kReadFlag | kWriteFlag,$/;"	e	enum:xdr::pollset::op_t
RecordCompare	server/sqlite3.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	file:
Reinsert	server/sqlite3.c	/^static int Reinsert($/;"	f	file:
RowSet	server/sqlite3.c	/^struct RowSet {$/;"	s	file:
RowSet	server/sqlite3.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	server/sqlite3.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	server/sqlite3.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	server/sqlite3.c	/^struct Rtree {$/;"	s	file:
Rtree	server/sqlite3.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	server/sqlite3.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	server/sqlite3.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	server/sqlite3.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	server/sqlite3.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	server/sqlite3.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	server/sqlite3.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	server/sqlite3.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	server/sqlite3.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeDValue	server/sqlite3.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	server/sqlite3.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	server/sqlite3.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	server/sqlite3.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	server/sqlite3.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	server/sqlite3.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	server/sqlite3.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	server/sqlite3.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
RtreeSearchPoint	server/sqlite3.c	/^struct RtreeSearchPoint {$/;"	s	file:
RtreeSearchPoint	server/sqlite3.c	/^typedef struct RtreeSearchPoint RtreeSearchPoint;$/;"	t	typeref:struct:RtreeSearchPoint	file:
RtreeValue	server/sqlite3.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	server/sqlite3.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
RunScript	shell/shell.cc	/^RunScript(const char *file)$/;"	f
SAVEPOINT_BEGIN	server/sqlite3.c	10892;"	d	file:
SAVEPOINT_RELEASE	server/sqlite3.c	10893;"	d	file:
SAVEPOINT_ROLLBACK	server/sqlite3.c	10894;"	d	file:
SAVE_SZ	server/sqlite3.c	88753;"	d	file:
SCALAR	xdrpp/xdrc/xdrc_internal.h	/^  enum { SCALAR, PTR, ARRAY, VEC } qual {SCALAR};$/;"	e	enum:rpc_decl::__anon28
SCALAR	xdrpp/xdrc/xdrc_internal.h	/^  enum { SCALAR, PTR, ARRAY, VEC } qual {SCALAR};$/;"	e	enum:rpc_decl::qual
SCHEMA_TABLE	server/sqlite3.c	8803;"	d	file:
SELECTTRACE	server/sqlite3.c	104017;"	d	file:
SELECTTRACE	server/sqlite3.c	104022;"	d	file:
SELECTTRACE_ENABLED	server/sqlite3.c	8766;"	d	file:
SELECTTRACE_ENABLED	server/sqlite3.c	8768;"	d	file:
SERVER_OBJ	server/Makefile	/^SERVER_OBJ := $(SERVER_OBJ:.cc=.o)$/;"	m
SERVER_OBJ	server/Makefile	/^SERVER_OBJ := $(SERVER_SRC:.c=.o)$/;"	m
SERVER_SRC	server/Makefile	/^SERVER_SRC := server\/server.cc \\$/;"	m
SETBIT	server/sqlite3.c	38319;"	d	file:
SET_FULLSYNC	server/sqlite3.c	10150;"	d	file:
SET_MAKE	xdrpp/Makefile	/^SET_MAKE = $/;"	m
SF_Aggregate	server/sqlite3.c	11861;"	d	file:
SF_Compound	server/sqlite3.c	11865;"	d	file:
SF_Distinct	server/sqlite3.c	11859;"	d	file:
SF_Expanded	server/sqlite3.c	11863;"	d	file:
SF_HasTypeInfo	server/sqlite3.c	11864;"	d	file:
SF_MaybeConvert	server/sqlite3.c	11869;"	d	file:
SF_MinMaxAgg	server/sqlite3.c	11871;"	d	file:
SF_NestedFrom	server/sqlite3.c	11868;"	d	file:
SF_Recursive	server/sqlite3.c	11870;"	d	file:
SF_Resolved	server/sqlite3.c	11860;"	d	file:
SF_UsesEphemeral	server/sqlite3.c	11862;"	d	file:
SF_Values	server/sqlite3.c	11866;"	d	file:
SHARED_FIRST	server/sqlite3.c	10269;"	d	file:
SHARED_LOCK	server/sqlite3.c	10203;"	d	file:
SHARED_SIZE	server/sqlite3.c	10270;"	d	file:
SHELL	xdrpp/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL_OBJ	shell/Makefile	/^SHELL_OBJ := $(SHELL_SRC:.cc=.o)$/;"	m
SHELL_SRC	shell/Makefile	/^SHELL_SRC := shell\/shell.cc$/;"	m
SLOT_2_0	server/sqlite3.c	23475;"	d	file:
SLOT_4_2_0	server/sqlite3.c	23476;"	d	file:
SMALLEST_INT64	server/sqlite3.c	132616;"	d	file:
SMALLEST_INT64	server/sqlite3.c	8675;"	d	file:
SORTER_MAX_MERGE_COUNT	server/sqlite3.c	76388;"	d	file:
SORTER_MIN_WORKING	server/sqlite3.c	76385;"	d	file:
SORTFLAG_UseSorter	server/sqlite3.c	104053;"	d	file:
SOURCES	xdrpp/Makefile	/^SOURCES = $(xdrpp_libxdrpp_a_SOURCES) $(tests_test_cereal_SOURCES) \\$/;"	m
SPILLFLAG_NOSYNC	server/sqlite3.c	41249;"	d	file:
SPILLFLAG_OFF	server/sqlite3.c	41247;"	d	file:
SPILLFLAG_ROLLBACK	server/sqlite3.c	41248;"	d	file:
SQLITE3_MUTEX_INITIALIZER	server/sqlite3.c	18940;"	d	file:
SQLITE3_MUTEX_INITIALIZER	server/sqlite3.c	18942;"	d	file:
SQLITE3_MUTEX_INITIALIZER	server/sqlite3.c	19592;"	d	file:
SQLITE3_MUTEX_INITIALIZER	server/sqlite3.c	19595;"	d	file:
SQLITE3_TEXT	server/sqlite3.c	3914;"	d	file:
SQLITE3_TEXT	server/sqlite3.h	3790;"	d
SQLITE_ABORT	server/sqlite3.c	527;"	d	file:
SQLITE_ABORT	server/sqlite3.h	403;"	d
SQLITE_ABORT_ROLLBACK	server/sqlite3.c	610;"	d	file:
SQLITE_ABORT_ROLLBACK	server/sqlite3.h	486;"	d
SQLITE_ACCESS_EXISTS	server/sqlite3.c	1328;"	d	file:
SQLITE_ACCESS_EXISTS	server/sqlite3.h	1204;"	d
SQLITE_ACCESS_READ	server/sqlite3.c	1330;"	d	file:
SQLITE_ACCESS_READ	server/sqlite3.h	1206;"	d
SQLITE_ACCESS_READWRITE	server/sqlite3.c	1329;"	d	file:
SQLITE_ACCESS_READWRITE	server/sqlite3.h	1205;"	d
SQLITE_AFF_INTEGER	server/sqlite3.c	10970;"	d	file:
SQLITE_AFF_MASK	server/sqlite3.c	10979;"	d	file:
SQLITE_AFF_NONE	server/sqlite3.c	10967;"	d	file:
SQLITE_AFF_NUMERIC	server/sqlite3.c	10969;"	d	file:
SQLITE_AFF_REAL	server/sqlite3.c	10971;"	d	file:
SQLITE_AFF_TEXT	server/sqlite3.c	10968;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	server/sqlite3.c	13473;"	d	file:
SQLITE_ALTER_TABLE	server/sqlite3.c	2705;"	d	file:
SQLITE_ALTER_TABLE	server/sqlite3.h	2581;"	d
SQLITE_AMALGAMATION	server/sqlite3.c	21;"	d	file:
SQLITE_ANALYZE	server/sqlite3.c	2707;"	d	file:
SQLITE_ANALYZE	server/sqlite3.h	2583;"	d
SQLITE_ANY	server/sqlite3.c	4281;"	d	file:
SQLITE_ANY	server/sqlite3.h	4157;"	d
SQLITE_API	server/sqlite3.c	177;"	d	file:
SQLITE_API	server/sqlite3.c	26;"	d	file:
SQLITE_API	server/sqlite3.h	53;"	d
SQLITE_ASCII	server/sqlite3.c	8531;"	d	file:
SQLITE_ATTACH	server/sqlite3.c	2703;"	d	file:
SQLITE_ATTACH	server/sqlite3.h	2579;"	d
SQLITE_AUTH	server/sqlite3.c	546;"	d	file:
SQLITE_AUTH	server/sqlite3.h	422;"	d
SQLITE_AUTH_USER	server/sqlite3.c	624;"	d	file:
SQLITE_AUTH_USER	server/sqlite3.h	500;"	d
SQLITE_AllOpts	server/sqlite3.c	10737;"	d	file:
SQLITE_AutoIndex	server/sqlite3.c	10711;"	d	file:
SQLITE_BIGENDIAN	server/sqlite3.c	8651;"	d	file:
SQLITE_BIGENDIAN	server/sqlite3.c	8658;"	d	file:
SQLITE_BIGENDIAN	server/sqlite3.c	8664;"	d	file:
SQLITE_BIG_DBL	server/sqlite3.c	8439;"	d	file:
SQLITE_BIG_DBL	server/sqlite3.c	8447;"	d	file:
SQLITE_BLOB	server/sqlite3.c	3907;"	d	file:
SQLITE_BLOB	server/sqlite3.h	3783;"	d
SQLITE_BUSY	server/sqlite3.c	528;"	d	file:
SQLITE_BUSY	server/sqlite3.h	404;"	d
SQLITE_BUSY_RECOVERY	server/sqlite3.c	599;"	d	file:
SQLITE_BUSY_RECOVERY	server/sqlite3.h	475;"	d
SQLITE_BUSY_SNAPSHOT	server/sqlite3.c	600;"	d	file:
SQLITE_BUSY_SNAPSHOT	server/sqlite3.h	476;"	d
SQLITE_BYTEORDER	server/sqlite3.c	8650;"	d	file:
SQLITE_BYTEORDER	server/sqlite3.c	8657;"	d	file:
SQLITE_BYTEORDER	server/sqlite3.c	8663;"	d	file:
SQLITE_CANTOPEN	server/sqlite3.c	537;"	d	file:
SQLITE_CANTOPEN	server/sqlite3.h	413;"	d
SQLITE_CANTOPEN_BKPT	server/sqlite3.c	12473;"	d	file:
SQLITE_CANTOPEN_CONVPATH	server/sqlite3.c	604;"	d	file:
SQLITE_CANTOPEN_CONVPATH	server/sqlite3.h	480;"	d
SQLITE_CANTOPEN_FULLPATH	server/sqlite3.c	603;"	d	file:
SQLITE_CANTOPEN_FULLPATH	server/sqlite3.h	479;"	d
SQLITE_CANTOPEN_ISDIR	server/sqlite3.c	602;"	d	file:
SQLITE_CANTOPEN_ISDIR	server/sqlite3.h	478;"	d
SQLITE_CANTOPEN_NOTEMPDIR	server/sqlite3.c	601;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	server/sqlite3.h	477;"	d
SQLITE_CHECKPOINT_FULL	server/sqlite3.c	7450;"	d	file:
SQLITE_CHECKPOINT_FULL	server/sqlite3.h	7326;"	d
SQLITE_CHECKPOINT_PASSIVE	server/sqlite3.c	7449;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	server/sqlite3.h	7325;"	d
SQLITE_CHECKPOINT_RESTART	server/sqlite3.c	7451;"	d	file:
SQLITE_CHECKPOINT_RESTART	server/sqlite3.h	7327;"	d
SQLITE_CONFIG_COVERING_INDEX_SCAN	server/sqlite3.c	1871;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	server/sqlite3.h	1747;"	d
SQLITE_CONFIG_GETMALLOC	server/sqlite3.c	1856;"	d	file:
SQLITE_CONFIG_GETMALLOC	server/sqlite3.h	1732;"	d
SQLITE_CONFIG_GETMUTEX	server/sqlite3.c	1862;"	d	file:
SQLITE_CONFIG_GETMUTEX	server/sqlite3.h	1738;"	d
SQLITE_CONFIG_GETPCACHE	server/sqlite3.c	1866;"	d	file:
SQLITE_CONFIG_GETPCACHE	server/sqlite3.h	1742;"	d
SQLITE_CONFIG_GETPCACHE2	server/sqlite3.c	1870;"	d	file:
SQLITE_CONFIG_GETPCACHE2	server/sqlite3.h	1746;"	d
SQLITE_CONFIG_HEAP	server/sqlite3.c	1859;"	d	file:
SQLITE_CONFIG_HEAP	server/sqlite3.h	1735;"	d
SQLITE_CONFIG_LOG	server/sqlite3.c	1867;"	d	file:
SQLITE_CONFIG_LOG	server/sqlite3.h	1743;"	d
SQLITE_CONFIG_LOOKASIDE	server/sqlite3.c	1864;"	d	file:
SQLITE_CONFIG_LOOKASIDE	server/sqlite3.h	1740;"	d
SQLITE_CONFIG_MALLOC	server/sqlite3.c	1855;"	d	file:
SQLITE_CONFIG_MALLOC	server/sqlite3.h	1731;"	d
SQLITE_CONFIG_MEMSTATUS	server/sqlite3.c	1860;"	d	file:
SQLITE_CONFIG_MEMSTATUS	server/sqlite3.h	1736;"	d
SQLITE_CONFIG_MMAP_SIZE	server/sqlite3.c	1873;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	server/sqlite3.h	1749;"	d
SQLITE_CONFIG_MULTITHREAD	server/sqlite3.c	1853;"	d	file:
SQLITE_CONFIG_MULTITHREAD	server/sqlite3.h	1729;"	d
SQLITE_CONFIG_MUTEX	server/sqlite3.c	1861;"	d	file:
SQLITE_CONFIG_MUTEX	server/sqlite3.h	1737;"	d
SQLITE_CONFIG_PAGECACHE	server/sqlite3.c	1858;"	d	file:
SQLITE_CONFIG_PAGECACHE	server/sqlite3.h	1734;"	d
SQLITE_CONFIG_PCACHE	server/sqlite3.c	1865;"	d	file:
SQLITE_CONFIG_PCACHE	server/sqlite3.h	1741;"	d
SQLITE_CONFIG_PCACHE2	server/sqlite3.c	1869;"	d	file:
SQLITE_CONFIG_PCACHE2	server/sqlite3.h	1745;"	d
SQLITE_CONFIG_SCRATCH	server/sqlite3.c	1857;"	d	file:
SQLITE_CONFIG_SCRATCH	server/sqlite3.h	1733;"	d
SQLITE_CONFIG_SERIALIZED	server/sqlite3.c	1854;"	d	file:
SQLITE_CONFIG_SERIALIZED	server/sqlite3.h	1730;"	d
SQLITE_CONFIG_SINGLETHREAD	server/sqlite3.c	1852;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	server/sqlite3.h	1728;"	d
SQLITE_CONFIG_SQLLOG	server/sqlite3.c	1872;"	d	file:
SQLITE_CONFIG_SQLLOG	server/sqlite3.h	1748;"	d
SQLITE_CONFIG_URI	server/sqlite3.c	1868;"	d	file:
SQLITE_CONFIG_URI	server/sqlite3.h	1744;"	d
SQLITE_CONFIG_WIN32_HEAPSIZE	server/sqlite3.c	1874;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	server/sqlite3.h	1750;"	d
SQLITE_CONSTRAINT	server/sqlite3.c	542;"	d	file:
SQLITE_CONSTRAINT	server/sqlite3.h	418;"	d
SQLITE_CONSTRAINT_CHECK	server/sqlite3.c	611;"	d	file:
SQLITE_CONSTRAINT_CHECK	server/sqlite3.h	487;"	d
SQLITE_CONSTRAINT_COMMITHOOK	server/sqlite3.c	612;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	server/sqlite3.h	488;"	d
SQLITE_CONSTRAINT_FOREIGNKEY	server/sqlite3.c	613;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	server/sqlite3.h	489;"	d
SQLITE_CONSTRAINT_FUNCTION	server/sqlite3.c	614;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	server/sqlite3.h	490;"	d
SQLITE_CONSTRAINT_NOTNULL	server/sqlite3.c	615;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	server/sqlite3.h	491;"	d
SQLITE_CONSTRAINT_PRIMARYKEY	server/sqlite3.c	616;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	server/sqlite3.h	492;"	d
SQLITE_CONSTRAINT_ROWID	server/sqlite3.c	620;"	d	file:
SQLITE_CONSTRAINT_ROWID	server/sqlite3.h	496;"	d
SQLITE_CONSTRAINT_TRIGGER	server/sqlite3.c	617;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	server/sqlite3.h	493;"	d
SQLITE_CONSTRAINT_UNIQUE	server/sqlite3.c	618;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	server/sqlite3.h	494;"	d
SQLITE_CONSTRAINT_VTAB	server/sqlite3.c	619;"	d	file:
SQLITE_CONSTRAINT_VTAB	server/sqlite3.h	495;"	d
SQLITE_COPY	server/sqlite3.c	2712;"	d	file:
SQLITE_COPY	server/sqlite3.h	2588;"	d
SQLITE_CORE	server/sqlite3.c	129865;"	d	file:
SQLITE_CORE	server/sqlite3.c	20;"	d	file:
SQLITE_CORE	server/sqlite3.c	99440;"	d	file:
SQLITE_CORRUPT	server/sqlite3.c	534;"	d	file:
SQLITE_CORRUPT	server/sqlite3.h	410;"	d
SQLITE_CORRUPT_BKPT	server/sqlite3.c	12471;"	d	file:
SQLITE_CORRUPT_VTAB	server/sqlite3.c	605;"	d	file:
SQLITE_CORRUPT_VTAB	server/sqlite3.h	481;"	d
SQLITE_CREATE_INDEX	server/sqlite3.c	2680;"	d	file:
SQLITE_CREATE_INDEX	server/sqlite3.h	2556;"	d
SQLITE_CREATE_TABLE	server/sqlite3.c	2681;"	d	file:
SQLITE_CREATE_TABLE	server/sqlite3.h	2557;"	d
SQLITE_CREATE_TEMP_INDEX	server/sqlite3.c	2682;"	d	file:
SQLITE_CREATE_TEMP_INDEX	server/sqlite3.h	2558;"	d
SQLITE_CREATE_TEMP_TABLE	server/sqlite3.c	2683;"	d	file:
SQLITE_CREATE_TEMP_TABLE	server/sqlite3.h	2559;"	d
SQLITE_CREATE_TEMP_TRIGGER	server/sqlite3.c	2684;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	server/sqlite3.h	2560;"	d
SQLITE_CREATE_TEMP_VIEW	server/sqlite3.c	2685;"	d	file:
SQLITE_CREATE_TEMP_VIEW	server/sqlite3.h	2561;"	d
SQLITE_CREATE_TRIGGER	server/sqlite3.c	2686;"	d	file:
SQLITE_CREATE_TRIGGER	server/sqlite3.h	2562;"	d
SQLITE_CREATE_VIEW	server/sqlite3.c	2687;"	d	file:
SQLITE_CREATE_VIEW	server/sqlite3.h	2563;"	d
SQLITE_CREATE_VTABLE	server/sqlite3.c	2708;"	d	file:
SQLITE_CREATE_VTABLE	server/sqlite3.h	2584;"	d
SQLITE_CacheSpill	server/sqlite3.c	10692;"	d	file:
SQLITE_CkptFullFSync	server/sqlite3.c	10691;"	d	file:
SQLITE_ColumnCache	server/sqlite3.c	10726;"	d	file:
SQLITE_CountRows	server/sqlite3.c	10695;"	d	file:
SQLITE_CoverIdxScan	server/sqlite3.c	10731;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	server/sqlite3.c	1935;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	server/sqlite3.h	1811;"	d
SQLITE_DBCONFIG_ENABLE_TRIGGER	server/sqlite3.c	1936;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	server/sqlite3.h	1812;"	d
SQLITE_DBCONFIG_LOOKASIDE	server/sqlite3.c	1934;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	server/sqlite3.h	1810;"	d
SQLITE_DBSTATUS_CACHE_HIT	server/sqlite3.c	6591;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	server/sqlite3.h	6467;"	d
SQLITE_DBSTATUS_CACHE_MISS	server/sqlite3.c	6592;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	server/sqlite3.h	6468;"	d
SQLITE_DBSTATUS_CACHE_USED	server/sqlite3.c	6585;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	server/sqlite3.h	6461;"	d
SQLITE_DBSTATUS_CACHE_WRITE	server/sqlite3.c	6593;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	server/sqlite3.h	6469;"	d
SQLITE_DBSTATUS_DEFERRED_FKS	server/sqlite3.c	6594;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	server/sqlite3.h	6470;"	d
SQLITE_DBSTATUS_LOOKASIDE_HIT	server/sqlite3.c	6588;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	server/sqlite3.h	6464;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	server/sqlite3.c	6590;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	server/sqlite3.h	6466;"	d
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	server/sqlite3.c	6589;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	server/sqlite3.h	6465;"	d
SQLITE_DBSTATUS_LOOKASIDE_USED	server/sqlite3.c	6584;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	server/sqlite3.h	6460;"	d
SQLITE_DBSTATUS_MAX	server/sqlite3.c	6595;"	d	file:
SQLITE_DBSTATUS_MAX	server/sqlite3.h	6471;"	d
SQLITE_DBSTATUS_SCHEMA_USED	server/sqlite3.c	6586;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	server/sqlite3.h	6462;"	d
SQLITE_DBSTATUS_STMT_USED	server/sqlite3.c	6587;"	d	file:
SQLITE_DBSTATUS_STMT_USED	server/sqlite3.h	6463;"	d
SQLITE_DEBUG_OS_TRACE	server/sqlite3.c	19303;"	d	file:
SQLITE_DEBUG_OS_TRACE	server/sqlite3.c	24822;"	d	file:
SQLITE_DEBUG_OS_TRACE	server/sqlite3.c	32323;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	server/sqlite3.c	8955;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	server/sqlite3.c	7788;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	server/sqlite3.c	8469;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	server/sqlite3.c	24662;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	server/sqlite3.c	9698;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	server/sqlite3.c	7991;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	server/sqlite3.c	8739;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	server/sqlite3.c	8743;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	server/sqlite3.c	8744;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE_xc	server/sqlite3.c	8740;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	server/sqlite3.c	7840;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	server/sqlite3.c	7843;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	server/sqlite3.c	7844;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	server/sqlite3.c	24669;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	server/sqlite3.c	8477;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	server/sqlite3.c	10157;"	d	file:
SQLITE_DEFAULT_TEMP_CACHE_SIZE	server/sqlite3.c	7791;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	server/sqlite3.c	7799;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	server/sqlite3.c	8502;"	d	file:
SQLITE_DELETE	server/sqlite3.c	2688;"	d	file:
SQLITE_DELETE	server/sqlite3.h	2564;"	d
SQLITE_DENY	server/sqlite3.c	2657;"	d	file:
SQLITE_DENY	server/sqlite3.h	2533;"	d
SQLITE_DEPRECATED	server/sqlite3.c	194;"	d	file:
SQLITE_DEPRECATED	server/sqlite3.h	70;"	d
SQLITE_DETACH	server/sqlite3.c	2704;"	d	file:
SQLITE_DETACH	server/sqlite3.h	2580;"	d
SQLITE_DETERMINISTIC	server/sqlite3.c	4292;"	d	file:
SQLITE_DETERMINISTIC	server/sqlite3.h	4168;"	d
SQLITE_DONE	server/sqlite3.c	553;"	d	file:
SQLITE_DONE	server/sqlite3.h	429;"	d
SQLITE_DROP_INDEX	server/sqlite3.c	2689;"	d	file:
SQLITE_DROP_INDEX	server/sqlite3.h	2565;"	d
SQLITE_DROP_TABLE	server/sqlite3.c	2690;"	d	file:
SQLITE_DROP_TABLE	server/sqlite3.h	2566;"	d
SQLITE_DROP_TEMP_INDEX	server/sqlite3.c	2691;"	d	file:
SQLITE_DROP_TEMP_INDEX	server/sqlite3.h	2567;"	d
SQLITE_DROP_TEMP_TABLE	server/sqlite3.c	2692;"	d	file:
SQLITE_DROP_TEMP_TABLE	server/sqlite3.h	2568;"	d
SQLITE_DROP_TEMP_TRIGGER	server/sqlite3.c	2693;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	server/sqlite3.h	2569;"	d
SQLITE_DROP_TEMP_VIEW	server/sqlite3.c	2694;"	d	file:
SQLITE_DROP_TEMP_VIEW	server/sqlite3.h	2570;"	d
SQLITE_DROP_TRIGGER	server/sqlite3.c	2695;"	d	file:
SQLITE_DROP_TRIGGER	server/sqlite3.h	2571;"	d
SQLITE_DROP_VIEW	server/sqlite3.c	2696;"	d	file:
SQLITE_DROP_VIEW	server/sqlite3.h	2572;"	d
SQLITE_DROP_VTABLE	server/sqlite3.c	2709;"	d	file:
SQLITE_DROP_VTABLE	server/sqlite3.h	2585;"	d
SQLITE_DYNAMIC	server/sqlite3.c	8824;"	d	file:
SQLITE_DeferFKs	server/sqlite3.c	10715;"	d	file:
SQLITE_DistinctOpt	server/sqlite3.c	10730;"	d	file:
SQLITE_EBCDIC	server/sqlite3.c	8529;"	d	file:
SQLITE_ECEL_DUP	server/sqlite3.c	12782;"	d	file:
SQLITE_ECEL_FACTOR	server/sqlite3.c	12783;"	d	file:
SQLITE_EMPTY	server/sqlite3.c	539;"	d	file:
SQLITE_EMPTY	server/sqlite3.h	415;"	d
SQLITE_ENABLE_EXPLAIN_COMMENTS	server/sqlite3.c	8067;"	d	file:
SQLITE_ENABLE_FTS3	server/sqlite3.c	12482;"	d	file:
SQLITE_ENABLE_FTS3	server/sqlite3.c	129012;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	server/sqlite3.c	100733;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	server/sqlite3.c	100735;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	server/sqlite3.c	24593;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	server/sqlite3.c	24595;"	d	file:
SQLITE_ENABLE_STAT3	server/sqlite3.c	8753;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	server/sqlite3.c	8754;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	server/sqlite3.c	8756;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	server/sqlite3.c	8758;"	d	file:
SQLITE_ERROR	server/sqlite3.c	524;"	d	file:
SQLITE_ERROR	server/sqlite3.h	400;"	d
SQLITE_EXPERIMENTAL	server/sqlite3.c	195;"	d	file:
SQLITE_EXPERIMENTAL	server/sqlite3.h	71;"	d
SQLITE_EXTENSION_INIT1	server/sqlite3.c	99947;"	d	file:
SQLITE_EXTENSION_INIT1	server/sqlite3.c	99954;"	d	file:
SQLITE_EXTENSION_INIT2	server/sqlite3.c	99948;"	d	file:
SQLITE_EXTENSION_INIT2	server/sqlite3.c	99955;"	d	file:
SQLITE_EXTENSION_INIT3	server/sqlite3.c	99949;"	d	file:
SQLITE_EXTENSION_INIT3	server/sqlite3.c	99956;"	d	file:
SQLITE_EXTERN	server/sqlite3.c	173;"	d	file:
SQLITE_EXTERN	server/sqlite3.h	49;"	d
SQLITE_EnableTrigger	server/sqlite3.c	10714;"	d	file:
SQLITE_FAIL	server/sqlite3.c	7536;"	d	file:
SQLITE_FAIL	server/sqlite3.h	7412;"	d
SQLITE_FAULTINJECTOR_COUNT	server/sqlite3.c	13197;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	server/sqlite3.c	13196;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	server/sqlite3.c	1089;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	server/sqlite3.h	965;"	d
SQLITE_FCNTL_CHUNK_SIZE	server/sqlite3.c	1080;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	server/sqlite3.h	956;"	d
SQLITE_FCNTL_COMMIT_PHASETWO	server/sqlite3.c	1095;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	server/sqlite3.h	971;"	d
SQLITE_FCNTL_DB_UNCHANGED	server/sqlite3.c	10291;"	d	file:
SQLITE_FCNTL_FILE_POINTER	server/sqlite3.c	1081;"	d	file:
SQLITE_FCNTL_FILE_POINTER	server/sqlite3.h	957;"	d
SQLITE_FCNTL_HAS_MOVED	server/sqlite3.c	1093;"	d	file:
SQLITE_FCNTL_HAS_MOVED	server/sqlite3.h	969;"	d
SQLITE_FCNTL_LOCKSTATE	server/sqlite3.c	1075;"	d	file:
SQLITE_FCNTL_LOCKSTATE	server/sqlite3.h	951;"	d
SQLITE_FCNTL_MMAP_SIZE	server/sqlite3.c	1091;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	server/sqlite3.h	967;"	d
SQLITE_FCNTL_OVERWRITE	server/sqlite3.c	1085;"	d	file:
SQLITE_FCNTL_OVERWRITE	server/sqlite3.h	961;"	d
SQLITE_FCNTL_PERSIST_WAL	server/sqlite3.c	1084;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	server/sqlite3.h	960;"	d
SQLITE_FCNTL_POWERSAFE_OVERWRITE	server/sqlite3.c	1087;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	server/sqlite3.h	963;"	d
SQLITE_FCNTL_PRAGMA	server/sqlite3.c	1088;"	d	file:
SQLITE_FCNTL_PRAGMA	server/sqlite3.h	964;"	d
SQLITE_FCNTL_SIZE_HINT	server/sqlite3.c	1079;"	d	file:
SQLITE_FCNTL_SIZE_HINT	server/sqlite3.h	955;"	d
SQLITE_FCNTL_SYNC	server/sqlite3.c	1094;"	d	file:
SQLITE_FCNTL_SYNC	server/sqlite3.h	970;"	d
SQLITE_FCNTL_SYNC_OMITTED	server/sqlite3.c	1082;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	server/sqlite3.h	958;"	d
SQLITE_FCNTL_TEMPFILENAME	server/sqlite3.c	1090;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	server/sqlite3.h	966;"	d
SQLITE_FCNTL_TRACE	server/sqlite3.c	1092;"	d	file:
SQLITE_FCNTL_TRACE	server/sqlite3.h	968;"	d
SQLITE_FCNTL_VFSNAME	server/sqlite3.c	1086;"	d	file:
SQLITE_FCNTL_VFSNAME	server/sqlite3.h	962;"	d
SQLITE_FCNTL_WIN32_AV_RETRY	server/sqlite3.c	1083;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	server/sqlite3.h	959;"	d
SQLITE_FCNTL_WIN32_SET_HANDLE	server/sqlite3.c	1096;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	server/sqlite3.h	972;"	d
SQLITE_FILE_HEADER	server/sqlite3.c	51391;"	d	file:
SQLITE_FLOAT	server/sqlite3.c	3906;"	d	file:
SQLITE_FLOAT	server/sqlite3.h	3782;"	d
SQLITE_FORMAT	server/sqlite3.c	547;"	d	file:
SQLITE_FORMAT	server/sqlite3.h	423;"	d
SQLITE_FREE	server/sqlite3.c	16495;"	d	file:
SQLITE_FREE	server/sqlite3.c	16507;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	server/sqlite3.c	24647;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	server/sqlite3.c	136000;"	d	file:
SQLITE_FTS3_MAX_EXPR_DEPTH	server/sqlite3.c	129313;"	d	file:
SQLITE_FULL	server/sqlite3.c	536;"	d	file:
SQLITE_FULL	server/sqlite3.h	412;"	d
SQLITE_FUNCTION	server/sqlite3.c	2710;"	d	file:
SQLITE_FUNCTION	server/sqlite3.h	2586;"	d
SQLITE_FUNC_CASE	server/sqlite3.c	10814;"	d	file:
SQLITE_FUNC_COALESCE	server/sqlite3.c	10820;"	d	file:
SQLITE_FUNC_CONSTANT	server/sqlite3.c	10822;"	d	file:
SQLITE_FUNC_COUNT	server/sqlite3.c	10819;"	d	file:
SQLITE_FUNC_ENCMASK	server/sqlite3.c	10812;"	d	file:
SQLITE_FUNC_EPHEM	server/sqlite3.c	10815;"	d	file:
SQLITE_FUNC_LENGTH	server/sqlite3.c	10817;"	d	file:
SQLITE_FUNC_LIKE	server/sqlite3.c	10813;"	d	file:
SQLITE_FUNC_MINMAX	server/sqlite3.c	10823;"	d	file:
SQLITE_FUNC_NEEDCOLL	server/sqlite3.c	10816;"	d	file:
SQLITE_FUNC_TYPEOF	server/sqlite3.c	10818;"	d	file:
SQLITE_FUNC_UNLIKELY	server/sqlite3.c	10821;"	d	file:
SQLITE_FactorOutConst	server/sqlite3.c	10728;"	d	file:
SQLITE_ForeignKeys	server/sqlite3.c	10710;"	d	file:
SQLITE_FullColNames	server/sqlite3.c	10693;"	d	file:
SQLITE_FullFSync	server/sqlite3.c	10690;"	d	file:
SQLITE_GET_LOCKPROXYFILE	server/sqlite3.c	1076;"	d	file:
SQLITE_GET_LOCKPROXYFILE	server/sqlite3.h	952;"	d
SQLITE_GroupByOrder	server/sqlite3.c	10727;"	d	file:
SQLITE_HAVE_ISNAN	server/sqlite3.c	8444;"	d	file:
SQLITE_IDXTYPE_APPDEF	server/sqlite3.c	11329;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	server/sqlite3.c	11331;"	d	file:
SQLITE_IDXTYPE_UNIQUE	server/sqlite3.c	11330;"	d	file:
SQLITE_IGNORE	server/sqlite3.c	2658;"	d	file:
SQLITE_IGNORE	server/sqlite3.h	2534;"	d
SQLITE_INDEX_CONSTRAINT_EQ	server/sqlite3.c	5614;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	server/sqlite3.h	5490;"	d
SQLITE_INDEX_CONSTRAINT_GE	server/sqlite3.c	5618;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	server/sqlite3.h	5494;"	d
SQLITE_INDEX_CONSTRAINT_GT	server/sqlite3.c	5615;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	server/sqlite3.h	5491;"	d
SQLITE_INDEX_CONSTRAINT_LE	server/sqlite3.c	5616;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	server/sqlite3.h	5492;"	d
SQLITE_INDEX_CONSTRAINT_LT	server/sqlite3.c	5617;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	server/sqlite3.h	5493;"	d
SQLITE_INDEX_CONSTRAINT_MATCH	server/sqlite3.c	5619;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	server/sqlite3.h	5495;"	d
SQLITE_INSERT	server/sqlite3.c	2697;"	d	file:
SQLITE_INSERT	server/sqlite3.h	2573;"	d
SQLITE_INTEGER	server/sqlite3.c	3905;"	d	file:
SQLITE_INTEGER	server/sqlite3.h	3781;"	d
SQLITE_INTEGRITY_CHECK_ERROR_MAX	server/sqlite3.c	102506;"	d	file:
SQLITE_INTERNAL	server/sqlite3.c	525;"	d	file:
SQLITE_INTERNAL	server/sqlite3.h	401;"	d
SQLITE_INTERRUPT	server/sqlite3.c	532;"	d	file:
SQLITE_INTERRUPT	server/sqlite3.h	408;"	d
SQLITE_INT_TO_PTR	server/sqlite3.c	7932;"	d	file:
SQLITE_INT_TO_PTR	server/sqlite3.c	7935;"	d	file:
SQLITE_INT_TO_PTR	server/sqlite3.c	7938;"	d	file:
SQLITE_INT_TO_PTR	server/sqlite3.c	7941;"	d	file:
SQLITE_IOCAP_ATOMIC	server/sqlite3.c	684;"	d	file:
SQLITE_IOCAP_ATOMIC	server/sqlite3.h	560;"	d
SQLITE_IOCAP_ATOMIC16K	server/sqlite3.c	690;"	d	file:
SQLITE_IOCAP_ATOMIC16K	server/sqlite3.h	566;"	d
SQLITE_IOCAP_ATOMIC1K	server/sqlite3.c	686;"	d	file:
SQLITE_IOCAP_ATOMIC1K	server/sqlite3.h	562;"	d
SQLITE_IOCAP_ATOMIC2K	server/sqlite3.c	687;"	d	file:
SQLITE_IOCAP_ATOMIC2K	server/sqlite3.h	563;"	d
SQLITE_IOCAP_ATOMIC32K	server/sqlite3.c	691;"	d	file:
SQLITE_IOCAP_ATOMIC32K	server/sqlite3.h	567;"	d
SQLITE_IOCAP_ATOMIC4K	server/sqlite3.c	688;"	d	file:
SQLITE_IOCAP_ATOMIC4K	server/sqlite3.h	564;"	d
SQLITE_IOCAP_ATOMIC512	server/sqlite3.c	685;"	d	file:
SQLITE_IOCAP_ATOMIC512	server/sqlite3.h	561;"	d
SQLITE_IOCAP_ATOMIC64K	server/sqlite3.c	692;"	d	file:
SQLITE_IOCAP_ATOMIC64K	server/sqlite3.h	568;"	d
SQLITE_IOCAP_ATOMIC8K	server/sqlite3.c	689;"	d	file:
SQLITE_IOCAP_ATOMIC8K	server/sqlite3.h	565;"	d
SQLITE_IOCAP_IMMUTABLE	server/sqlite3.c	697;"	d	file:
SQLITE_IOCAP_IMMUTABLE	server/sqlite3.h	573;"	d
SQLITE_IOCAP_POWERSAFE_OVERWRITE	server/sqlite3.c	696;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	server/sqlite3.h	572;"	d
SQLITE_IOCAP_SAFE_APPEND	server/sqlite3.c	693;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	server/sqlite3.h	569;"	d
SQLITE_IOCAP_SEQUENTIAL	server/sqlite3.c	694;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	server/sqlite3.h	570;"	d
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	server/sqlite3.c	695;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	server/sqlite3.h	571;"	d
SQLITE_IOERR	server/sqlite3.c	533;"	d	file:
SQLITE_IOERR	server/sqlite3.h	409;"	d
SQLITE_IOERR_ACCESS	server/sqlite3.c	584;"	d	file:
SQLITE_IOERR_ACCESS	server/sqlite3.h	460;"	d
SQLITE_IOERR_BLOCKED	server/sqlite3.c	582;"	d	file:
SQLITE_IOERR_BLOCKED	server/sqlite3.h	458;"	d
SQLITE_IOERR_CHECKRESERVEDLOCK	server/sqlite3.c	585;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	server/sqlite3.h	461;"	d
SQLITE_IOERR_CLOSE	server/sqlite3.c	587;"	d	file:
SQLITE_IOERR_CLOSE	server/sqlite3.h	463;"	d
SQLITE_IOERR_CONVPATH	server/sqlite3.c	597;"	d	file:
SQLITE_IOERR_CONVPATH	server/sqlite3.h	473;"	d
SQLITE_IOERR_DELETE	server/sqlite3.c	581;"	d	file:
SQLITE_IOERR_DELETE	server/sqlite3.h	457;"	d
SQLITE_IOERR_DELETE_NOENT	server/sqlite3.c	594;"	d	file:
SQLITE_IOERR_DELETE_NOENT	server/sqlite3.h	470;"	d
SQLITE_IOERR_DIR_CLOSE	server/sqlite3.c	588;"	d	file:
SQLITE_IOERR_DIR_CLOSE	server/sqlite3.h	464;"	d
SQLITE_IOERR_DIR_FSYNC	server/sqlite3.c	576;"	d	file:
SQLITE_IOERR_DIR_FSYNC	server/sqlite3.h	452;"	d
SQLITE_IOERR_FSTAT	server/sqlite3.c	578;"	d	file:
SQLITE_IOERR_FSTAT	server/sqlite3.h	454;"	d
SQLITE_IOERR_FSYNC	server/sqlite3.c	575;"	d	file:
SQLITE_IOERR_FSYNC	server/sqlite3.h	451;"	d
SQLITE_IOERR_GETTEMPPATH	server/sqlite3.c	596;"	d	file:
SQLITE_IOERR_GETTEMPPATH	server/sqlite3.h	472;"	d
SQLITE_IOERR_LOCK	server/sqlite3.c	586;"	d	file:
SQLITE_IOERR_LOCK	server/sqlite3.h	462;"	d
SQLITE_IOERR_MMAP	server/sqlite3.c	595;"	d	file:
SQLITE_IOERR_MMAP	server/sqlite3.h	471;"	d
SQLITE_IOERR_NOMEM	server/sqlite3.c	583;"	d	file:
SQLITE_IOERR_NOMEM	server/sqlite3.h	459;"	d
SQLITE_IOERR_RDLOCK	server/sqlite3.c	580;"	d	file:
SQLITE_IOERR_RDLOCK	server/sqlite3.h	456;"	d
SQLITE_IOERR_READ	server/sqlite3.c	572;"	d	file:
SQLITE_IOERR_READ	server/sqlite3.h	448;"	d
SQLITE_IOERR_SEEK	server/sqlite3.c	593;"	d	file:
SQLITE_IOERR_SEEK	server/sqlite3.h	469;"	d
SQLITE_IOERR_SHMLOCK	server/sqlite3.c	591;"	d	file:
SQLITE_IOERR_SHMLOCK	server/sqlite3.h	467;"	d
SQLITE_IOERR_SHMMAP	server/sqlite3.c	592;"	d	file:
SQLITE_IOERR_SHMMAP	server/sqlite3.h	468;"	d
SQLITE_IOERR_SHMOPEN	server/sqlite3.c	589;"	d	file:
SQLITE_IOERR_SHMOPEN	server/sqlite3.h	465;"	d
SQLITE_IOERR_SHMSIZE	server/sqlite3.c	590;"	d	file:
SQLITE_IOERR_SHMSIZE	server/sqlite3.h	466;"	d
SQLITE_IOERR_SHORT_READ	server/sqlite3.c	573;"	d	file:
SQLITE_IOERR_SHORT_READ	server/sqlite3.h	449;"	d
SQLITE_IOERR_TRUNCATE	server/sqlite3.c	577;"	d	file:
SQLITE_IOERR_TRUNCATE	server/sqlite3.h	453;"	d
SQLITE_IOERR_UNLOCK	server/sqlite3.c	579;"	d	file:
SQLITE_IOERR_UNLOCK	server/sqlite3.h	455;"	d
SQLITE_IOERR_WRITE	server/sqlite3.c	574;"	d	file:
SQLITE_IOERR_WRITE	server/sqlite3.h	450;"	d
SQLITE_IgnoreChecks	server/sqlite3.c	10704;"	d	file:
SQLITE_InternChanges	server/sqlite3.c	10689;"	d	file:
SQLITE_JUMPIFNULL	server/sqlite3.c	10990;"	d	file:
SQLITE_LAST_ERRNO	server/sqlite3.c	1078;"	d	file:
SQLITE_LAST_ERRNO	server/sqlite3.h	954;"	d
SQLITE_LIMIT_ATTACHED	server/sqlite3.c	3240;"	d	file:
SQLITE_LIMIT_ATTACHED	server/sqlite3.h	3116;"	d
SQLITE_LIMIT_COLUMN	server/sqlite3.c	3235;"	d	file:
SQLITE_LIMIT_COLUMN	server/sqlite3.h	3111;"	d
SQLITE_LIMIT_COMPOUND_SELECT	server/sqlite3.c	3237;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	server/sqlite3.h	3113;"	d
SQLITE_LIMIT_EXPR_DEPTH	server/sqlite3.c	3236;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	server/sqlite3.h	3112;"	d
SQLITE_LIMIT_FUNCTION_ARG	server/sqlite3.c	3239;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	server/sqlite3.h	3115;"	d
SQLITE_LIMIT_LENGTH	server/sqlite3.c	3233;"	d	file:
SQLITE_LIMIT_LENGTH	server/sqlite3.h	3109;"	d
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	server/sqlite3.c	3241;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	server/sqlite3.h	3117;"	d
SQLITE_LIMIT_SQL_LENGTH	server/sqlite3.c	3234;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	server/sqlite3.h	3110;"	d
SQLITE_LIMIT_TRIGGER_DEPTH	server/sqlite3.c	3243;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	server/sqlite3.h	3119;"	d
SQLITE_LIMIT_VARIABLE_NUMBER	server/sqlite3.c	3242;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	server/sqlite3.h	3118;"	d
SQLITE_LIMIT_VDBE_OP	server/sqlite3.c	3238;"	d	file:
SQLITE_LIMIT_VDBE_OP	server/sqlite3.h	3114;"	d
SQLITE_LIMIT_WORKER_THREADS	server/sqlite3.c	3244;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	server/sqlite3.h	3120;"	d
SQLITE_LITTLEENDIAN	server/sqlite3.c	8652;"	d	file:
SQLITE_LITTLEENDIAN	server/sqlite3.c	8659;"	d	file:
SQLITE_LITTLEENDIAN	server/sqlite3.c	8665;"	d	file:
SQLITE_LOCKED	server/sqlite3.c	529;"	d	file:
SQLITE_LOCKED	server/sqlite3.h	405;"	d
SQLITE_LOCKED_SHAREDCACHE	server/sqlite3.c	598;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	server/sqlite3.h	474;"	d
SQLITE_LOCKFILEEX_FLAGS	server/sqlite3.c	35307;"	d	file:
SQLITE_LOCKFILE_FLAGS	server/sqlite3.c	35298;"	d	file:
SQLITE_LOCK_EXCLUSIVE	server/sqlite3.c	710;"	d	file:
SQLITE_LOCK_EXCLUSIVE	server/sqlite3.h	586;"	d
SQLITE_LOCK_NONE	server/sqlite3.c	706;"	d	file:
SQLITE_LOCK_NONE	server/sqlite3.h	582;"	d
SQLITE_LOCK_PENDING	server/sqlite3.c	709;"	d	file:
SQLITE_LOCK_PENDING	server/sqlite3.h	585;"	d
SQLITE_LOCK_RESERVED	server/sqlite3.c	708;"	d	file:
SQLITE_LOCK_RESERVED	server/sqlite3.h	584;"	d
SQLITE_LOCK_SHARED	server/sqlite3.c	707;"	d	file:
SQLITE_LOCK_SHARED	server/sqlite3.h	583;"	d
SQLITE_LegacyFileFmt	server/sqlite3.c	10706;"	d	file:
SQLITE_LoadExtension	server/sqlite3.c	10713;"	d	file:
SQLITE_MAGIC_BUSY	server/sqlite3.c	10764;"	d	file:
SQLITE_MAGIC_CLOSED	server/sqlite3.c	10762;"	d	file:
SQLITE_MAGIC_ERROR	server/sqlite3.c	10765;"	d	file:
SQLITE_MAGIC_OPEN	server/sqlite3.c	10761;"	d	file:
SQLITE_MAGIC_SICK	server/sqlite3.c	10763;"	d	file:
SQLITE_MAGIC_ZOMBIE	server/sqlite3.c	10766;"	d	file:
SQLITE_MALLOC	server/sqlite3.c	16494;"	d	file:
SQLITE_MALLOC	server/sqlite3.c	16506;"	d	file:
SQLITE_MALLOCSIZE	server/sqlite3.c	16497;"	d	file:
SQLITE_MALLOCSIZE	server/sqlite3.c	16539;"	d	file:
SQLITE_MALLOCSIZE	server/sqlite3.c	16543;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	server/sqlite3.c	8032;"	d	file:
SQLITE_MAX_ATTACHED	server/sqlite3.c	7808;"	d	file:
SQLITE_MAX_COLUMN	server/sqlite3.c	7728;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	server/sqlite3.c	7765;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	server/sqlite3.c	7855;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	server/sqlite3.c	7858;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	server/sqlite3.c	7859;"	d	file:
SQLITE_MAX_EXPR_DEPTH	server/sqlite3.c	7753;"	d	file:
SQLITE_MAX_FILE_FORMAT	server/sqlite3.c	8467;"	d	file:
SQLITE_MAX_FUNCTION_ARG	server/sqlite3.c	7780;"	d	file:
SQLITE_MAX_LENGTH	server/sqlite3.c	7707;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	server/sqlite3.c	150902;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	server/sqlite3.c	7879;"	d	file:
SQLITE_MAX_MMAP_SIZE	server/sqlite3.c	8707;"	d	file:
SQLITE_MAX_MMAP_SIZE	server/sqlite3.c	8708;"	d	file:
SQLITE_MAX_MMAP_SIZE	server/sqlite3.c	8717;"	d	file:
SQLITE_MAX_MMAP_SIZE	server/sqlite3.c	8718;"	d	file:
SQLITE_MAX_MMAP_SIZE	server/sqlite3.c	8726;"	d	file:
SQLITE_MAX_MMAP_SIZE	server/sqlite3.c	8728;"	d	file:
SQLITE_MAX_MMAP_SIZE_xc	server/sqlite3.c	8730;"	d	file:
SQLITE_MAX_PAGE_COUNT	server/sqlite3.c	7871;"	d	file:
SQLITE_MAX_PAGE_SIZE	server/sqlite3.c	7831;"	d	file:
SQLITE_MAX_PAGE_SIZE	server/sqlite3.c	7833;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	server/sqlite3.c	14039;"	d	file:
SQLITE_MAX_SQL_LENGTH	server/sqlite3.c	7739;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	server/sqlite3.c	7890;"	d	file:
SQLITE_MAX_U32	server/sqlite3.c	8593;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	server/sqlite3.c	7816;"	d	file:
SQLITE_MAX_VDBE_OP	server/sqlite3.c	7773;"	d	file:
SQLITE_MAX_WORKER_THREADS	server/sqlite3.c	8495;"	d	file:
SQLITE_MAX_WORKER_THREADS	server/sqlite3.c	8496;"	d	file:
SQLITE_MAX_WORKER_THREADS	server/sqlite3.c	8499;"	d	file:
SQLITE_MAX_WORKER_THREADS	server/sqlite3.c	8505;"	d	file:
SQLITE_MAX_WORKER_THREADS	server/sqlite3.c	8506;"	d	file:
SQLITE_MINIMUM_FILE_DESCRIPTOR	server/sqlite3.c	25288;"	d	file:
SQLITE_MISMATCH	server/sqlite3.c	543;"	d	file:
SQLITE_MISMATCH	server/sqlite3.h	419;"	d
SQLITE_MISUSE	server/sqlite3.c	544;"	d	file:
SQLITE_MISUSE	server/sqlite3.h	420;"	d
SQLITE_MISUSE_BKPT	server/sqlite3.c	12472;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	server/sqlite3.c	8443;"	d	file:
SQLITE_MUTEX_FAST	server/sqlite3.c	6233;"	d	file:
SQLITE_MUTEX_FAST	server/sqlite3.h	6109;"	d
SQLITE_MUTEX_NOOP	server/sqlite3.c	10380;"	d	file:
SQLITE_MUTEX_NREF	server/sqlite3.c	18922;"	d	file:
SQLITE_MUTEX_NREF	server/sqlite3.c	18924;"	d	file:
SQLITE_MUTEX_OMIT	server/sqlite3.c	10372;"	d	file:
SQLITE_MUTEX_PTHREADS	server/sqlite3.c	10376;"	d	file:
SQLITE_MUTEX_RECURSIVE	server/sqlite3.c	6234;"	d	file:
SQLITE_MUTEX_RECURSIVE	server/sqlite3.h	6110;"	d
SQLITE_MUTEX_STATIC_APP1	server/sqlite3.c	6243;"	d	file:
SQLITE_MUTEX_STATIC_APP1	server/sqlite3.h	6119;"	d
SQLITE_MUTEX_STATIC_APP2	server/sqlite3.c	6244;"	d	file:
SQLITE_MUTEX_STATIC_APP2	server/sqlite3.h	6120;"	d
SQLITE_MUTEX_STATIC_APP3	server/sqlite3.c	6245;"	d	file:
SQLITE_MUTEX_STATIC_APP3	server/sqlite3.h	6121;"	d
SQLITE_MUTEX_STATIC_LRU	server/sqlite3.c	6240;"	d	file:
SQLITE_MUTEX_STATIC_LRU	server/sqlite3.h	6116;"	d
SQLITE_MUTEX_STATIC_LRU2	server/sqlite3.c	6241;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	server/sqlite3.h	6117;"	d
SQLITE_MUTEX_STATIC_MASTER	server/sqlite3.c	6235;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	server/sqlite3.h	6111;"	d
SQLITE_MUTEX_STATIC_MEM	server/sqlite3.c	6236;"	d	file:
SQLITE_MUTEX_STATIC_MEM	server/sqlite3.h	6112;"	d
SQLITE_MUTEX_STATIC_MEM2	server/sqlite3.c	6237;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	server/sqlite3.h	6113;"	d
SQLITE_MUTEX_STATIC_OPEN	server/sqlite3.c	6238;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	server/sqlite3.h	6114;"	d
SQLITE_MUTEX_STATIC_PMEM	server/sqlite3.c	6242;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	server/sqlite3.h	6118;"	d
SQLITE_MUTEX_STATIC_PRNG	server/sqlite3.c	6239;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	server/sqlite3.h	6115;"	d
SQLITE_MUTEX_W32	server/sqlite3.c	10378;"	d	file:
SQLITE_NOINLINE	server/sqlite3.c	7950;"	d	file:
SQLITE_NOINLINE	server/sqlite3.c	7952;"	d	file:
SQLITE_NOINLINE	server/sqlite3.c	7954;"	d	file:
SQLITE_NOLFS	server/sqlite3.c	545;"	d	file:
SQLITE_NOLFS	server/sqlite3.h	421;"	d
SQLITE_NOMEM	server/sqlite3.c	530;"	d	file:
SQLITE_NOMEM	server/sqlite3.h	406;"	d
SQLITE_NOTADB	server/sqlite3.c	549;"	d	file:
SQLITE_NOTADB	server/sqlite3.h	425;"	d
SQLITE_NOTFOUND	server/sqlite3.c	535;"	d	file:
SQLITE_NOTFOUND	server/sqlite3.h	411;"	d
SQLITE_NOTICE	server/sqlite3.c	550;"	d	file:
SQLITE_NOTICE	server/sqlite3.h	426;"	d
SQLITE_NOTICE_RECOVER_ROLLBACK	server/sqlite3.c	622;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	server/sqlite3.h	498;"	d
SQLITE_NOTICE_RECOVER_WAL	server/sqlite3.c	621;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	server/sqlite3.h	497;"	d
SQLITE_NOTNULL	server/sqlite3.c	10993;"	d	file:
SQLITE_NULL	server/sqlite3.c	3908;"	d	file:
SQLITE_NULL	server/sqlite3.h	3784;"	d
SQLITE_NULLEQ	server/sqlite3.c	10992;"	d	file:
SQLITE_N_BTREE_META	server/sqlite3.c	8948;"	d	file:
SQLITE_N_COLCACHE	server/sqlite3.c	11990;"	d	file:
SQLITE_N_KEYWORD	server/sqlite3.c	124047;"	d	file:
SQLITE_N_LIMIT	server/sqlite3.c	10479;"	d	file:
SQLITE_NullCallback	server/sqlite3.c	10698;"	d	file:
SQLITE_OK	server/sqlite3.c	522;"	d	file:
SQLITE_OK	server/sqlite3.h	398;"	d
SQLITE_OMIT_DATETIME_FUNCS	server/sqlite3.c	8441;"	d	file:
SQLITE_OMIT_TRACE	server/sqlite3.c	8442;"	d	file:
SQLITE_OPEN_AUTOPROXY	server/sqlite3.c	638;"	d	file:
SQLITE_OPEN_AUTOPROXY	server/sqlite3.h	514;"	d
SQLITE_OPEN_CREATE	server/sqlite3.c	635;"	d	file:
SQLITE_OPEN_CREATE	server/sqlite3.h	511;"	d
SQLITE_OPEN_DELETEONCLOSE	server/sqlite3.c	636;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	server/sqlite3.h	512;"	d
SQLITE_OPEN_EXCLUSIVE	server/sqlite3.c	637;"	d	file:
SQLITE_OPEN_EXCLUSIVE	server/sqlite3.h	513;"	d
SQLITE_OPEN_FULLMUTEX	server/sqlite3.c	649;"	d	file:
SQLITE_OPEN_FULLMUTEX	server/sqlite3.h	525;"	d
SQLITE_OPEN_MAIN_DB	server/sqlite3.c	641;"	d	file:
SQLITE_OPEN_MAIN_DB	server/sqlite3.h	517;"	d
SQLITE_OPEN_MAIN_JOURNAL	server/sqlite3.c	644;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	server/sqlite3.h	520;"	d
SQLITE_OPEN_MASTER_JOURNAL	server/sqlite3.c	647;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	server/sqlite3.h	523;"	d
SQLITE_OPEN_MEMORY	server/sqlite3.c	640;"	d	file:
SQLITE_OPEN_MEMORY	server/sqlite3.h	516;"	d
SQLITE_OPEN_NOMUTEX	server/sqlite3.c	648;"	d	file:
SQLITE_OPEN_NOMUTEX	server/sqlite3.h	524;"	d
SQLITE_OPEN_PRIVATECACHE	server/sqlite3.c	651;"	d	file:
SQLITE_OPEN_PRIVATECACHE	server/sqlite3.h	527;"	d
SQLITE_OPEN_READONLY	server/sqlite3.c	633;"	d	file:
SQLITE_OPEN_READONLY	server/sqlite3.h	509;"	d
SQLITE_OPEN_READWRITE	server/sqlite3.c	634;"	d	file:
SQLITE_OPEN_READWRITE	server/sqlite3.h	510;"	d
SQLITE_OPEN_SHAREDCACHE	server/sqlite3.c	650;"	d	file:
SQLITE_OPEN_SHAREDCACHE	server/sqlite3.h	526;"	d
SQLITE_OPEN_SUBJOURNAL	server/sqlite3.c	646;"	d	file:
SQLITE_OPEN_SUBJOURNAL	server/sqlite3.h	522;"	d
SQLITE_OPEN_TEMP_DB	server/sqlite3.c	642;"	d	file:
SQLITE_OPEN_TEMP_DB	server/sqlite3.h	518;"	d
SQLITE_OPEN_TEMP_JOURNAL	server/sqlite3.c	645;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	server/sqlite3.h	521;"	d
SQLITE_OPEN_TRANSIENT_DB	server/sqlite3.c	643;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	server/sqlite3.h	519;"	d
SQLITE_OPEN_URI	server/sqlite3.c	639;"	d	file:
SQLITE_OPEN_URI	server/sqlite3.h	515;"	d
SQLITE_OPEN_WAL	server/sqlite3.c	652;"	d	file:
SQLITE_OPEN_WAL	server/sqlite3.h	528;"	d
SQLITE_OS_OTHER	server/sqlite3.c	10118;"	d	file:
SQLITE_OS_OTHER	server/sqlite3.c	10122;"	d	file:
SQLITE_OS_UNIX	server/sqlite3.c	10113;"	d	file:
SQLITE_OS_UNIX	server/sqlite3.c	10114;"	d	file:
SQLITE_OS_UNIX	server/sqlite3.c	10127;"	d	file:
SQLITE_OS_UNIX	server/sqlite3.c	10130;"	d	file:
SQLITE_OS_UNIX	server/sqlite3.c	10133;"	d	file:
SQLITE_OS_WIN	server/sqlite3.c	10115;"	d	file:
SQLITE_OS_WIN	server/sqlite3.c	10116;"	d	file:
SQLITE_OS_WIN	server/sqlite3.c	10126;"	d	file:
SQLITE_OS_WIN	server/sqlite3.c	10129;"	d	file:
SQLITE_OS_WIN	server/sqlite3.c	10137;"	d	file:
SQLITE_OS_WINCE	server/sqlite3.c	19536;"	d	file:
SQLITE_OS_WINCE	server/sqlite3.c	19538;"	d	file:
SQLITE_OS_WINNT	server/sqlite3.c	19528;"	d	file:
SQLITE_OS_WINRT	server/sqlite3.c	19546;"	d	file:
SQLITE_OmitNoopJoin	server/sqlite3.c	10735;"	d	file:
SQLITE_OrderByIdxJoin	server/sqlite3.c	10732;"	d	file:
SQLITE_PERM	server/sqlite3.c	526;"	d	file:
SQLITE_PERM	server/sqlite3.h	402;"	d
SQLITE_POWERSAFE_OVERWRITE	server/sqlite3.c	7981;"	d	file:
SQLITE_PRAGMA	server/sqlite3.c	2698;"	d	file:
SQLITE_PRAGMA	server/sqlite3.h	2574;"	d
SQLITE_PRINTF_INTERNAL	server/sqlite3.c	12601;"	d	file:
SQLITE_PRINTF_SQLFUNC	server/sqlite3.c	12602;"	d	file:
SQLITE_PRINT_BUF_SIZE	server/sqlite3.c	20908;"	d	file:
SQLITE_PRIVATE	server/sqlite3.c	23;"	d	file:
SQLITE_PROTOCOL	server/sqlite3.c	538;"	d	file:
SQLITE_PROTOCOL	server/sqlite3.h	414;"	d
SQLITE_PTR_TO_INT	server/sqlite3.c	7933;"	d	file:
SQLITE_PTR_TO_INT	server/sqlite3.c	7936;"	d	file:
SQLITE_PTR_TO_INT	server/sqlite3.c	7939;"	d	file:
SQLITE_PTR_TO_INT	server/sqlite3.c	7942;"	d	file:
SQLITE_PreferBuiltin	server/sqlite3.c	10712;"	d	file:
SQLITE_QueryFlattener	server/sqlite3.c	10725;"	d	file:
SQLITE_QueryOnly	server/sqlite3.c	10716;"	d	file:
SQLITE_RANGE	server/sqlite3.c	548;"	d	file:
SQLITE_RANGE	server/sqlite3.h	424;"	d
SQLITE_READ	server/sqlite3.c	2699;"	d	file:
SQLITE_READ	server/sqlite3.h	2575;"	d
SQLITE_READONLY	server/sqlite3.c	531;"	d	file:
SQLITE_READONLY	server/sqlite3.h	407;"	d
SQLITE_READONLY_CANTLOCK	server/sqlite3.c	607;"	d	file:
SQLITE_READONLY_CANTLOCK	server/sqlite3.h	483;"	d
SQLITE_READONLY_DBMOVED	server/sqlite3.c	609;"	d	file:
SQLITE_READONLY_DBMOVED	server/sqlite3.h	485;"	d
SQLITE_READONLY_RECOVERY	server/sqlite3.c	606;"	d	file:
SQLITE_READONLY_RECOVERY	server/sqlite3.h	482;"	d
SQLITE_READONLY_ROLLBACK	server/sqlite3.c	608;"	d	file:
SQLITE_READONLY_ROLLBACK	server/sqlite3.h	484;"	d
SQLITE_REALLOC	server/sqlite3.c	16496;"	d	file:
SQLITE_REALLOC	server/sqlite3.c	16508;"	d	file:
SQLITE_RECURSIVE	server/sqlite3.c	2713;"	d	file:
SQLITE_RECURSIVE	server/sqlite3.h	2589;"	d
SQLITE_REINDEX	server/sqlite3.c	2706;"	d	file:
SQLITE_REINDEX	server/sqlite3.h	2582;"	d
SQLITE_REPLACE	server/sqlite3.c	7538;"	d	file:
SQLITE_REPLACE	server/sqlite3.h	7414;"	d
SQLITE_ROLLBACK	server/sqlite3.c	7534;"	d	file:
SQLITE_ROLLBACK	server/sqlite3.h	7410;"	d
SQLITE_ROW	server/sqlite3.c	552;"	d	file:
SQLITE_ROW	server/sqlite3.h	428;"	d
SQLITE_ReadUncommitted	server/sqlite3.c	10705;"	d	file:
SQLITE_RecTriggers	server/sqlite3.c	10709;"	d	file:
SQLITE_RecoveryMode	server/sqlite3.c	10707;"	d	file:
SQLITE_ReverseOrder	server/sqlite3.c	10708;"	d	file:
SQLITE_SAVEPOINT	server/sqlite3.c	2711;"	d	file:
SQLITE_SAVEPOINT	server/sqlite3.h	2587;"	d
SQLITE_SCHEMA	server/sqlite3.c	540;"	d	file:
SQLITE_SCHEMA	server/sqlite3.h	416;"	d
SQLITE_SELECT	server/sqlite3.c	2700;"	d	file:
SQLITE_SELECT	server/sqlite3.h	2576;"	d
SQLITE_SET_LOCKPROXYFILE	server/sqlite3.c	1077;"	d	file:
SQLITE_SET_LOCKPROXYFILE	server/sqlite3.h	953;"	d
SQLITE_SHM_EXCLUSIVE	server/sqlite3.c	1357;"	d	file:
SQLITE_SHM_EXCLUSIVE	server/sqlite3.h	1233;"	d
SQLITE_SHM_LOCK	server/sqlite3.c	1355;"	d	file:
SQLITE_SHM_LOCK	server/sqlite3.h	1231;"	d
SQLITE_SHM_NLOCK	server/sqlite3.c	1367;"	d	file:
SQLITE_SHM_NLOCK	server/sqlite3.h	1243;"	d
SQLITE_SHM_SHARED	server/sqlite3.c	1356;"	d	file:
SQLITE_SHM_SHARED	server/sqlite3.h	1232;"	d
SQLITE_SHM_UNLOCK	server/sqlite3.c	1354;"	d	file:
SQLITE_SHM_UNLOCK	server/sqlite3.h	1230;"	d
SQLITE_SKIP_UTF8	server/sqlite3.c	12455;"	d	file:
SQLITE_SOURCE_ID	server/sqlite3.c	236;"	d	file:
SQLITE_SOURCE_ID	server/sqlite3.h	112;"	d
SQLITE_SO_ASC	server/sqlite3.c	10950;"	d	file:
SQLITE_SO_DESC	server/sqlite3.c	10951;"	d	file:
SQLITE_STAT4_SAMPLES	server/sqlite3.c	85939;"	d	file:
SQLITE_STAT4_SAMPLES	server/sqlite3.c	85940;"	d	file:
SQLITE_STAT4_SAMPLES	server/sqlite3.c	86042;"	d	file:
SQLITE_STATIC	server/sqlite3.c	4510;"	d	file:
SQLITE_STATIC	server/sqlite3.h	4386;"	d
SQLITE_STATUS_MALLOC_COUNT	server/sqlite3.c	6468;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	server/sqlite3.h	6344;"	d
SQLITE_STATUS_MALLOC_SIZE	server/sqlite3.c	6464;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	server/sqlite3.h	6340;"	d
SQLITE_STATUS_MEMORY_USED	server/sqlite3.c	6459;"	d	file:
SQLITE_STATUS_MEMORY_USED	server/sqlite3.h	6335;"	d
SQLITE_STATUS_PAGECACHE_OVERFLOW	server/sqlite3.c	6461;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	server/sqlite3.h	6337;"	d
SQLITE_STATUS_PAGECACHE_SIZE	server/sqlite3.c	6466;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	server/sqlite3.h	6342;"	d
SQLITE_STATUS_PAGECACHE_USED	server/sqlite3.c	6460;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	server/sqlite3.h	6336;"	d
SQLITE_STATUS_PARSER_STACK	server/sqlite3.c	6465;"	d	file:
SQLITE_STATUS_PARSER_STACK	server/sqlite3.h	6341;"	d
SQLITE_STATUS_SCRATCH_OVERFLOW	server/sqlite3.c	6463;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	server/sqlite3.h	6339;"	d
SQLITE_STATUS_SCRATCH_SIZE	server/sqlite3.c	6467;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	server/sqlite3.h	6343;"	d
SQLITE_STATUS_SCRATCH_USED	server/sqlite3.c	6462;"	d	file:
SQLITE_STATUS_SCRATCH_USED	server/sqlite3.h	6338;"	d
SQLITE_STMTSTATUS_AUTOINDEX	server/sqlite3.c	6662;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	server/sqlite3.h	6538;"	d
SQLITE_STMTSTATUS_FULLSCAN_STEP	server/sqlite3.c	6660;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	server/sqlite3.h	6536;"	d
SQLITE_STMTSTATUS_SORT	server/sqlite3.c	6661;"	d	file:
SQLITE_STMTSTATUS_SORT	server/sqlite3.h	6537;"	d
SQLITE_STMTSTATUS_VM_STEP	server/sqlite3.c	6663;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	server/sqlite3.h	6539;"	d
SQLITE_STOREP2	server/sqlite3.c	10991;"	d	file:
SQLITE_SYNC_DATAONLY	server/sqlite3.c	740;"	d	file:
SQLITE_SYNC_DATAONLY	server/sqlite3.h	616;"	d
SQLITE_SYNC_FULL	server/sqlite3.c	739;"	d	file:
SQLITE_SYNC_FULL	server/sqlite3.h	615;"	d
SQLITE_SYNC_MASK	server/sqlite3.c	40697;"	d	file:
SQLITE_SYNC_NORMAL	server/sqlite3.c	738;"	d	file:
SQLITE_SYNC_NORMAL	server/sqlite3.h	614;"	d
SQLITE_SYSTEM_MALLOC	server/sqlite3.c	8024;"	d	file:
SQLITE_ShortColNames	server/sqlite3.c	10694;"	d	file:
SQLITE_SqlTrace	server/sqlite3.c	10700;"	d	file:
SQLITE_Stat3	server/sqlite3.c	10736;"	d	file:
SQLITE_SubqCoroutine	server/sqlite3.c	10733;"	d	file:
SQLITE_TEMP_FILE_PREFIX	server/sqlite3.c	10182;"	d	file:
SQLITE_TEMP_STORE	server/sqlite3.c	8485;"	d	file:
SQLITE_TEMP_STORE_xc	server/sqlite3.c	8486;"	d	file:
SQLITE_TESTCTRL_ALWAYS	server/sqlite3.c	6331;"	d	file:
SQLITE_TESTCTRL_ALWAYS	server/sqlite3.h	6207;"	d
SQLITE_TESTCTRL_ASSERT	server/sqlite3.c	6330;"	d	file:
SQLITE_TESTCTRL_ASSERT	server/sqlite3.h	6206;"	d
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	server/sqlite3.c	6328;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	server/sqlite3.h	6204;"	d
SQLITE_TESTCTRL_BITVEC_TEST	server/sqlite3.c	6326;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	server/sqlite3.h	6202;"	d
SQLITE_TESTCTRL_BYTEORDER	server/sqlite3.c	6340;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	server/sqlite3.h	6216;"	d
SQLITE_TESTCTRL_EXPLAIN_STMT	server/sqlite3.c	6337;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	server/sqlite3.h	6213;"	d
SQLITE_TESTCTRL_FAULT_INSTALL	server/sqlite3.c	6327;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	server/sqlite3.h	6203;"	d
SQLITE_TESTCTRL_FIRST	server/sqlite3.c	6322;"	d	file:
SQLITE_TESTCTRL_FIRST	server/sqlite3.h	6198;"	d
SQLITE_TESTCTRL_ISINIT	server/sqlite3.c	6341;"	d	file:
SQLITE_TESTCTRL_ISINIT	server/sqlite3.h	6217;"	d
SQLITE_TESTCTRL_ISKEYWORD	server/sqlite3.c	6334;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	server/sqlite3.h	6210;"	d
SQLITE_TESTCTRL_LAST	server/sqlite3.c	6343;"	d	file:
SQLITE_TESTCTRL_LAST	server/sqlite3.h	6219;"	d
SQLITE_TESTCTRL_LOCALTIME_FAULT	server/sqlite3.c	6336;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	server/sqlite3.h	6212;"	d
SQLITE_TESTCTRL_NEVER_CORRUPT	server/sqlite3.c	6338;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	server/sqlite3.h	6214;"	d
SQLITE_TESTCTRL_OPTIMIZATIONS	server/sqlite3.c	6333;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	server/sqlite3.h	6209;"	d
SQLITE_TESTCTRL_PENDING_BYTE	server/sqlite3.c	6329;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	server/sqlite3.h	6205;"	d
SQLITE_TESTCTRL_PRNG_RESET	server/sqlite3.c	6325;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	server/sqlite3.h	6201;"	d
SQLITE_TESTCTRL_PRNG_RESTORE	server/sqlite3.c	6324;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	server/sqlite3.h	6200;"	d
SQLITE_TESTCTRL_PRNG_SAVE	server/sqlite3.c	6323;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	server/sqlite3.h	6199;"	d
SQLITE_TESTCTRL_RESERVE	server/sqlite3.c	6332;"	d	file:
SQLITE_TESTCTRL_RESERVE	server/sqlite3.h	6208;"	d
SQLITE_TESTCTRL_SCRATCHMALLOC	server/sqlite3.c	6335;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	server/sqlite3.h	6211;"	d
SQLITE_TESTCTRL_SORTER_MMAP	server/sqlite3.c	6342;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	server/sqlite3.h	6218;"	d
SQLITE_TESTCTRL_VDBE_COVERAGE	server/sqlite3.c	6339;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	server/sqlite3.h	6215;"	d
SQLITE_TEXT	server/sqlite3.c	3910;"	d	file:
SQLITE_TEXT	server/sqlite3.c	3912;"	d	file:
SQLITE_TEXT	server/sqlite3.h	3786;"	d
SQLITE_TEXT	server/sqlite3.h	3788;"	d
SQLITE_THREADSAFE	server/sqlite3.c	7970;"	d	file:
SQLITE_THREADSAFE	server/sqlite3.c	7972;"	d	file:
SQLITE_THREADS_IMPLEMENTED	server/sqlite3.c	21958;"	d	file:
SQLITE_THREADS_IMPLEMENTED	server/sqlite3.c	22026;"	d	file:
SQLITE_TOOBIG	server/sqlite3.c	541;"	d	file:
SQLITE_TOOBIG	server/sqlite3.h	417;"	d
SQLITE_TRANSACTION	server/sqlite3.c	2701;"	d	file:
SQLITE_TRANSACTION	server/sqlite3.h	2577;"	d
SQLITE_TRANSIENT	server/sqlite3.c	4511;"	d	file:
SQLITE_TRANSIENT	server/sqlite3.h	4387;"	d
SQLITE_Transitive	server/sqlite3.c	10734;"	d	file:
SQLITE_UNIX_THREADS	server/sqlite3.c	24655;"	d	file:
SQLITE_UPDATE	server/sqlite3.c	2702;"	d	file:
SQLITE_UPDATE	server/sqlite3.h	2578;"	d
SQLITE_USE_MALLOC_H	server/sqlite3.c	16515;"	d	file:
SQLITE_USE_MALLOC_H	server/sqlite3.c	16524;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	server/sqlite3.c	16516;"	d	file:
SQLITE_USE_MSIZE	server/sqlite3.c	16525;"	d	file:
SQLITE_USE_URI	server/sqlite3.c	13469;"	d	file:
SQLITE_UTF16	server/sqlite3.c	4280;"	d	file:
SQLITE_UTF16	server/sqlite3.h	4156;"	d
SQLITE_UTF16BE	server/sqlite3.c	4279;"	d	file:
SQLITE_UTF16BE	server/sqlite3.h	4155;"	d
SQLITE_UTF16LE	server/sqlite3.c	4278;"	d	file:
SQLITE_UTF16LE	server/sqlite3.h	4154;"	d
SQLITE_UTF16NATIVE	server/sqlite3.c	8653;"	d	file:
SQLITE_UTF16NATIVE	server/sqlite3.c	8660;"	d	file:
SQLITE_UTF16NATIVE	server/sqlite3.c	8666;"	d	file:
SQLITE_UTF16_ALIGNED	server/sqlite3.c	4282;"	d	file:
SQLITE_UTF16_ALIGNED	server/sqlite3.h	4158;"	d
SQLITE_UTF8	server/sqlite3.c	4277;"	d	file:
SQLITE_UTF8	server/sqlite3.h	4153;"	d
SQLITE_VERSION	server/sqlite3.c	201;"	d	file:
SQLITE_VERSION	server/sqlite3.c	234;"	d	file:
SQLITE_VERSION	server/sqlite3.h	110;"	d
SQLITE_VERSION	server/sqlite3.h	77;"	d
SQLITE_VERSION_NUMBER	server/sqlite3.c	204;"	d	file:
SQLITE_VERSION_NUMBER	server/sqlite3.c	235;"	d	file:
SQLITE_VERSION_NUMBER	server/sqlite3.h	111;"	d
SQLITE_VERSION_NUMBER	server/sqlite3.h	80;"	d
SQLITE_VTAB_CONSTRAINT_SUPPORT	server/sqlite3.c	7508;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	server/sqlite3.h	7384;"	d
SQLITE_VdbeAddopTrace	server/sqlite3.c	10703;"	d	file:
SQLITE_VdbeEQP	server/sqlite3.c	10717;"	d	file:
SQLITE_VdbeListing	server/sqlite3.c	10701;"	d	file:
SQLITE_VdbeTrace	server/sqlite3.c	10688;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	server/sqlite3.c	19589;"	d	file:
SQLITE_WARNING	server/sqlite3.c	551;"	d	file:
SQLITE_WARNING	server/sqlite3.h	427;"	d
SQLITE_WARNING_AUTOINDEX	server/sqlite3.c	623;"	d	file:
SQLITE_WARNING_AUTOINDEX	server/sqlite3.h	499;"	d
SQLITE_WIN32_DATA_DIRECTORY_TYPE	server/sqlite3.c	32761;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	server/sqlite3.c	32753;"	d	file:
SQLITE_WIN32_GETVERSIONEX	server/sqlite3.c	32554;"	d	file:
SQLITE_WIN32_GETVERSIONEX	server/sqlite3.c	32556;"	d	file:
SQLITE_WIN32_HAS_ANSI	server/sqlite3.c	32516;"	d	file:
SQLITE_WIN32_HAS_WIDE	server/sqlite3.c	32525;"	d	file:
SQLITE_WIN32_HEAP_CREATE	server/sqlite3.c	32793;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	server/sqlite3.c	32816;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	server/sqlite3.c	32800;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	server/sqlite3.c	32808;"	d	file:
SQLITE_WIN32_IOERR_RETRY	server/sqlite3.c	34346;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	server/sqlite3.c	34349;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	server/sqlite3.c	32612;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	server/sqlite3.c	32596;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	server/sqlite3.c	32572;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	server/sqlite3.c	32769;"	d	file:
SQLITE_WIN32_VOLATILE	server/sqlite3.c	19554;"	d	file:
SQLITE_WIN32_VOLATILE	server/sqlite3.c	19556;"	d	file:
SQLITE_WINNT_MAX_PATH_BYTES	server/sqlite3.c	32604;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	server/sqlite3.c	32587;"	d	file:
SQLITE_WSD	server/sqlite3.c	8841;"	d	file:
SQLITE_WSD	server/sqlite3.c	8847;"	d	file:
SQLITE_WriteSchema	server/sqlite3.c	10702;"	d	file:
SQLStmt	server/sqlstmt.cc	/^SQLStmt::SQLStmt (sqlite3 *db, const char *fmt, ...)$/;"	f	class:SQLStmt
SQLStmt	server/sqlstmt.cc	/^SQLStmt::SQLStmt(const SQLStmt &l)$/;"	f	class:SQLStmt
SQLStmt	server/sqlstmt.h	/^  SQLStmt(SQLStmt &&r) : stmt_ (r.stmt_) { r.stmt_ = nullptr; }$/;"	f	class:SQLStmt
SQLStmt	server/sqlstmt.h	/^  explicit SQLStmt(sqlite3_stmt *stmt) : stmt_(stmt) {}$/;"	f	class:SQLStmt
SQLStmt	server/sqlstmt.h	/^class SQLStmt {$/;"	c
SQL_CHOMP_SEGDIR	server/sqlite3.c	139701;"	d	file:
SQL_CONTENT_INSERT	server/sqlite3.c	139685;"	d	file:
SQL_DELETE_ALL_CONTENT	server/sqlite3.c	139669;"	d	file:
SQL_DELETE_ALL_DOCSIZE	server/sqlite3.c	139672;"	d	file:
SQL_DELETE_ALL_SEGDIR	server/sqlite3.c	139671;"	d	file:
SQL_DELETE_ALL_SEGMENTS	server/sqlite3.c	139670;"	d	file:
SQL_DELETE_ALL_STAT	server/sqlite3.c	139673;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	server/sqlite3.c	139693;"	d	file:
SQL_DELETE_CONTENT	server/sqlite3.c	139667;"	d	file:
SQL_DELETE_DOCSIZE	server/sqlite3.c	139686;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	server/sqlite3.c	139698;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	server/sqlite3.c	139683;"	d	file:
SQL_DELETE_SEGDIR_RANGE	server/sqlite3.c	139694;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	server/sqlite3.c	139684;"	d	file:
SQL_FIND_MERGE_LEVEL	server/sqlite3.c	139696;"	d	file:
SQL_INSERT_SEGDIR	server/sqlite3.c	139678;"	d	file:
SQL_INSERT_SEGMENTS	server/sqlite3.c	139676;"	d	file:
SQL_IS_EMPTY	server/sqlite3.c	139668;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	server/sqlite3.c	139697;"	d	file:
SQL_NEXT_SEGMENTS_ID	server/sqlite3.c	139677;"	d	file:
SQL_NEXT_SEGMENT_INDEX	server/sqlite3.c	139675;"	d	file:
SQL_REPLACE_DOCSIZE	server/sqlite3.c	139687;"	d	file:
SQL_REPLACE_STAT	server/sqlite3.c	139690;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	server/sqlite3.c	139702;"	d	file:
SQL_SELECT_ALL_LANGID	server/sqlite3.c	139695;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	server/sqlite3.c	139692;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	server/sqlite3.c	139674;"	d	file:
SQL_SELECT_DOCSIZE	server/sqlite3.c	139688;"	d	file:
SQL_SELECT_INDEXES	server/sqlite3.c	139703;"	d	file:
SQL_SELECT_LEVEL	server/sqlite3.c	139679;"	d	file:
SQL_SELECT_LEVEL_COUNT	server/sqlite3.c	139681;"	d	file:
SQL_SELECT_LEVEL_RANGE	server/sqlite3.c	139680;"	d	file:
SQL_SELECT_LEVEL_RANGE2	server/sqlite3.c	139706;"	d	file:
SQL_SELECT_MXLEVEL	server/sqlite3.c	139704;"	d	file:
SQL_SELECT_SEGDIR	server/sqlite3.c	139700;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	server/sqlite3.c	139682;"	d	file:
SQL_SELECT_STAT	server/sqlite3.c	139689;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	server/sqlite3.c	139699;"	d	file:
SQL_UPDATE_LEVEL	server/sqlite3.c	139708;"	d	file:
SQL_UPDATE_LEVEL_IDX	server/sqlite3.c	139707;"	d	file:
SQLiteThread	server/sqlite3.c	/^struct SQLiteThread {$/;"	s	file:
SQLiteThread	server/sqlite3.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SRT_Coroutine	server/sqlite3.c	11954;"	d	file:
SRT_Discard	server/sqlite3.c	11941;"	d	file:
SRT_DistFifo	server/sqlite3.c	11943;"	d	file:
SRT_DistQueue	server/sqlite3.c	11945;"	d	file:
SRT_EphemTab	server/sqlite3.c	11953;"	d	file:
SRT_Except	server/sqlite3.c	11939;"	d	file:
SRT_Exists	server/sqlite3.c	11940;"	d	file:
SRT_Fifo	server/sqlite3.c	11942;"	d	file:
SRT_Mem	server/sqlite3.c	11951;"	d	file:
SRT_Output	server/sqlite3.c	11950;"	d	file:
SRT_Queue	server/sqlite3.c	11944;"	d	file:
SRT_Set	server/sqlite3.c	11952;"	d	file:
SRT_Table	server/sqlite3.c	11955;"	d	file:
SRT_Union	server/sqlite3.c	11938;"	d	file:
SRVAL	server/sqlite3.c	76381;"	d	file:
STAT_GET_NDLT	server/sqlite3.c	86579;"	d	file:
STAT_GET_NEQ	server/sqlite3.c	86577;"	d	file:
STAT_GET_NLT	server/sqlite3.c	86578;"	d	file:
STAT_GET_ROWID	server/sqlite3.c	86576;"	d	file:
STAT_GET_STAT1	server/sqlite3.c	86575;"	d	file:
STDC_HEADERS	xdrpp/config.h	62;"	d
STRACCUM_NOMEM	server/sqlite3.c	12313;"	d	file:
STRACCUM_TOOBIG	server/sqlite3.c	12314;"	d	file:
STRICMP	server/sqlite3.c	89533;"	d	file:
STRIP	xdrpp/Makefile	/^STRIP = $/;"	m
STRUCT	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
STR_FUNCTION	server/sqlite3.c	10862;"	d	file:
SUFFIXES	xdrpp/Makefile	/^SUFFIXES = .x .hh$/;"	m
SWAP	server/sqlite3.c	113909;"	d	file:
SYSCALL	server/sqlite3.c	32893;"	d	file:
Savepoint	server/sqlite3.c	/^struct Savepoint {$/;"	s	file:
Savepoint	server/sqlite3.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
Schema	server/sqlite3.c	/^struct Schema {$/;"	s	file:
Schema	server/sqlite3.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	server/sqlite3.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	server/sqlite3.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
SegmentNode	server/sqlite3.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	server/sqlite3.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	server/sqlite3.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	server/sqlite3.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	server/sqlite3.c	/^struct Select {$/;"	s	file:
Select	server/sqlite3.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	server/sqlite3.c	/^struct SelectDest {$/;"	s	file:
SelectDest	server/sqlite3.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
ServerDB	cacheserver/serverdb.cc	/^ServerDB::ServerDB()$/;"	f	class:ServerDB
ServerDB	cacheserver/serverdb.h	/^class ServerDB {$/;"	c
ServerDB	server/serverdb.cc	/^ServerDB::ServerDB(const char *file)$/;"	f	class:ServerDB
ServerDB	server/serverdb.h	/^class ServerDB {$/;"	c
ShmRegion	server/sqlite3.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
Signal	xdrpp/xdrpp/pollset.h	/^    Signal = 1$/;"	m	class:xdr::pollset_plus::wake_type
SimulateDiskfullError	server/sqlite3.c	19446;"	d	file:
SimulateDiskfullError	server/sqlite3.c	19460;"	d	file:
SimulateDiskfullError	server/sqlite3.c	24965;"	d	file:
SimulateDiskfullError	server/sqlite3.c	24979;"	d	file:
SimulateDiskfullError	server/sqlite3.c	32466;"	d	file:
SimulateDiskfullError	server/sqlite3.c	32480;"	d	file:
SimulateIOError	server/sqlite3.c	19437;"	d	file:
SimulateIOError	server/sqlite3.c	19459;"	d	file:
SimulateIOError	server/sqlite3.c	24956;"	d	file:
SimulateIOError	server/sqlite3.c	24978;"	d	file:
SimulateIOError	server/sqlite3.c	32457;"	d	file:
SimulateIOError	server/sqlite3.c	32479;"	d	file:
SimulateIOErrorBenign	server/sqlite3.c	19436;"	d	file:
SimulateIOErrorBenign	server/sqlite3.c	19458;"	d	file:
SimulateIOErrorBenign	server/sqlite3.c	24955;"	d	file:
SimulateIOErrorBenign	server/sqlite3.c	24977;"	d	file:
SimulateIOErrorBenign	server/sqlite3.c	32456;"	d	file:
SimulateIOErrorBenign	server/sqlite3.c	32478;"	d	file:
SizeofArray	server/sqlite3.c	129339;"	d	file:
SnippetFragment	server/sqlite3.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	server/sqlite3.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	server/sqlite3.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	server/sqlite3.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	server/sqlite3.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	server/sqlite3.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	server/sqlite3.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	server/sqlite3.c	/^static void SortByDistance($/;"	f	file:
SortCtx	server/sqlite3.c	/^struct SortCtx {$/;"	s	file:
SortCtx	server/sqlite3.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortSubtask	server/sqlite3.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	server/sqlite3.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SorterFile	server/sqlite3.c	/^struct SorterFile {$/;"	s	file:
SorterFile	server/sqlite3.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterList	server/sqlite3.c	/^struct SorterList {$/;"	s	file:
SorterList	server/sqlite3.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterRecord	server/sqlite3.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	server/sqlite3.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SplitNode	server/sqlite3.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	server/sqlite3.c	/^struct Sqlite3Config {$/;"	s	file:
SrcCount	server/sqlite3.c	/^struct SrcCount {$/;"	s	file:
SrcList	server/sqlite3.c	/^struct SrcList {$/;"	s	file:
SrcList	server/sqlite3.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	server/sqlite3.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
Stat4Accum	server/sqlite3.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	server/sqlite3.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Sample	server/sqlite3.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	server/sqlite3.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
StrAccum	server/sqlite3.c	/^struct StrAccum {$/;"	s	file:
StrAccum	server/sqlite3.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	server/sqlite3.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	server/sqlite3.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	server/sqlite3.c	69073;"	d	file:
SubProgram	server/sqlite3.c	/^struct SubProgram {$/;"	s	file:
SubProgram	server/sqlite3.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SumCtx	server/sqlite3.c	/^struct SumCtx {$/;"	s	file:
SumCtx	server/sqlite3.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	server/sqlite3.c	8793;"	d	file:
TERM_ANDINFO	server/sqlite3.c	113363;"	d	file:
TERM_CODED	server/sqlite3.c	113360;"	d	file:
TERM_COPIED	server/sqlite3.c	113361;"	d	file:
TERM_DYNAMIC	server/sqlite3.c	113358;"	d	file:
TERM_ORINFO	server/sqlite3.c	113362;"	d	file:
TERM_OR_OK	server/sqlite3.c	113364;"	d	file:
TERM_VIRTUAL	server/sqlite3.c	113359;"	d	file:
TERM_VNULL	server/sqlite3.c	113366;"	d	file:
TERM_VNULL	server/sqlite3.c	113368;"	d	file:
TESTBIT	server/sqlite3.c	38321;"	d	file:
TESTONLY	server/sqlite3.c	129432;"	d	file:
TESTONLY	server/sqlite3.c	129434;"	d	file:
TESTONLY	server/sqlite3.c	8097;"	d	file:
TESTONLY	server/sqlite3.c	8099;"	d	file:
TF_Autoincrement	server/sqlite3.c	11117;"	d	file:
TF_Ephemeral	server/sqlite3.c	11115;"	d	file:
TF_HasPrimaryKey	server/sqlite3.c	11116;"	d	file:
TF_Readonly	server/sqlite3.c	11114;"	d	file:
TF_Virtual	server/sqlite3.c	11118;"	d	file:
TF_WithoutRowid	server/sqlite3.c	11119;"	d	file:
THREE_BYTE_INT	server/sqlite3.c	66074;"	d	file:
TIMER_ELAPSED	server/sqlite3.c	19416;"	d	file:
TIMER_ELAPSED	server/sqlite3.c	19420;"	d	file:
TIMER_ELAPSED	server/sqlite3.c	24935;"	d	file:
TIMER_ELAPSED	server/sqlite3.c	24939;"	d	file:
TIMER_ELAPSED	server/sqlite3.c	32436;"	d	file:
TIMER_ELAPSED	server/sqlite3.c	32440;"	d	file:
TIMER_END	server/sqlite3.c	19415;"	d	file:
TIMER_END	server/sqlite3.c	19419;"	d	file:
TIMER_END	server/sqlite3.c	24934;"	d	file:
TIMER_END	server/sqlite3.c	24938;"	d	file:
TIMER_END	server/sqlite3.c	32435;"	d	file:
TIMER_END	server/sqlite3.c	32439;"	d	file:
TIMER_START	server/sqlite3.c	19414;"	d	file:
TIMER_START	server/sqlite3.c	19418;"	d	file:
TIMER_START	server/sqlite3.c	24933;"	d	file:
TIMER_START	server/sqlite3.c	24937;"	d	file:
TIMER_START	server/sqlite3.c	32434;"	d	file:
TIMER_START	server/sqlite3.c	32438;"	d	file:
TK_ABORT	server/sqlite3.c	8290;"	d	file:
TK_ACTION	server/sqlite3.c	8291;"	d	file:
TK_ADD	server/sqlite3.c	8403;"	d	file:
TK_AFTER	server/sqlite3.c	8292;"	d	file:
TK_AGG_COLUMN	server/sqlite3.c	8417;"	d	file:
TK_AGG_FUNCTION	server/sqlite3.c	8416;"	d	file:
TK_ALL	server/sqlite3.c	8377;"	d	file:
TK_ALTER	server/sqlite3.c	8402;"	d	file:
TK_ANALYZE	server/sqlite3.c	8293;"	d	file:
TK_AND	server/sqlite3.c	8333;"	d	file:
TK_ANY	server/sqlite3.c	8331;"	d	file:
TK_AS	server/sqlite3.c	8285;"	d	file:
TK_ASC	server/sqlite3.c	8294;"	d	file:
TK_ATTACH	server/sqlite3.c	8295;"	d	file:
TK_AUTOINCR	server/sqlite3.c	8367;"	d	file:
TK_BEFORE	server/sqlite3.c	8296;"	d	file:
TK_BEGIN	server/sqlite3.c	8266;"	d	file:
TK_BETWEEN	server/sqlite3.c	8335;"	d	file:
TK_BITAND	server/sqlite3.c	8346;"	d	file:
TK_BITNOT	server/sqlite3.c	8357;"	d	file:
TK_BITOR	server/sqlite3.c	8347;"	d	file:
TK_BLOB	server/sqlite3.c	8395;"	d	file:
TK_BY	server/sqlite3.c	8297;"	d	file:
TK_CASCADE	server/sqlite3.c	8298;"	d	file:
TK_CASE	server/sqlite3.c	8397;"	d	file:
TK_CAST	server/sqlite3.c	8299;"	d	file:
TK_CHECK	server/sqlite3.c	8365;"	d	file:
TK_COLLATE	server/sqlite3.c	8356;"	d	file:
TK_COLUMN	server/sqlite3.c	8415;"	d	file:
TK_COLUMNKW	server/sqlite3.c	8300;"	d	file:
TK_COMMA	server/sqlite3.c	8287;"	d	file:
TK_COMMIT	server/sqlite3.c	8271;"	d	file:
TK_CONCAT	server/sqlite3.c	8355;"	d	file:
TK_CONFLICT	server/sqlite3.c	8301;"	d	file:
TK_CONSTRAINT	server/sqlite3.c	8360;"	d	file:
TK_CREATE	server/sqlite3.c	8278;"	d	file:
TK_CTIME_KW	server/sqlite3.c	8330;"	d	file:
TK_DATABASE	server/sqlite3.c	8302;"	d	file:
TK_DEFAULT	server/sqlite3.c	8361;"	d	file:
TK_DEFERRABLE	server/sqlite3.c	8373;"	d	file:
TK_DEFERRED	server/sqlite3.c	8268;"	d	file:
TK_DELETE	server/sqlite3.c	8370;"	d	file:
TK_DESC	server/sqlite3.c	8303;"	d	file:
TK_DETACH	server/sqlite3.c	8304;"	d	file:
TK_DISTINCT	server/sqlite3.c	8382;"	d	file:
TK_DOT	server/sqlite3.c	8383;"	d	file:
TK_DROP	server/sqlite3.c	8375;"	d	file:
TK_EACH	server/sqlite3.c	8305;"	d	file:
TK_ELSE	server/sqlite3.c	8400;"	d	file:
TK_END	server/sqlite3.c	8272;"	d	file:
TK_END_OF_FILE	server/sqlite3.c	8410;"	d	file:
TK_EQ	server/sqlite3.c	8340;"	d	file:
TK_ESCAPE	server/sqlite3.c	8345;"	d	file:
TK_EXCEPT	server/sqlite3.c	8378;"	d	file:
TK_EXCLUSIVE	server/sqlite3.c	8270;"	d	file:
TK_EXISTS	server/sqlite3.c	8281;"	d	file:
TK_EXPLAIN	server/sqlite3.c	8263;"	d	file:
TK_FAIL	server/sqlite3.c	8306;"	d	file:
TK_FLOAT	server/sqlite3.c	8394;"	d	file:
TK_FOR	server/sqlite3.c	8307;"	d	file:
TK_FOREIGN	server/sqlite3.c	8374;"	d	file:
TK_FROM	server/sqlite3.c	8384;"	d	file:
TK_FUNCTION	server/sqlite3.c	8414;"	d	file:
TK_GE	server/sqlite3.c	8344;"	d	file:
TK_GROUP	server/sqlite3.c	8388;"	d	file:
TK_GT	server/sqlite3.c	8341;"	d	file:
TK_HAVING	server/sqlite3.c	8389;"	d	file:
TK_ID	server/sqlite3.c	8288;"	d	file:
TK_IF	server/sqlite3.c	8279;"	d	file:
TK_IGNORE	server/sqlite3.c	8308;"	d	file:
TK_ILLEGAL	server/sqlite3.c	8411;"	d	file:
TK_IMMEDIATE	server/sqlite3.c	8269;"	d	file:
TK_IN	server/sqlite3.c	8336;"	d	file:
TK_INDEX	server/sqlite3.c	8401;"	d	file:
TK_INDEXED	server/sqlite3.c	8289;"	d	file:
TK_INITIALLY	server/sqlite3.c	8309;"	d	file:
TK_INSERT	server/sqlite3.c	8369;"	d	file:
TK_INSTEAD	server/sqlite3.c	8310;"	d	file:
TK_INTEGER	server/sqlite3.c	8393;"	d	file:
TK_INTERSECT	server/sqlite3.c	8379;"	d	file:
TK_INTO	server/sqlite3.c	8392;"	d	file:
TK_IS	server/sqlite3.c	8334;"	d	file:
TK_ISNOT	server/sqlite3.c	8409;"	d	file:
TK_ISNULL	server/sqlite3.c	8337;"	d	file:
TK_JOIN	server/sqlite3.c	8385;"	d	file:
TK_JOIN_KW	server/sqlite3.c	8359;"	d	file:
TK_KEY	server/sqlite3.c	8314;"	d	file:
TK_LE	server/sqlite3.c	8342;"	d	file:
TK_LIKE_KW	server/sqlite3.c	8311;"	d	file:
TK_LIMIT	server/sqlite3.c	8390;"	d	file:
TK_LP	server/sqlite3.c	8283;"	d	file:
TK_LSHIFT	server/sqlite3.c	8348;"	d	file:
TK_LT	server/sqlite3.c	8343;"	d	file:
TK_MATCH	server/sqlite3.c	8312;"	d	file:
TK_MINUS	server/sqlite3.c	8351;"	d	file:
TK_NE	server/sqlite3.c	8339;"	d	file:
TK_NO	server/sqlite3.c	8313;"	d	file:
TK_NOT	server/sqlite3.c	8280;"	d	file:
TK_NOTNULL	server/sqlite3.c	8338;"	d	file:
TK_NULL	server/sqlite3.c	8362;"	d	file:
TK_OF	server/sqlite3.c	8315;"	d	file:
TK_OFFSET	server/sqlite3.c	8316;"	d	file:
TK_ON	server/sqlite3.c	8368;"	d	file:
TK_OR	server/sqlite3.c	8332;"	d	file:
TK_ORDER	server/sqlite3.c	8387;"	d	file:
TK_PLAN	server/sqlite3.c	8265;"	d	file:
TK_PLUS	server/sqlite3.c	8350;"	d	file:
TK_PRAGMA	server/sqlite3.c	8317;"	d	file:
TK_PRIMARY	server/sqlite3.c	8363;"	d	file:
TK_QUERY	server/sqlite3.c	8264;"	d	file:
TK_RAISE	server/sqlite3.c	8318;"	d	file:
TK_RECURSIVE	server/sqlite3.c	8319;"	d	file:
TK_REFERENCES	server/sqlite3.c	8366;"	d	file:
TK_REGISTER	server/sqlite3.c	8420;"	d	file:
TK_REINDEX	server/sqlite3.c	8328;"	d	file:
TK_RELEASE	server/sqlite3.c	8275;"	d	file:
TK_REM	server/sqlite3.c	8354;"	d	file:
TK_RENAME	server/sqlite3.c	8329;"	d	file:
TK_REPLACE	server/sqlite3.c	8320;"	d	file:
TK_RESTRICT	server/sqlite3.c	8321;"	d	file:
TK_ROLLBACK	server/sqlite3.c	8273;"	d	file:
TK_ROW	server/sqlite3.c	8322;"	d	file:
TK_RP	server/sqlite3.c	8284;"	d	file:
TK_RSHIFT	server/sqlite3.c	8349;"	d	file:
TK_SAVEPOINT	server/sqlite3.c	8274;"	d	file:
TK_SELECT	server/sqlite3.c	8380;"	d	file:
TK_SEMI	server/sqlite3.c	8262;"	d	file:
TK_SET	server/sqlite3.c	8372;"	d	file:
TK_SLASH	server/sqlite3.c	8353;"	d	file:
TK_SPACE	server/sqlite3.c	8412;"	d	file:
TK_STAR	server/sqlite3.c	8352;"	d	file:
TK_STRING	server/sqlite3.c	8358;"	d	file:
TK_TABLE	server/sqlite3.c	8277;"	d	file:
TK_TEMP	server/sqlite3.c	8282;"	d	file:
TK_THEN	server/sqlite3.c	8399;"	d	file:
TK_TO	server/sqlite3.c	8276;"	d	file:
TK_TO_BLOB	server/sqlite3.c	8405;"	d	file:
TK_TO_INT	server/sqlite3.c	8407;"	d	file:
TK_TO_NUMERIC	server/sqlite3.c	8406;"	d	file:
TK_TO_REAL	server/sqlite3.c	8408;"	d	file:
TK_TO_TEXT	server/sqlite3.c	8404;"	d	file:
TK_TRANSACTION	server/sqlite3.c	8267;"	d	file:
TK_TRIGGER	server/sqlite3.c	8323;"	d	file:
TK_UMINUS	server/sqlite3.c	8418;"	d	file:
TK_UNCLOSED_STRING	server/sqlite3.c	8413;"	d	file:
TK_UNION	server/sqlite3.c	8376;"	d	file:
TK_UNIQUE	server/sqlite3.c	8364;"	d	file:
TK_UPDATE	server/sqlite3.c	8371;"	d	file:
TK_UPLUS	server/sqlite3.c	8419;"	d	file:
TK_USING	server/sqlite3.c	8386;"	d	file:
TK_VACUUM	server/sqlite3.c	8324;"	d	file:
TK_VALUES	server/sqlite3.c	8381;"	d	file:
TK_VARIABLE	server/sqlite3.c	8396;"	d	file:
TK_VIEW	server/sqlite3.c	8325;"	d	file:
TK_VIRTUAL	server/sqlite3.c	8326;"	d	file:
TK_WHEN	server/sqlite3.c	8398;"	d	file:
TK_WHERE	server/sqlite3.c	8391;"	d	file:
TK_WITH	server/sqlite3.c	8327;"	d	file:
TK_WITHOUT	server/sqlite3.c	8286;"	d	file:
TOKEN	server/sqlite3.c	123508;"	d	file:
TRACE	server/sqlite3.c	52133;"	d	file:
TRACE_IDX_INPUTS	server/sqlite3.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	server/sqlite3.c	115080;"	d	file:
TRACE_IDX_OUTPUTS	server/sqlite3.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	server/sqlite3.c	115081;"	d	file:
TRANS_NONE	server/sqlite3.c	51511;"	d	file:
TRANS_READ	server/sqlite3.c	51512;"	d	file:
TRANS_WRITE	server/sqlite3.c	51513;"	d	file:
TRIGGER_AFTER	server/sqlite3.c	12231;"	d	file:
TRIGGER_BEFORE	server/sqlite3.c	12230;"	d	file:
TS_ENUM	xdrpp/xdrc/xdrc_internal.h	/^  enum { TS_ID, TS_ENUM, TS_STRUCT, TS_UNION } ts_which {TS_ID};$/;"	e	enum:rpc_decl::__anon29
TS_ID	xdrpp/xdrc/xdrc_internal.h	/^  enum { TS_ID, TS_ENUM, TS_STRUCT, TS_UNION } ts_which {TS_ID};$/;"	e	enum:rpc_decl::__anon29
TS_ID	xdrpp/xdrc/xdrc_internal.h	/^  enum { TS_ID, TS_ENUM, TS_STRUCT, TS_UNION } ts_which {TS_ID};$/;"	e	enum:rpc_decl::ts_which
TS_STRUCT	xdrpp/xdrc/xdrc_internal.h	/^  enum { TS_ID, TS_ENUM, TS_STRUCT, TS_UNION } ts_which {TS_ID};$/;"	e	enum:rpc_decl::__anon29
TS_UNION	xdrpp/xdrc/xdrc_internal.h	/^  enum { TS_ID, TS_ENUM, TS_STRUCT, TS_UNION } ts_which {TS_ID};$/;"	e	enum:rpc_decl::__anon29
TWOPOWER31	server/sqlite3.c	23932;"	d	file:
TWOPOWER32	server/sqlite3.c	23931;"	d	file:
TWO_BYTE_INT	server/sqlite3.c	66073;"	d	file:
TYPEDEF	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
T_BOOL	xdrpp/xdrc/parse.cc	/^    T_BOOL = 268,$/;"	e	enum:yytokentype	file:
T_BOOL	xdrpp/xdrc/parse.cc	147;"	d	file:
T_BOOL	xdrpp/xdrc/parse.hh	/^    T_BOOL = 268,$/;"	e	enum:yytokentype
T_BOOL	xdrpp/xdrc/parse.hh	85;"	d
T_CASE	xdrpp/xdrc/parse.cc	/^    T_CASE = 278,$/;"	e	enum:yytokentype	file:
T_CASE	xdrpp/xdrc/parse.cc	157;"	d	file:
T_CASE	xdrpp/xdrc/parse.hh	/^    T_CASE = 278,$/;"	e	enum:yytokentype
T_CASE	xdrpp/xdrc/parse.hh	95;"	d
T_CONST	xdrpp/xdrc/parse.cc	/^    T_CONST = 261,$/;"	e	enum:yytokentype	file:
T_CONST	xdrpp/xdrc/parse.cc	140;"	d	file:
T_CONST	xdrpp/xdrc/parse.hh	/^    T_CONST = 261,$/;"	e	enum:yytokentype
T_CONST	xdrpp/xdrc/parse.hh	78;"	d
T_DEFAULT	xdrpp/xdrc/parse.cc	/^    T_DEFAULT = 279,$/;"	e	enum:yytokentype	file:
T_DEFAULT	xdrpp/xdrc/parse.cc	158;"	d	file:
T_DEFAULT	xdrpp/xdrc/parse.hh	/^    T_DEFAULT = 279,$/;"	e	enum:yytokentype
T_DEFAULT	xdrpp/xdrc/parse.hh	96;"	d
T_DOUBLE	xdrpp/xdrc/parse.cc	/^    T_DOUBLE = 273,$/;"	e	enum:yytokentype	file:
T_DOUBLE	xdrpp/xdrc/parse.cc	152;"	d	file:
T_DOUBLE	xdrpp/xdrc/parse.hh	/^    T_DOUBLE = 273,$/;"	e	enum:yytokentype
T_DOUBLE	xdrpp/xdrc/parse.hh	90;"	d
T_ENUM	xdrpp/xdrc/parse.cc	/^    T_ENUM = 264,$/;"	e	enum:yytokentype	file:
T_ENUM	xdrpp/xdrc/parse.cc	143;"	d	file:
T_ENUM	xdrpp/xdrc/parse.hh	/^    T_ENUM = 264,$/;"	e	enum:yytokentype
T_ENUM	xdrpp/xdrc/parse.hh	81;"	d
T_FLOAT	xdrpp/xdrc/parse.cc	/^    T_FLOAT = 272,$/;"	e	enum:yytokentype	file:
T_FLOAT	xdrpp/xdrc/parse.cc	151;"	d	file:
T_FLOAT	xdrpp/xdrc/parse.hh	/^    T_FLOAT = 272,$/;"	e	enum:yytokentype
T_FLOAT	xdrpp/xdrc/parse.hh	89;"	d
T_HYPER	xdrpp/xdrc/parse.cc	/^    T_HYPER = 271,$/;"	e	enum:yytokentype	file:
T_HYPER	xdrpp/xdrc/parse.cc	150;"	d	file:
T_HYPER	xdrpp/xdrc/parse.hh	/^    T_HYPER = 271,$/;"	e	enum:yytokentype
T_HYPER	xdrpp/xdrc/parse.hh	88;"	d
T_ID	xdrpp/xdrc/parse.cc	/^    T_ID = 258,$/;"	e	enum:yytokentype	file:
T_ID	xdrpp/xdrc/parse.cc	137;"	d	file:
T_ID	xdrpp/xdrc/parse.hh	/^    T_ID = 258,$/;"	e	enum:yytokentype
T_ID	xdrpp/xdrc/parse.hh	75;"	d
T_INT	xdrpp/xdrc/parse.cc	/^    T_INT = 270,$/;"	e	enum:yytokentype	file:
T_INT	xdrpp/xdrc/parse.cc	149;"	d	file:
T_INT	xdrpp/xdrc/parse.hh	/^    T_INT = 270,$/;"	e	enum:yytokentype
T_INT	xdrpp/xdrc/parse.hh	87;"	d
T_NAMESPACE	xdrpp/xdrc/parse.cc	/^    T_NAMESPACE = 267,$/;"	e	enum:yytokentype	file:
T_NAMESPACE	xdrpp/xdrc/parse.cc	146;"	d	file:
T_NAMESPACE	xdrpp/xdrc/parse.hh	/^    T_NAMESPACE = 267,$/;"	e	enum:yytokentype
T_NAMESPACE	xdrpp/xdrc/parse.hh	84;"	d
T_NUM	xdrpp/xdrc/parse.cc	/^    T_NUM = 260,$/;"	e	enum:yytokentype	file:
T_NUM	xdrpp/xdrc/parse.cc	139;"	d	file:
T_NUM	xdrpp/xdrc/parse.hh	/^    T_NUM = 260,$/;"	e	enum:yytokentype
T_NUM	xdrpp/xdrc/parse.hh	77;"	d
T_OPAQUE	xdrpp/xdrc/parse.cc	/^    T_OPAQUE = 280,$/;"	e	enum:yytokentype	file:
T_OPAQUE	xdrpp/xdrc/parse.cc	159;"	d	file:
T_OPAQUE	xdrpp/xdrc/parse.hh	/^    T_OPAQUE = 280,$/;"	e	enum:yytokentype
T_OPAQUE	xdrpp/xdrc/parse.hh	97;"	d
T_PROGRAM	xdrpp/xdrc/parse.cc	/^    T_PROGRAM = 266,$/;"	e	enum:yytokentype	file:
T_PROGRAM	xdrpp/xdrc/parse.cc	145;"	d	file:
T_PROGRAM	xdrpp/xdrc/parse.hh	/^    T_PROGRAM = 266,$/;"	e	enum:yytokentype
T_PROGRAM	xdrpp/xdrc/parse.hh	83;"	d
T_QID	xdrpp/xdrc/parse.cc	/^    T_QID = 259,$/;"	e	enum:yytokentype	file:
T_QID	xdrpp/xdrc/parse.cc	138;"	d	file:
T_QID	xdrpp/xdrc/parse.hh	/^    T_QID = 259,$/;"	e	enum:yytokentype
T_QID	xdrpp/xdrc/parse.hh	76;"	d
T_QUADRUPLE	xdrpp/xdrc/parse.cc	/^    T_QUADRUPLE = 274,$/;"	e	enum:yytokentype	file:
T_QUADRUPLE	xdrpp/xdrc/parse.cc	153;"	d	file:
T_QUADRUPLE	xdrpp/xdrc/parse.hh	/^    T_QUADRUPLE = 274,$/;"	e	enum:yytokentype
T_QUADRUPLE	xdrpp/xdrc/parse.hh	91;"	d
T_STRING	xdrpp/xdrc/parse.cc	/^    T_STRING = 281$/;"	e	enum:yytokentype	file:
T_STRING	xdrpp/xdrc/parse.cc	160;"	d	file:
T_STRING	xdrpp/xdrc/parse.hh	/^    T_STRING = 281$/;"	e	enum:yytokentype
T_STRING	xdrpp/xdrc/parse.hh	98;"	d
T_STRUCT	xdrpp/xdrc/parse.cc	/^    T_STRUCT = 262,$/;"	e	enum:yytokentype	file:
T_STRUCT	xdrpp/xdrc/parse.cc	141;"	d	file:
T_STRUCT	xdrpp/xdrc/parse.hh	/^    T_STRUCT = 262,$/;"	e	enum:yytokentype
T_STRUCT	xdrpp/xdrc/parse.hh	79;"	d
T_SWITCH	xdrpp/xdrc/parse.cc	/^    T_SWITCH = 277,$/;"	e	enum:yytokentype	file:
T_SWITCH	xdrpp/xdrc/parse.cc	156;"	d	file:
T_SWITCH	xdrpp/xdrc/parse.hh	/^    T_SWITCH = 277,$/;"	e	enum:yytokentype
T_SWITCH	xdrpp/xdrc/parse.hh	94;"	d
T_TYPEDEF	xdrpp/xdrc/parse.cc	/^    T_TYPEDEF = 265,$/;"	e	enum:yytokentype	file:
T_TYPEDEF	xdrpp/xdrc/parse.cc	144;"	d	file:
T_TYPEDEF	xdrpp/xdrc/parse.hh	/^    T_TYPEDEF = 265,$/;"	e	enum:yytokentype
T_TYPEDEF	xdrpp/xdrc/parse.hh	82;"	d
T_UNION	xdrpp/xdrc/parse.cc	/^    T_UNION = 263,$/;"	e	enum:yytokentype	file:
T_UNION	xdrpp/xdrc/parse.cc	142;"	d	file:
T_UNION	xdrpp/xdrc/parse.hh	/^    T_UNION = 263,$/;"	e	enum:yytokentype
T_UNION	xdrpp/xdrc/parse.hh	80;"	d
T_UNSIGNED	xdrpp/xdrc/parse.cc	/^    T_UNSIGNED = 269,$/;"	e	enum:yytokentype	file:
T_UNSIGNED	xdrpp/xdrc/parse.cc	148;"	d	file:
T_UNSIGNED	xdrpp/xdrc/parse.hh	/^    T_UNSIGNED = 269,$/;"	e	enum:yytokentype
T_UNSIGNED	xdrpp/xdrc/parse.hh	86;"	d
T_VERSION	xdrpp/xdrc/parse.cc	/^    T_VERSION = 276,$/;"	e	enum:yytokentype	file:
T_VERSION	xdrpp/xdrc/parse.cc	155;"	d	file:
T_VERSION	xdrpp/xdrc/parse.hh	/^    T_VERSION = 276,$/;"	e	enum:yytokentype
T_VERSION	xdrpp/xdrc/parse.hh	93;"	d
T_VOID	xdrpp/xdrc/parse.cc	/^    T_VOID = 275,$/;"	e	enum:yytokentype	file:
T_VOID	xdrpp/xdrc/parse.cc	154;"	d	file:
T_VOID	xdrpp/xdrc/parse.hh	/^    T_VOID = 275,$/;"	e	enum:yytokentype
T_VOID	xdrpp/xdrc/parse.hh	92;"	d
TabResult	server/sqlite3.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	server/sqlite3.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	server/sqlite3.c	/^struct Table {$/;"	s	file:
Table	server/sqlite3.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	server/sqlite3.c	/^struct TableLock {$/;"	s	file:
TableLock	server/sqlite3.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	server/sqlite3.c	/^struct TermOffset {$/;"	s	file:
TermOffset	server/sqlite3.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	server/sqlite3.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	server/sqlite3.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	server/sqlite3.c	/^struct TermSelect {$/;"	s	file:
TermSelect	server/sqlite3.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Timeout	xdrpp/xdrpp/pollset.h	/^    Timeout(iterator i) : i_(i) {}$/;"	f	class:xdr::pollset::Timeout
Timeout	xdrpp/xdrpp/pollset.h	/^  class Timeout {$/;"	c	class:xdr::pollset
Token	server/sqlite3.c	/^struct Token {$/;"	s	file:
Token	server/sqlite3.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TokenDoclist	server/sqlite3.c	/^struct TokenDoclist {$/;"	s	file:
TokenDoclist	server/sqlite3.c	/^typedef struct TokenDoclist TokenDoclist;$/;"	t	typeref:struct:TokenDoclist	file:
TrigEvent	server/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	server/sqlite3.c	/^struct Trigger {$/;"	s	file:
Trigger	server/sqlite3.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	server/sqlite3.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	server/sqlite3.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	server/sqlite3.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	server/sqlite3.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UAUTH_Admin	server/sqlite3.c	10543;"	d	file:
UAUTH_Fail	server/sqlite3.c	10541;"	d	file:
UAUTH_Unknown	server/sqlite3.c	10540;"	d	file:
UAUTH_User	server/sqlite3.c	10542;"	d	file:
UINT16_MAX	xdrpp/xdrc/scan.cc	80;"	d	file:
UINT16_TYPE	server/sqlite3.c	8550;"	d	file:
UINT16_TYPE	server/sqlite3.c	8552;"	d	file:
UINT32_MAX	xdrpp/xdrc/scan.cc	83;"	d	file:
UINT32_TYPE	server/sqlite3.c	8543;"	d	file:
UINT32_TYPE	server/sqlite3.c	8545;"	d	file:
UINT8_MAX	xdrpp/xdrc/scan.cc	77;"	d	file:
UINT8_TYPE	server/sqlite3.c	8564;"	d	file:
UINT8_TYPE	server/sqlite3.c	8566;"	d	file:
UNICODE_STRING_MAX_CHARS	server/sqlite3.c	32579;"	d	file:
UNION	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	e	enum:rpc_sym::symtype
UNION_COPY_CONSTRUCT	xdrpp/xdrc/union.h	48;"	d
UNIQUE_CACHESERVER_PORT	include/rpcconfig.h	2;"	d
UNIQUE_MASTER_PORT	include/rpcconfig.h	1;"	d
UNIQUE_PROXY_PORT	include/rpcconfig.h	3;"	d
UNIXFILE_DELETE	server/sqlite3.c	24779;"	d	file:
UNIXFILE_DIRSYNC	server/sqlite3.c	24774;"	d	file:
UNIXFILE_DIRSYNC	server/sqlite3.c	24776;"	d	file:
UNIXFILE_EXCL	server/sqlite3.c	24770;"	d	file:
UNIXFILE_NOLOCK	server/sqlite3.c	24781;"	d	file:
UNIXFILE_PERSIST_WAL	server/sqlite3.c	24772;"	d	file:
UNIXFILE_PSOW	server/sqlite3.c	24778;"	d	file:
UNIXFILE_RDONLY	server/sqlite3.c	24771;"	d	file:
UNIXFILE_URI	server/sqlite3.c	24780;"	d	file:
UNIXFILE_WARNED	server/sqlite3.c	24782;"	d	file:
UNIXVFS	server/sqlite3.c	32185;"	d	file:
UNIX_SHM_BASE	server/sqlite3.c	28808;"	d	file:
UNIX_SHM_DMS	server/sqlite3.c	28809;"	d	file:
UNKNOWN_LOCK	server/sqlite3.c	41195;"	d	file:
UNUSED_PARAMETER	server/sqlite3.c	129417;"	d	file:
UNUSED_PARAMETER	server/sqlite3.c	147459;"	d	file:
UNUSED_PARAMETER	server/sqlite3.c	8868;"	d	file:
UNUSED_PARAMETER2	server/sqlite3.c	8869;"	d	file:
UNUSED_VARIABLE_VALUE	server/sqlite3.c	32628;"	d	file:
UPDATE_MAX_BLOBSIZE	server/sqlite3.c	69030;"	d	file:
UPDATE_MAX_BLOBSIZE	server/sqlite3.c	69032;"	d	file:
USEFETCH	server/sqlite3.c	41575;"	d	file:
USEFETCH	server/sqlite3.c	41577;"	d	file:
UnixUnusedFd	server/sqlite3.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	server/sqlite3.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnpackedRecord	server/sqlite3.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	server/sqlite3.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	server/sqlite3.c	22958;"	d	file:
VDBE_MAGIC_DEAD	server/sqlite3.c	14396;"	d	file:
VDBE_MAGIC_HALT	server/sqlite3.c	14395;"	d	file:
VDBE_MAGIC_INIT	server/sqlite3.c	14393;"	d	file:
VDBE_MAGIC_RUN	server/sqlite3.c	14394;"	d	file:
VDBE_OFFSET_LINENO	server/sqlite3.c	9658;"	d	file:
VDBE_OFFSET_LINENO	server/sqlite3.c	9664;"	d	file:
VEC	xdrpp/xdrc/xdrc_internal.h	/^  enum { SCALAR, PTR, ARRAY, VEC } qual {SCALAR};$/;"	e	enum:rpc_decl::__anon28
VERSION	xdrpp/Makefile	/^VERSION = 0$/;"	m
VERSION	xdrpp/config.h	65;"	d
VFUNCTION	server/sqlite3.c	10856;"	d	file:
VTable	server/sqlite3.c	/^struct VTable {$/;"	s	file:
VTable	server/sqlite3.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	server/sqlite3.c	8111;"	d	file:
VVA_ONLY	server/sqlite3.c	8113;"	d	file:
ValueNewStat4Ctx	server/sqlite3.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
Vdbe	server/sqlite3.c	/^struct Vdbe {$/;"	s	file:
Vdbe	server/sqlite3.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeBranchTaken	server/sqlite3.c	69052;"	d	file:
VdbeBranchTaken	server/sqlite3.c	69054;"	d	file:
VdbeComment	server/sqlite3.c	9616;"	d	file:
VdbeComment	server/sqlite3.c	9625;"	d	file:
VdbeCoverage	server/sqlite3.c	9654;"	d	file:
VdbeCoverage	server/sqlite3.c	9660;"	d	file:
VdbeCoverageAlwaysTaken	server/sqlite3.c	9656;"	d	file:
VdbeCoverageAlwaysTaken	server/sqlite3.c	9662;"	d	file:
VdbeCoverageIf	server/sqlite3.c	9655;"	d	file:
VdbeCoverageIf	server/sqlite3.c	9661;"	d	file:
VdbeCoverageNeverTaken	server/sqlite3.c	9657;"	d	file:
VdbeCoverageNeverTaken	server/sqlite3.c	9663;"	d	file:
VdbeCursor	server/sqlite3.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	server/sqlite3.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	server/sqlite3.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	server/sqlite3.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	server/sqlite3.c	14164;"	d	file:
VdbeMemDynamic	server/sqlite3.c	14447;"	d	file:
VdbeModuleComment	server/sqlite3.c	9620;"	d	file:
VdbeModuleComment	server/sqlite3.c	9622;"	d	file:
VdbeModuleComment	server/sqlite3.c	9627;"	d	file:
VdbeNoopComment	server/sqlite3.c	9618;"	d	file:
VdbeNoopComment	server/sqlite3.c	9626;"	d	file:
VdbeOp	server/sqlite3.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	server/sqlite3.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	server/sqlite3.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	server/sqlite3.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	server/sqlite3.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	server/sqlite3.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	server/sqlite3.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	server/sqlite3.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VirtualNodeSuffix	server/serverimpl.hh	/^const char * const VirtualNodeSuffix[] = {$/;"	v
VtabCtx	server/sqlite3.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	server/sqlite3.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WALINDEX_HDR_SIZE	server/sqlite3.c	48406;"	d	file:
WALINDEX_LOCK_OFFSET	server/sqlite3.c	48404;"	d	file:
WALINDEX_LOCK_RESERVED	server/sqlite3.c	48405;"	d	file:
WALINDEX_MAX_VERSION	server/sqlite3.c	48299;"	d	file:
WALINDEX_PGSZ	server/sqlite3.c	48533;"	d	file:
WALTRACE	server/sqlite3.c	48280;"	d	file:
WALTRACE	server/sqlite3.c	48282;"	d	file:
WAL_ALL_BUT_WRITE	server/sqlite3.c	48306;"	d	file:
WAL_CKPT_LOCK	server/sqlite3.c	48307;"	d	file:
WAL_EXCLUSIVE_MODE	server/sqlite3.c	48470;"	d	file:
WAL_FRAME_HDRSIZE	server/sqlite3.c	48409;"	d	file:
WAL_HDRSIZE	server/sqlite3.c	48413;"	d	file:
WAL_HEAPMEMORY_MODE	server/sqlite3.c	48471;"	d	file:
WAL_MAGIC	server/sqlite3.c	48424;"	d	file:
WAL_MAX_VERSION	server/sqlite3.c	48298;"	d	file:
WAL_NORMAL_MODE	server/sqlite3.c	48469;"	d	file:
WAL_NREADER	server/sqlite3.c	48310;"	d	file:
WAL_RDONLY	server/sqlite3.c	48477;"	d	file:
WAL_RDWR	server/sqlite3.c	48476;"	d	file:
WAL_READ_LOCK	server/sqlite3.c	48309;"	d	file:
WAL_RECOVER_LOCK	server/sqlite3.c	48308;"	d	file:
WAL_RETRY	server/sqlite3.c	50052;"	d	file:
WAL_SAVEPOINT_NDATA	server/sqlite3.c	40720;"	d	file:
WAL_SHM_RDONLY	server/sqlite3.c	48478;"	d	file:
WAL_SYNC_TRANSACTIONS	server/sqlite3.c	40696;"	d	file:
WAL_WRITE_LOCK	server/sqlite3.c	48305;"	d	file:
WHERETRACE	server/sqlite3.c	113121;"	d	file:
WHERETRACE	server/sqlite3.c	113124;"	d	file:
WHERETRACE_ENABLED	server/sqlite3.c	113122;"	d	file:
WHERE_AND_ONLY	server/sqlite3.c	11753;"	d	file:
WHERE_AUTO_INDEX	server/sqlite3.c	113554;"	d	file:
WHERE_BOTH_LIMIT	server/sqlite3.c	113546;"	d	file:
WHERE_BTM_LIMIT	server/sqlite3.c	113545;"	d	file:
WHERE_COLUMN_EQ	server/sqlite3.c	113539;"	d	file:
WHERE_COLUMN_IN	server/sqlite3.c	113541;"	d	file:
WHERE_COLUMN_NULL	server/sqlite3.c	113542;"	d	file:
WHERE_COLUMN_RANGE	server/sqlite3.c	113540;"	d	file:
WHERE_CONSTRAINT	server/sqlite3.c	113543;"	d	file:
WHERE_DISTINCTBY	server/sqlite3.c	11755;"	d	file:
WHERE_DISTINCT_NOOP	server/sqlite3.c	11762;"	d	file:
WHERE_DISTINCT_ORDERED	server/sqlite3.c	11764;"	d	file:
WHERE_DISTINCT_UNIQUE	server/sqlite3.c	11763;"	d	file:
WHERE_DISTINCT_UNORDERED	server/sqlite3.c	11765;"	d	file:
WHERE_DUPLICATES_OK	server/sqlite3.c	11749;"	d	file:
WHERE_FORCE_TABLE	server/sqlite3.c	11751;"	d	file:
WHERE_GROUPBY	server/sqlite3.c	11754;"	d	file:
WHERE_IDX_ONLY	server/sqlite3.c	113547;"	d	file:
WHERE_INDEXED	server/sqlite3.c	113549;"	d	file:
WHERE_IN_ABLE	server/sqlite3.c	113551;"	d	file:
WHERE_IPK	server/sqlite3.c	113548;"	d	file:
WHERE_LOOP_XFER_SZ	server/sqlite3.c	113227;"	d	file:
WHERE_MULTI_OR	server/sqlite3.c	113553;"	d	file:
WHERE_OMIT_OPEN_CLOSE	server/sqlite3.c	11750;"	d	file:
WHERE_ONEPASS_DESIRED	server/sqlite3.c	11748;"	d	file:
WHERE_ONEROW	server/sqlite3.c	113552;"	d	file:
WHERE_ONETABLE_ONLY	server/sqlite3.c	11752;"	d	file:
WHERE_ORDERBY_MAX	server/sqlite3.c	11747;"	d	file:
WHERE_ORDERBY_MIN	server/sqlite3.c	11746;"	d	file:
WHERE_ORDERBY_NORMAL	server/sqlite3.c	11745;"	d	file:
WHERE_REOPEN_IDX	server/sqlite3.c	11758;"	d	file:
WHERE_SKIPSCAN	server/sqlite3.c	113555;"	d	file:
WHERE_SORTBYGROUP	server/sqlite3.c	11757;"	d	file:
WHERE_TOP_LIMIT	server/sqlite3.c	113544;"	d	file:
WHERE_UNQ_WANTED	server/sqlite3.c	113556;"	d	file:
WHERE_VIRTUALTABLE	server/sqlite3.c	113550;"	d	file:
WHERE_WANT_DISTINCT	server/sqlite3.c	11756;"	d	file:
WINCE_DELETION_ATTEMPTS	server/sqlite3.c	34909;"	d	file:
WINFILE_PERSIST_WAL	server/sqlite3.c	32746;"	d	file:
WINFILE_PSOW	server/sqlite3.c	32747;"	d	file:
WINFILE_RDONLY	server/sqlite3.c	32745;"	d	file:
WINMEM_MAGIC1	server/sqlite3.c	32837;"	d	file:
WINMEM_MAGIC2	server/sqlite3.c	32838;"	d	file:
WIN_SHM_BASE	server/sqlite3.c	35876;"	d	file:
WIN_SHM_DMS	server/sqlite3.c	35877;"	d	file:
WORDS_BIGENDIAN	xdrpp/config.h	71;"	d
WORDS_BIGENDIAN	xdrpp/xdrpp/endian.h	16;"	d
WO_ALL	server/sqlite3.c	113531;"	d	file:
WO_AND	server/sqlite3.c	113527;"	d	file:
WO_EQ	server/sqlite3.c	113519;"	d	file:
WO_EQUIV	server/sqlite3.c	113528;"	d	file:
WO_GE	server/sqlite3.c	113523;"	d	file:
WO_GT	server/sqlite3.c	113522;"	d	file:
WO_IN	server/sqlite3.c	113518;"	d	file:
WO_ISNULL	server/sqlite3.c	113525;"	d	file:
WO_LE	server/sqlite3.c	113521;"	d	file:
WO_LT	server/sqlite3.c	113520;"	d	file:
WO_MATCH	server/sqlite3.c	113524;"	d	file:
WO_NOOP	server/sqlite3.c	113529;"	d	file:
WO_OR	server/sqlite3.c	113526;"	d	file:
WO_SINGLE	server/sqlite3.c	113532;"	d	file:
WRC_Abort	server/sqlite3.c	12434;"	d	file:
WRC_Continue	server/sqlite3.c	12432;"	d	file:
WRC_Prune	server/sqlite3.c	12433;"	d	file:
WRITE_LOCK	server/sqlite3.c	51466;"	d	file:
WRITE_UTF16BE	server/sqlite3.c	22282;"	d	file:
WRITE_UTF16LE	server/sqlite3.c	22270;"	d	file:
WRITE_UTF8	server/sqlite3.c	146676;"	d	file:
WRITE_UTF8	server/sqlite3.c	22250;"	d	file:
Wal	server/sqlite3.c	/^struct Wal {$/;"	s	file:
Wal	server/sqlite3.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	server/sqlite3.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	server/sqlite3.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	server/sqlite3.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	server/sqlite3.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	server/sqlite3.c	/^struct WalIterator {$/;"	s	file:
WalIterator	server/sqlite3.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	server/sqlite3.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	server/sqlite3.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	server/sqlite3.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	server/sqlite3.c	/^struct Walker {$/;"	s	file:
Walker	server/sqlite3.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	server/sqlite3.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	server/sqlite3.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	server/sqlite3.c	/^struct WhereClause {$/;"	s	file:
WhereClause	server/sqlite3.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereInfo	server/sqlite3.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	server/sqlite3.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	server/sqlite3.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	server/sqlite3.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereLoop	server/sqlite3.c	/^struct WhereLoop {$/;"	s	file:
WhereLoop	server/sqlite3.c	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop	file:
WhereLoopBuilder	server/sqlite3.c	/^struct WhereLoopBuilder {$/;"	s	file:
WhereLoopBuilder	server/sqlite3.c	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder	file:
WhereMaskSet	server/sqlite3.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	server/sqlite3.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrCost	server/sqlite3.c	/^struct WhereOrCost {$/;"	s	file:
WhereOrCost	server/sqlite3.c	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost	file:
WhereOrInfo	server/sqlite3.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	server/sqlite3.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WhereOrSet	server/sqlite3.c	/^struct WhereOrSet {$/;"	s	file:
WhereOrSet	server/sqlite3.c	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet	file:
WherePath	server/sqlite3.c	/^struct WherePath {$/;"	s	file:
WherePath	server/sqlite3.c	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath	file:
WhereScan	server/sqlite3.c	/^struct WhereScan {$/;"	s	file:
WhereScan	server/sqlite3.c	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan	file:
WhereTerm	server/sqlite3.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	server/sqlite3.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
With	server/sqlite3.c	/^struct With {$/;"	s	file:
With	server/sqlite3.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
Write	xdrpp/xdrpp/pollset.h	/^    Write = kWriteFlag,		$/;"	e	enum:xdr::pollset::op_t
WriteOnce	xdrpp/xdrpp/pollset.h	/^    WriteOnce = kWriteFlag | kOnceFlag$/;"	e	enum:xdr::pollset::op_t
XDRC	Makefile	/^XDRC = $(shell $(PKGCONFIG) --variable=xdrc xdrpp)$/;"	m
XDRC	xdrpp/Makefile	/^XDRC = $(top_builddir)\/xdrc\/xdrc$(EXEEXT)$/;"	m
XDR_MAX_LEN	xdrpp/xdrpp/types.h	/^static constexpr uint32_t XDR_MAX_LEN = 0xfffffffc;$/;"	m	namespace:xdr
Y	server/sqlite3.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YACC	xdrpp/Makefile	/^YACC = bison -y$/;"	m
YACCCOMPILE	xdrpp/Makefile	/^YACCCOMPILE = $(YACC) $(AM_YFLAGS) $(YFLAGS)$/;"	m
YLWRAP	xdrpp/Makefile	/^YLWRAP = $(top_srcdir)\/ylwrap$/;"	m
YYABORT	xdrpp/xdrc/parse.cc	709;"	d	file:
YYACCEPT	xdrpp/xdrc/parse.cc	708;"	d	file:
YYACTIONTYPE	server/sqlite3.c	120328;"	d	file:
YYBACKUP	xdrpp/xdrc/parse.cc	715;"	d	file:
YYBISON	xdrpp/xdrc/parse.cc	44;"	d	file:
YYBISON_VERSION	xdrpp/xdrc/parse.cc	47;"	d	file:
YYCASE_	xdrpp/xdrc/parse.cc	1056;"	d	file:
YYCASE_	xdrpp/xdrc/parse.cc	1066;"	d	file:
YYCODETYPE	server/sqlite3.c	120326;"	d	file:
YYCOPY	xdrpp/xdrc/parse.cc	397;"	d	file:
YYCOPY	xdrpp/xdrc/parse.cc	400;"	d	file:
YYCOPY_NEEDED	xdrpp/xdrc/parse.cc	372;"	d	file:
YYDEBUG	xdrpp/xdrc/parse.cc	99;"	d	file:
YYDEBUG	xdrpp/xdrc/parse.hh	37;"	d
YYDPRINTF	xdrpp/xdrc/parse.cc	746;"	d	file:
YYDPRINTF	xdrpp/xdrc/parse.cc	861;"	d	file:
YYEMPTY	xdrpp/xdrc/parse.cc	705;"	d	file:
YYEOF	xdrpp/xdrc/parse.cc	706;"	d	file:
YYERRCODE	xdrpp/xdrc/parse.cc	734;"	d	file:
YYERROR	xdrpp/xdrc/parse.cc	710;"	d	file:
YYERROR_VERBOSE	xdrpp/xdrc/parse.cc	87;"	d	file:
YYERROR_VERBOSE	xdrpp/xdrc/parse.cc	88;"	d	file:
YYERROR_VERBOSE	xdrpp/xdrc/parse.cc	90;"	d	file:
YYFALLBACK	server/sqlite3.c	120359;"	d	file:
YYFINAL	xdrpp/xdrc/parse.cc	413;"	d	file:
YYFPRINTF	xdrpp/xdrc/parse.cc	743;"	d	file:
YYFREE	xdrpp/xdrc/parse.cc	343;"	d	file:
YYINITDEPTH	xdrpp/xdrc/parse.cc	870;"	d	file:
YYLAST	xdrpp/xdrc/parse.cc	415;"	d	file:
YYMALLOC	xdrpp/xdrc/parse.cc	337;"	d	file:
YYMAXDEPTH	xdrpp/xdrc/parse.cc	881;"	d	file:
YYMAXUTOK	xdrpp/xdrc/parse.cc	429;"	d	file:
YYMINORTYPE	server/sqlite3.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon22	file:
YYNNTS	xdrpp/xdrc/parse.cc	420;"	d	file:
YYNOCODE	server/sqlite3.c	120327;"	d	file:
YYNOERRORRECOVERY	server/sqlite3.c	120163;"	d	file:
YYNRULE	server/sqlite3.c	120358;"	d	file:
YYNRULES	xdrpp/xdrc/parse.cc	422;"	d	file:
YYNSTATE	server/sqlite3.c	120357;"	d	file:
YYNSTATES	xdrpp/xdrc/parse.cc	424;"	d	file:
YYNTOKENS	xdrpp/xdrc/parse.cc	418;"	d	file:
YYPACT_NINF	xdrpp/xdrc/parse.cc	519;"	d	file:
YYPOPSTACK	xdrpp/xdrc/parse.cc	1181;"	d	file:
YYPULL	xdrpp/xdrc/parse.cc	59;"	d	file:
YYPURE	xdrpp/xdrc/parse.cc	53;"	d	file:
YYPUSH	xdrpp/xdrc/parse.cc	56;"	d	file:
YYRECOVERING	xdrpp/xdrc/parse.cc	713;"	d	file:
YYSIZE_MAXIMUM	xdrpp/xdrc/parse.cc	216;"	d	file:
YYSIZE_T	xdrpp/xdrc/parse.cc	205;"	d	file:
YYSIZE_T	xdrpp/xdrc/parse.cc	207;"	d	file:
YYSIZE_T	xdrpp/xdrc/parse.cc	210;"	d	file:
YYSIZE_T	xdrpp/xdrc/parse.cc	212;"	d	file:
YYSKELETON_NAME	xdrpp/xdrc/parse.cc	50;"	d	file:
YYSTACKDEPTH	server/sqlite3.c	120351;"	d	file:
YYSTACK_ALLOC	xdrpp/xdrc/parse.cc	291;"	d	file:
YYSTACK_ALLOC	xdrpp/xdrc/parse.cc	295;"	d	file:
YYSTACK_ALLOC	xdrpp/xdrc/parse.cc	300;"	d	file:
YYSTACK_ALLOC	xdrpp/xdrc/parse.cc	323;"	d	file:
YYSTACK_ALLOC_MAXIMUM	xdrpp/xdrc/parse.cc	320;"	d	file:
YYSTACK_ALLOC_MAXIMUM	xdrpp/xdrc/parse.cc	326;"	d	file:
YYSTACK_BYTES	xdrpp/xdrc/parse.cc	368;"	d	file:
YYSTACK_FREE	xdrpp/xdrc/parse.cc	314;"	d	file:
YYSTACK_FREE	xdrpp/xdrc/parse.cc	324;"	d	file:
YYSTACK_GAP_MAXIMUM	xdrpp/xdrc/parse.cc	364;"	d	file:
YYSTACK_RELOCATE	xdrpp/xdrc/parse.cc	379;"	d	file:
YYSTATE	xdrpp/xdrc/scan.cc	132;"	d	file:
YYSTYPE	xdrpp/xdrc/xdrc_internal.h	/^  YYSTYPE() : _base() {}$/;"	f	struct:YYSTYPE
YYSTYPE	xdrpp/xdrc/xdrc_internal.h	/^  YYSTYPE(YYSTYPE &&st)$/;"	f	struct:YYSTYPE
YYSTYPE	xdrpp/xdrc/xdrc_internal.h	/^  YYSTYPE(const YYSTYPE &st)$/;"	f	struct:YYSTYPE
YYSTYPE	xdrpp/xdrc/xdrc_internal.h	/^struct YYSTYPE {$/;"	s
YYSTYPE	xdrpp/xdrc/xdrc_internal.h	184;"	d
YYTABLES_NAME	xdrpp/xdrc/scan.cc	2057;"	d	file:
YYTABLE_NINF	xdrpp/xdrc/parse.cc	524;"	d	file:
YYTERROR	xdrpp/xdrc/parse.cc	733;"	d	file:
YYTEXT_POINTER	xdrpp/config.h	81;"	d
YYTOKENTYPE	xdrpp/xdrc/parse.cc	107;"	d	file:
YYTOKENTYPE	xdrpp/xdrc/parse.hh	45;"	d
YYTRANSLATE	xdrpp/xdrc/parse.cc	431;"	d	file:
YYUNDEFTOK	xdrpp/xdrc/parse.cc	428;"	d	file:
YYUSE	xdrpp/xdrc/parse.cc	259;"	d	file:
YYUSE	xdrpp/xdrc/parse.cc	261;"	d	file:
YYWILDCARD	server/sqlite3.c	120329;"	d	file:
YY_	xdrpp/xdrc/parse.cc	222;"	d	file:
YY_	xdrpp/xdrc/parse.cc	226;"	d	file:
YY_ACCEPT_ACTION	server/sqlite3.c	120361;"	d	file:
YY_ACTTAB_COUNT	server/sqlite3.c	120428;"	d	file:
YY_ATTRIBUTE	xdrpp/xdrc/parse.cc	234;"	d	file:
YY_ATTRIBUTE	xdrpp/xdrc/parse.cc	236;"	d	file:
YY_ATTRIBUTE_PURE	xdrpp/xdrc/parse.cc	241;"	d	file:
YY_ATTRIBUTE_UNUSED	xdrpp/xdrc/parse.cc	245;"	d	file:
YY_AT_BOL	xdrpp/xdrc/scan.cc	332;"	d	file:
YY_BREAK	xdrpp/xdrc/scan.cc	794;"	d	file:
YY_BUFFER_EOF_PENDING	xdrpp/xdrc/scan.cc	248;"	d	file:
YY_BUFFER_NEW	xdrpp/xdrc/scan.cc	236;"	d	file:
YY_BUFFER_NORMAL	xdrpp/xdrc/scan.cc	237;"	d	file:
YY_BUFFER_STATE	xdrpp/xdrc/scan.cc	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	xdrpp/xdrc/scan.cc	144;"	d	file:
YY_CHAR	xdrpp/xdrc/scan.cc	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	xdrpp/xdrc/scan.cc	264;"	d	file:
YY_CURRENT_BUFFER_LVALUE	xdrpp/xdrc/scan.cc	271;"	d	file:
YY_DECL	xdrpp/xdrc/scan.cc	782;"	d	file:
YY_DECL_IS_OURS	xdrpp/xdrc/scan.cc	778;"	d	file:
YY_DO_BEFORE_ACTION	xdrpp/xdrc/scan.cc	360;"	d	file:
YY_END_OF_BUFFER	xdrpp/xdrc/scan.cc	368;"	d	file:
YY_END_OF_BUFFER_CHAR	xdrpp/xdrc/scan.cc	140;"	d	file:
YY_ERROR_ACTION	server/sqlite3.c	120362;"	d	file:
YY_EXIT_FAILURE	xdrpp/xdrc/scan.cc	1855;"	d	file:
YY_EXTRA_TYPE	xdrpp/xdrc/scan.cc	641;"	d	file:
YY_FATAL_ERROR	xdrpp/xdrc/scan.cc	769;"	d	file:
YY_FLEX_MAJOR_VERSION	xdrpp/xdrc/scan.cc	9;"	d	file:
YY_FLEX_MINOR_VERSION	xdrpp/xdrc/scan.cc	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	xdrpp/xdrc/scan.cc	11;"	d	file:
YY_FLUSH_BUFFER	xdrpp/xdrc/scan.cc	300;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	xdrpp/xdrc/parse.cc	266;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	xdrpp/xdrc/parse.cc	276;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	xdrpp/xdrc/parse.cc	270;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	xdrpp/xdrc/parse.cc	277;"	d	file:
YY_INITIAL_VALUE	xdrpp/xdrc/parse.cc	273;"	d	file:
YY_INITIAL_VALUE	xdrpp/xdrc/parse.cc	280;"	d	file:
YY_INPUT	xdrpp/xdrc/scan.cc	722;"	d	file:
YY_INT_ALIGNED	xdrpp/xdrc/scan.cc	4;"	d	file:
YY_LESS_LINENO	xdrpp/xdrc/scan.cc	169;"	d	file:
YY_LINENO_REWIND_TO	xdrpp/xdrc/scan.cc	170;"	d	file:
YY_LOCATION_PRINT	xdrpp/xdrc/parse.cc	754;"	d	file:
YY_MORE_ADJ	xdrpp/xdrc/scan.cc	605;"	d	file:
YY_NEW_FILE	xdrpp/xdrc/scan.cc	138;"	d	file:
YY_NO_ACTION	server/sqlite3.c	120360;"	d	file:
YY_NO_INPUT	xdrpp/xdrc/scan.cc	613;"	d	file:
YY_NULL	xdrpp/xdrc/scan.cc	112;"	d	file:
YY_NULLPTR	xdrpp/xdrc/parse.cc	79;"	d	file:
YY_NULLPTR	xdrpp/xdrc/parse.cc	81;"	d	file:
YY_NUM_RULES	xdrpp/xdrc/scan.cc	367;"	d	file:
YY_READ_BUF_SIZE	xdrpp/xdrc/scan.cc	707;"	d	file:
YY_REDUCE_COUNT	server/sqlite3.c	120783;"	d	file:
YY_REDUCE_MAX	server/sqlite3.c	120785;"	d	file:
YY_REDUCE_MIN	server/sqlite3.c	120784;"	d	file:
YY_REDUCE_PRINT	xdrpp/xdrc/parse.cc	851;"	d	file:
YY_REDUCE_PRINT	xdrpp/xdrc/parse.cc	864;"	d	file:
YY_REDUCE_USE_DFLT	server/sqlite3.c	120782;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	xdrpp/xdrc/scan.cc	606;"	d	file:
YY_RULE_SETUP	xdrpp/xdrc/scan.cc	797;"	d	file:
YY_SC_TO_UI	xdrpp/xdrc/scan.cc	119;"	d	file:
YY_SHIFT_COUNT	server/sqlite3.c	120734;"	d	file:
YY_SHIFT_MAX	server/sqlite3.c	120736;"	d	file:
YY_SHIFT_MIN	server/sqlite3.c	120735;"	d	file:
YY_SHIFT_USE_DFLT	server/sqlite3.c	120733;"	d	file:
YY_SKIP_YYWRAP	xdrpp/xdrc/scan.cc	337;"	d	file:
YY_STACK_PRINT	xdrpp/xdrc/parse.cc	820;"	d	file:
YY_STACK_PRINT	xdrpp/xdrc/parse.cc	863;"	d	file:
YY_START	xdrpp/xdrc/scan.cc	131;"	d	file:
YY_START_STACK_INCR	xdrpp/xdrc/scan.cc	764;"	d	file:
YY_STATE_BUF_SIZE	xdrpp/xdrc/scan.cc	149;"	d	file:
YY_STATE_EOF	xdrpp/xdrc/scan.cc	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	xdrpp/xdrc/scan.cc	189;"	d	file:
YY_SYMBOL_PRINT	xdrpp/xdrc/parse.cc	758;"	d	file:
YY_SYMBOL_PRINT	xdrpp/xdrc/parse.cc	862;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	xdrpp/xdrc/scan.cc	152;"	d	file:
YY_TYPEDEF_YY_SIZE_T	xdrpp/xdrc/scan.cc	157;"	d	file:
YY_USER_ACTION	xdrpp/xdrc/scan.cc	789;"	d	file:
YY_USE_CONST	xdrpp/xdrc/scan.cc	100;"	d	file:
YY_USE_CONST	xdrpp/xdrc/scan.cc	93;"	d	file:
YY_YY_XDRC_PARSE_HH_INCLUDED	xdrpp/xdrc/parse.cc	96;"	d	file:
YY_YY_XDRC_PARSE_HH_INCLUDED	xdrpp/xdrc/parse.hh	34;"	d
_BSD_SOURCE	server/sqlite3.c	84;"	d	file:
_BTREE_H_	server/sqlite3.c	8943;"	d	file:
_FILE_OFFSET_BITS	server/sqlite3.c	73;"	d	file:
_FTS3_HASH_H_	server/sqlite3.c	129206;"	d	file:
_FTS3_TOKENIZER_H_	server/sqlite3.c	129044;"	d	file:
_FTSINT_H	server/sqlite3.c	129000;"	d	file:
_GNU_SOURCE	server/sqlite3.c	80;"	d	file:
_HWTIME_H_	server/sqlite3.c	19339;"	d	file:
_HWTIME_H_	server/sqlite3.c	24858;"	d	file:
_HWTIME_H_	server/sqlite3.c	32359;"	d	file:
_HWTIME_H_	server/sqlite3.c	69435;"	d	file:
_INIPARSE_H_	xdrpp/xdrpp/iniparse.h	33;"	d
_LARGEFILE_SOURCE	server/sqlite3.c	75;"	d	file:
_LARGE_FILE	server/sqlite3.c	71;"	d	file:
_Noreturn	xdrpp/xdrc/parse.cc	251;"	d	file:
_Noreturn	xdrpp/xdrc/parse.cc	253;"	d	file:
_OS_COMMON_H_	server/sqlite3.c	19290;"	d	file:
_OS_COMMON_H_	server/sqlite3.c	24809;"	d	file:
_OS_COMMON_H_	server/sqlite3.c	32310;"	d	file:
_OS_SETUP_H_	server/sqlite3.c	10101;"	d	file:
_OS_WIN_H_	server/sqlite3.c	19498;"	d	file:
_PAGER_H_	server/sqlite3.c	9690;"	d	file:
_SHM_RDLCK	server/sqlite3.c	35883;"	d	file:
_SHM_UNLCK	server/sqlite3.c	35882;"	d	file:
_SHM_WRLCK	server/sqlite3.c	35884;"	d	file:
_SQLITE3EXT_H_	server/sqlite3.c	99462;"	d	file:
_SQLITE3RTREE_H_	server/sqlite3.c	7569;"	d	file:
_SQLITE3RTREE_H_	server/sqlite3.h	7445;"	d
_SQLITE3_H_	server/sqlite3.c	158;"	d	file:
_SQLITE3_H_	server/sqlite3.h	34;"	d
_SQLITEINT_H_	server/sqlite3.c	44;"	d	file:
_SQLITE_HASH_H_	server/sqlite3.c	8176;"	d	file:
_SQLITE_OS_C_	server/sqlite3.c	15907;"	d	file:
_SQLITE_OS_C_	server/sqlite3.c	15908;"	d	file:
_SQLITE_OS_H_	server/sqlite3.c	10077;"	d	file:
_SQLITE_VDBE_H_	server/sqlite3.c	9206;"	d	file:
_UNION_H_	xdrpp/xdrc/union.h	4;"	d
_USE_32BIT_TIME_T	server/sqlite3.c	116;"	d	file:
_VDBEINT_H_	server/sqlite3.c	14032;"	d	file:
_WAL_H_	server/sqlite3.c	40690;"	d	file:
_XDRC_ENDIAN_H_HEADER_INCLUDED_	xdrpp/xdrpp/endian.h	7;"	d
_XDRC_TYPES_H_HEADER_INCLUDED_	xdrpp/xdrpp/types.h	6;"	d
_XDRPP_CEREAL_H_HEADER_INCLUDED_	xdrpp/xdrpp/cereal.h	19;"	d
_XDRPP_CLEAR_H_HEADER_INCLUDED_	xdrpp/xdrpp/clear.h	6;"	d
_XDRPP_EXCEPTION_H_HEADER_INCLUDED_	xdrpp/xdrpp/exception.h	8;"	d
_XDRPP_MARSHAL_H_HEADER_INCLUDED_	xdrpp/xdrpp/marshal.h	8;"	d
_XDRPP_MESSAGE_H_HEADER_INCLUDED_	xdrpp/xdrpp/message.h	4;"	d
_XDRPP_MSGSOCK_H_INCLUDED_	xdrpp/xdrpp/msgsock.h	7;"	d
_XDRPP_POLLSET_H_INCLUDED_	xdrpp/xdrpp/pollset.h	4;"	d
_XDRPP_PRINT_H_HEADER_INCLUDED_	xdrpp/xdrpp/printer.h	6;"	d
_XDRPP_SERVER_H_HEADER_INCLUDED_	xdrpp/xdrpp/server.h	6;"	d
_XDRPP_SOCKET_H_HEADER_INCLUDED_	xdrpp/xdrpp/socket.h	4;"	d
_XDRPP_SRPC_H_HEADER_INCLUDED_	xdrpp/xdrpp/srpc.h	4;"	d
_XOPEN_SOURCE	server/sqlite3.c	8042;"	d	file:
__CLIENT_H__	include/client.h	3;"	d
__LRU_CACHE_H__	cacheserver/lrucache.hh	2;"	d
__SERVERDB_H__	cacheserver/serverdb.h	3;"	d
__SERVERDB_H__	server/serverdb.h	3;"	d
__SERVER_HELPERS_HH_INCLUDED__	include/helpers.hh	2;"	d
__SERVER_HTTPCLIENT_HH_INCLUDED__	include/httpclient.hh	2;"	d
__SQLSTMT_H__	server/sqlstmt.h	3;"	d
__STDC_LIMIT_MACROS	xdrpp/xdrc/scan.cc	39;"	d	file:
__XDR_INCLUDE_SERVER_HH_INCLUDED__	include/server.hh	6;"	d
__XDR_SERVER_CACHESERVER_HH_INCLUDED__	cacheserver/cacheserverimpl.hh	6;"	d
__XDR_SERVER_SERVERIMPL_HH_INCLUDED__	server/serverimpl.hh	6;"	d
__declspec	server/sqlite3.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
__declspec	server/sqlite3.c	/^__declspec(dllexport)$/;"	f
_base	xdrpp/xdrc/xdrc_internal.h	/^    union_entry_base _base;$/;"	m	union:YYSTYPE::__anon32
_base	xdrpp/xdrc/xdrc_internal.h	/^    union_entry_base _base;$/;"	m	union:rpc_decl::__anon30
_base	xdrpp/xdrc/xdrc_internal.h	/^    union_entry_base _base;$/;"	m	union:rpc_sym::__anon31
_cacheStore	cacheserver/cacheserverimpl.hh	/^  map<uint128_t, vector<uint8_t>> _cacheStore;$/;"	m	class:cache_api_v1_server
_currServers	server/serverimpl.hh	/^  map<string, uint128_t> _currServers;$/;"	m	class:api_v1_server
_fts3ht	server/sqlite3.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_host	include/httpclient.hh	/^  string _host;$/;"	m	class:httpclient
_ht	server/sqlite3.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_initialized	include/httpclient.hh	/^  bool _initialized;$/;"	m	class:httpclient
_param	server/sqlstmt.h	/^  SQLStmt &_param(int i, H&& h, T&&... t) {$/;"	f	class:SQLStmt
_param	server/sqlstmt.h	/^  SQLStmt &_param(int) { return *this; }$/;"	f	class:SQLStmt
_ring	server/serverimpl.hh	/^  Hashring _ring;$/;"	m	class:api_v1_server
_socket	include/httpclient.hh	/^  int _socket;$/;"	m	class:httpclient
_sqliteZone_	server/sqlite3.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
_tparm_helper	server/sqlstmt.h	/^  template<size_t N> struct _tparm_helper {$/;"	s	class:SQLStmt
_tparm_helper	server/sqlstmt.h	/^template<> struct SQLStmt::_tparm_helper<0> {$/;"	s	class:SQLStmt
a	server/sqlite3.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	server/sqlite3.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:
a	server/sqlite3.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	server/sqlite3.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:
a	server/sqlite3.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	server/sqlite3.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:
a	server/sqlite3.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	server/sqlite3.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	server/sqlite3.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	server/sqlite3.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:
a	server/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	server/sqlite3.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAll	server/sqlite3.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	server/sqlite3.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:
aAvgEq	server/sqlite3.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:
aBest	server/sqlite3.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:
aBitmap	server/sqlite3.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon13	file:
aBuffer	server/sqlite3.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aBuffer	server/sqlite3.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:
aBuffer	server/sqlite3.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:
aCellIdx	server/sqlite3.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	server/sqlite3.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	server/sqlite3.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	server/sqlite3.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	server/sqlite3.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	server/sqlite3.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	server/sqlite3.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColName	server/sqlite3.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	server/sqlite3.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	server/sqlite3.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	server/sqlite3.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	server/sqlite3.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	server/sqlite3.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraint	server/sqlite3.h	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint
aConstraintUsage	server/sqlite3.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aConstraintUsage	server/sqlite3.h	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage
aCoord	server/sqlite3.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:
aCoord	server/sqlite3.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aCoord	server/sqlite3.h	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info
aCounter	server/sqlite3.c	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	server/sqlite3.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	server/sqlite3.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	server/sqlite3.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	server/sqlite3.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	server/sqlite3.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDataEnd	server/sqlite3.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDb	server/sqlite3.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	server/sqlite3.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	server/sqlite3.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	server/sqlite3.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	server/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	server/sqlite3.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	server/sqlite3.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:
aEntry	server/sqlite3.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aEquiv	server/sqlite3.c	/^  int aEquiv[22];            \/* Cursor,Column pairs for equivalence classes *\/$/;"	m	struct:WhereScan	file:
aExt	server/sqlite3.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	server/sqlite3.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFile	server/sqlite3.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:
aFrameCksum	server/sqlite3.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	server/sqlite3.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	server/sqlite3.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	server/sqlite3.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	server/sqlite3.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon13	file:
aHash	server/sqlite3.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	server/sqlite3.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	typeref:struct:WhereLevel::__anon16::__anon17::InLoop	file:
aIndent	server/sqlite3.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:
aIndex	server/sqlite3.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	server/sqlite3.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aInput	server/sqlite3.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:
aJournalMagic	server/sqlite3.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	server/sqlite3.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:
aLTerm	server/sqlite3.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:
aLTermSpace	server/sqlite3.c	/^  WhereTerm *aLTermSpace[4];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:
aLabel	server/sqlite3.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:
aLimit	server/sqlite3.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aLoop	server/sqlite3.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:
aMI	server/sqlite3.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:
aMap	server/sqlite3.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:
aMatchinfo	server/sqlite3.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	server/sqlite3.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	server/sqlite3.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	server/sqlite3.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	server/sqlite3.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aMemory	server/sqlite3.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:
aModule	server/sqlite3.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNode	server/sqlite3.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:
aNode	server/sqlite3.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aNode	server/sqlite3.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:
aNodeWriter	server/sqlite3.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:
aOffset	server/sqlite3.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOnceFlag	server/sqlite3.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOnceFlag	server/sqlite3.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:
aOp	server/sqlite3.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	server/sqlite3.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	server/sqlite3.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	server/sqlite3.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOrderBy	server/sqlite3.h	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby
aOverflow	server/sqlite3.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aPadding	server/sqlite3.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aParam	server/sqlite3.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
aParam	server/sqlite3.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aParam	server/sqlite3.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aParam	server/sqlite3.h	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
aParam	server/sqlite3.h	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry
aPgRef	server/sqlite3.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:
aPgno	server/sqlite3.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	server/sqlite3.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPoint	server/sqlite3.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:
aPool	server/sqlite3.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPragmaNames	server/sqlite3.c	/^} aPragmaNames[] = {$/;"	v	typeref:struct:sPragmaNames	file:
aPrefix	server/sqlite3.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	server/sqlite3.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aReadr	server/sqlite3.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:
aRegion	server/sqlite3.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	server/sqlite3.c	/^  const u8 *aRow;       \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aRowid	server/sqlite3.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon15	file:
aSalt	server/sqlite3.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	server/sqlite3.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	server/sqlite3.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aSegment	server/sqlite3.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	server/sqlite3.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	server/sqlite3.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aSortOrder	server/sqlite3.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:
aStat	server/sqlite3.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:
aStat	server/sqlite3.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	server/sqlite3.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	server/sqlite3.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	server/sqlite3.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:
aSyscall	server/sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	server/sqlite3.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	server/sqlite3.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTask	server/sqlite3.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:
aTempReg	server/sqlite3.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	server/sqlite3.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	server/sqlite3.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTree	server/sqlite3.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:
aType	server/sqlite3.c	/^  u32 aType[1];         \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	server/sqlite3.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	server/sqlite3.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	server/sqlite3.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	server/sqlite3.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
abNotindexed	server/sqlite3.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:
absFunc	server/sqlite3.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
abs_builddir	xdrpp/Makefile	/^abs_builddir = \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp$/;"	m
abs_srcdir	xdrpp/Makefile	/^abs_srcdir = \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp$/;"	m
abs_top_builddir	xdrpp/Makefile	/^abs_top_builddir = \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp$/;"	m
abs_top_srcdir	xdrpp/Makefile	/^abs_top_srcdir = \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp$/;"	m
ac_ct_AR	xdrpp/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	xdrpp/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	xdrpp/Makefile	/^ac_ct_CXX = $/;"	m
ac_fn_c_try_compile	xdrpp/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	xdrpp/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	xdrpp/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_cxx_check_header_compile	xdrpp/configure	/^ac_fn_cxx_check_header_compile ()$/;"	f
ac_fn_cxx_try_compile	xdrpp/configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	xdrpp/configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_run	xdrpp/configure	/^ac_fn_cxx_try_run ()$/;"	f
accError	server/sqlite3.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:
accept_	xdrpp/xdrpp/exception.h	/^    accept_stat accept_;$/;"	m	union:xdr::xdr_call_error::__anon33
accept_cb	xdrpp/xdrpp/server.cc	/^rpc_tcp_listener::accept_cb()$/;"	f	class:xdr::rpc_tcp_listener
accessPayload	server/sqlite3.c	/^static int accessPayload($/;"	f	file:
actionName	server/sqlite3.c	/^static const char *actionName(u8 action){$/;"	f	file:
activate	xdrpp/xdrpp/types.h	/^  T &activate() {$/;"	f	struct:xdr::pointer
add	xdrpp/xdrpp/iniparse.h	/^  IniGroup &add(const string &key, cb_t &&cb) {$/;"	f	struct:xdr::IniGroup
add	xdrpp/xdrpp/iniparse.h	/^  IniGroup &add(const string &key, const cb_t &cb) {$/;"	f	struct:xdr::IniGroup
add	xdrpp/xdrpp/iniparse.h	/^  add(const string &key, T &&valp, const string &key2, Rest...rest) {$/;"	f	struct:xdr::IniGroup
add	xdrpp/xdrpp/iniparse.h	/^  template<typename T> IniGroup &add(const string &key, T *valp) {$/;"	f	struct:xdr::IniGroup
addAggInfoColumn	server/sqlite3.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	server/sqlite3.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	server/sqlite3.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	server/sqlite3.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	server/sqlite3.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addToBlockedList	server/sqlite3.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	server/sqlite3.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	server/sqlite3.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	server/sqlite3.c	/^static void addWhereTerm($/;"	f	file:
addrBody	server/sqlite3.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:
addrBrk	server/sqlite3.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	server/sqlite3.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrCrTab	server/sqlite3.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:
addrFillSub	server/sqlite3.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	server/sqlite3.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	server/sqlite3.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:
addrNxt	server/sqlite3.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	server/sqlite3.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
addrSkip	server/sqlite3.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:
addrSkipPK	server/sqlite3.c	/^  int addrSkipPK;      \/* Address of instruction to skip PRIMARY KEY index *\/$/;"	m	struct:Parse	file:
addrSortIndex	server/sqlite3.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:
addrTnct	server/sqlite3.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:
addrinfo_to_string	xdrpp/xdrpp/socket.cc	/^addrinfo_to_string(const addrinfo *ai)$/;"	f	namespace:xdr
adjustStats	server/sqlite3.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affSdst	server/sqlite3.c	/^  char affSdst;        \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
affinity	server/sqlite3.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	server/sqlite3.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
afpCheckReservedLock	server/sqlite3.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	server/sqlite3.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	server/sqlite3.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	server/sqlite3.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	server/sqlite3.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	server/sqlite3.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	server/sqlite3.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	server/sqlite3.c	27373;"	d	file:
aggregate_context	server/sqlite3.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	server/sqlite3.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	server/sqlite3.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon1	file:
aiColumn	server/sqlite3.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiCurOnePass	server/sqlite3.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:
aiException	server/sqlite3.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:
aiFreelist	server/sqlite3.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	server/sqlite3.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	server/sqlite3.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	server/sqlite3.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowLogEst	server/sqlite3.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	server/sqlite3.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
aix_post_process_depfile	xdrpp/depcomp	/^aix_post_process_depfile ()$/;"	f
alarmArg	server/sqlite3.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	server/sqlite3.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	server/sqlite3.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	server/sqlite3.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allSpaces	server/sqlite3.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
alloc	xdrpp/xdrpp/marshal.cc	/^message_t::alloc(std::size_t size)$/;"	f	class:xdr::message_t
allocSpace	server/sqlite3.c	/^static void *allocSpace($/;"	f	file:
alloca	xdrpp/xdrc/parse.cc	298;"	d	file:
allocateBtreePage	server/sqlite3.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	server/sqlite3.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	server/sqlite3.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	server/sqlite3.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	server/sqlite3.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowedOp	server/sqlite3.c	/^static int allowedOp(int op){$/;"	f	file:
am__CONFIG_DISTCLEAN_FILES	xdrpp/Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	xdrpp/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ax_append_compile_flags.m4 \\$/;"	m
am__base_list	xdrpp/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	xdrpp/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	xdrpp/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	xdrpp/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	xdrpp/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	xdrpp/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	xdrpp/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__distuninstallcheck_listfiles	xdrpp/Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	xdrpp/Makefile	/^am__include = include$/;"	m
am__install_max	xdrpp/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	xdrpp/Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__is_gnu_make	xdrpp/Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	xdrpp/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	xdrpp/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	xdrpp/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	xdrpp/Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	xdrpp/Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	xdrpp/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	xdrpp/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	xdrpp/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__post_remove_distdir	xdrpp/Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	xdrpp/Makefile	/^am__quote = $/;"	m
am__remove_distdir	xdrpp/Makefile	/^am__remove_distdir = \\$/;"	m
am__strip_dir	xdrpp/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	xdrpp/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tar	xdrpp/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	xdrpp/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	xdrpp/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	xdrpp/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_AR_	xdrpp/Makefile	/^am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_AR_0	xdrpp/Makefile	/^am__v_AR_0 = @echo "  AR      " $@;$/;"	m
am__v_AR_1	xdrpp/Makefile	/^am__v_AR_1 = $/;"	m
am__v_CCLD_	xdrpp/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	xdrpp/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	xdrpp/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	xdrpp/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	xdrpp/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	xdrpp/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	xdrpp/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	xdrpp/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	xdrpp/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	xdrpp/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	xdrpp/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	xdrpp/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	xdrpp/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	xdrpp/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	xdrpp/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_LEX_	xdrpp/Makefile	/^am__v_LEX_ = $(am__v_LEX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_LEX_0	xdrpp/Makefile	/^am__v_LEX_0 = @echo "  LEX     " $@;$/;"	m
am__v_LEX_1	xdrpp/Makefile	/^am__v_LEX_1 = $/;"	m
am__v_P_	xdrpp/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	xdrpp/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	xdrpp/Makefile	/^am__v_P_1 = :$/;"	m
am__v_YACC_	xdrpp/Makefile	/^am__v_YACC_ = $(am__v_YACC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_YACC_0	xdrpp/Makefile	/^am__v_YACC_0 = @echo "  YACC    " $@;$/;"	m
am__v_YACC_1	xdrpp/Makefile	/^am__v_YACC_1 = $/;"	m
am__v_at_	xdrpp/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	xdrpp/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	xdrpp/Makefile	/^am__v_at_1 = $/;"	m
am__vpath_adj	xdrpp/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	xdrpp/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__yacc_c2h	xdrpp/Makefile	/^am__yacc_c2h = sed -e s\/cc$$\/hh\/ -e s\/cpp$$\/hpp\/ -e s\/cxx$$\/hxx\/ \\$/;"	m
am_tests_test_cereal_OBJECTS	xdrpp/Makefile	/^am_tests_test_cereal_OBJECTS = tests\/cereal.$(OBJEXT)$/;"	m
am_tests_test_listener_OBJECTS	xdrpp/Makefile	/^am_tests_test_listener_OBJECTS = tests\/listener.$(OBJEXT)$/;"	m
am_tests_test_marshal_OBJECTS	xdrpp/Makefile	/^am_tests_test_marshal_OBJECTS = tests\/marshal.$(OBJEXT)$/;"	m
am_tests_test_msgsock_OBJECTS	xdrpp/Makefile	/^am_tests_test_msgsock_OBJECTS = tests\/msgsock.$(OBJEXT)$/;"	m
am_tests_test_printer_OBJECTS	xdrpp/Makefile	/^am_tests_test_printer_OBJECTS = tests\/printer.$(OBJEXT)$/;"	m
am_tests_test_srpc_OBJECTS	xdrpp/Makefile	/^am_tests_test_srpc_OBJECTS = tests\/srpc.$(OBJEXT)$/;"	m
am_xdrc_xdrc_OBJECTS	xdrpp/Makefile	/^am_xdrc_xdrc_OBJECTS = xdrc\/xdrc.$(OBJEXT) xdrc\/gen_hh.$(OBJEXT) \\$/;"	m
am_xdrpp_libxdrpp_a_OBJECTS	xdrpp/Makefile	/^am_xdrpp_libxdrpp_a_OBJECTS = xdrpp\/iniparse.$(OBJEXT) \\$/;"	m
anDLt	server/sqlite3.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:
anDLt	server/sqlite3.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
anEq	server/sqlite3.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:
anEq	server/sqlite3.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
anLt	server/sqlite3.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:
anLt	server/sqlite3.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
anOutput	server/sqlite3.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anQueue	server/sqlite3.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:
anQueue	server/sqlite3.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
anQueue	server/sqlite3.h	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info
anStat	server/sqlite3.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	server/sqlite3.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	server/sqlite3.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	server/sqlite3.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	server/sqlite3.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	server/sqlite3.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	server/sqlite3.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	server/sqlite3.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	server/sqlite3.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	server/sqlite3.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apArg	server/sqlite3.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:
apCsr	server/sqlite3.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	server/sqlite3.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	server/sqlite3.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	server/sqlite3.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	server/sqlite3.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	server/sqlite3.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSegment	server/sqlite3.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apSub	server/sqlite3.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon13	file:
apSub	server/sqlite3.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	server/sqlite3.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVtabLock	server/sqlite3.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	server/sqlite3.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
apiOomError	server/sqlite3.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:
api_v1	include/server.hh	/^struct api_v1 {$/;"	s
api_v1_server	server/serverimpl.hh	/^class api_v1_server {$/;"	c
append	xdrpp/xdrpp/types.h	/^  void append(const T *elems, std::size_t n) {$/;"	f	struct:xdr::xvector
apply	xdrpp/xdrpp/cereal.h	/^  apply(Archive &ar, T &&t, const char *field) {$/;"	f	struct:xdr::detail::nvp_adapter
apply	xdrpp/xdrpp/cereal.h	/^  apply(Archive &ar, const xstring<N> &s, const char *field) {$/;"	f	struct:xdr::detail::nvp_adapter
apply	xdrpp/xdrpp/cereal.h	/^  apply(Archive &ar, xstring<N> &s, const char *field) {$/;"	f	struct:xdr::detail::nvp_adapter
apply	xdrpp/xdrpp/printer.h	/^  apply(Printer &p, T t, const char *field) {$/;"	f	struct:xdr::archive_adapter
apply	xdrpp/xdrpp/printer.h	/^  apply(Printer &p, const T &obj, const char *field) { p(field, obj); }$/;"	f	struct:xdr::archive_adapter
apply	xdrpp/xdrpp/printer.h	/^  static void apply(Printer &p, const opaque_array<N> &v, const char *field) {$/;"	f	struct:xdr::archive_adapter
apply	xdrpp/xdrpp/printer.h	/^  static void apply(Printer &p, const opaque_vec<N> &v, const char *field) {$/;"	f	struct:xdr::archive_adapter
apply	xdrpp/xdrpp/printer.h	/^  static void apply(Printer &p, const xstring<N> &s, const char *field) {$/;"	f	struct:xdr::archive_adapter
apply	xdrpp/xdrpp/types.h	/^  template<typename T> static void apply(Archive &ar, T &&t, const char *) {$/;"	f	struct:xdr::archive_adapter
applyAffinity	server/sqlite3.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	server/sqlite3.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:
approx	server/sqlite3.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
archive	xdrpp/xdrpp/types.h	/^archive(Archive &ar, T &&t, const char *name = nullptr)$/;"	f	namespace:xdr
archive_adapter	xdrpp/xdrpp/printer.h	/^template<> struct archive_adapter<detail::Printer> {$/;"	s	namespace:xdr
archive_adapter	xdrpp/xdrpp/types.h	/^template<typename Archive> struct archive_adapter {$/;"	s	namespace:xdr
arg	xdrpp/xdrc/xdrc_internal.h	/^  string arg;$/;"	m	struct:rpc_proc
argv	xdrpp/xdrpp/iniparse.cc	/^IniLine::argv() const$/;"	f	class:xdr::IniLine
argvIndex	server/sqlite3.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
argvIndex	server/sqlite3.h	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
as_fn_append	xdrpp/config.status	/^  as_fn_append ()$/;"	f
as_fn_append	xdrpp/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	xdrpp/config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	xdrpp/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	xdrpp/config.status	/^as_fn_error ()$/;"	f
as_fn_error	xdrpp/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	xdrpp/config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	xdrpp/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	xdrpp/config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	xdrpp/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	xdrpp/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	xdrpp/config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	xdrpp/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	xdrpp/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	xdrpp/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	xdrpp/config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	xdrpp/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	xdrpp/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	xdrpp/config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	xdrpp/configure	/^as_fn_unset ()$/;"	f
assemblePage	server/sqlite3.c	/^static void assemblePage($/;"	f	file:
assertCellInfo	server/sqlite3.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	server/sqlite3.c	55894;"	d	file:
assertMutexHeld	server/sqlite3.c	128389;"	d	file:
assertParentIndex	server/sqlite3.c	56458;"	d	file:
assertTruncateConstraint	server/sqlite3.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	server/sqlite3.c	44595;"	d	file:
assertTruncateConstraintCb	server/sqlite3.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	server/sqlite3.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
assign	xdrpp/xdrc/union.h	/^  template<typename TT> union_entry &assign(TT &&tt) {$/;"	f	class:union_entry
async	xdrpp/xdrpp/pollset.h	/^  template<typename Work, typename CB> void async(Work &&work, CB &&cb) {$/;"	f	class:xdr::pollset_plus::wake_type
async_cbs_	xdrpp/xdrpp/pollset.h	/^  std::vector<cb_t> async_cbs_;$/;"	m	class:xdr::pollset_plus::wake_type
async_cbs_lock_	xdrpp/xdrpp/pollset.h	/^  std::mutex async_cbs_lock_;$/;"	m	class:xdr::pollset_plus::wake_type
async_task	xdrpp/xdrpp/pollset.h	/^  template<typename R> struct async_task {$/;"	s	class:xdr::pollset_plus::wake_type
atEOF	server/sqlite3.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:
attachBackupObject	server/sqlite3.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	server/sqlite3.c	/^static void attachFunc($/;"	f	file:
auth	server/sqlite3.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:
authLevel	server/sqlite3.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:
auth_	xdrpp/xdrpp/exception.h	/^    auth_stat auth_;$/;"	m	union:xdr::xdr_call_error::__anon33
autoCommit	server/sqlite3.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	server/sqlite3.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	server/sqlite3.c	97581;"	d	file:
autoIncStep	server/sqlite3.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	server/sqlite3.c	97582;"	d	file:
autoVacuum	server/sqlite3.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	server/sqlite3.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
auto_extension	server/sqlite3.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
autolockIoFinder	server/sqlite3.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	server/sqlite3.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	server/sqlite3.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	server/sqlite3.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	server/sqlite3.c	/^  char **azColl;           \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	server/sqlite3.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	server/sqlite3.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	server/sqlite3.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	server/sqlite3.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	server/sqlite3.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	server/sqlite3.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:
azVar	server/sqlite3.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
b	server/sqlite3.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bConstraint	server/sqlite3.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bCoreMutex	server/sqlite3.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeferred	server/sqlite3.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDesc	server/sqlite3.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	server/sqlite3.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	server/sqlite3.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bDoTruncate	server/sqlite3.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:
bDone	server/sqlite3.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:
bEnabled	server/sqlite3.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bEof	server/sqlite3.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:
bEof	server/sqlite3.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bExclusive	server/sqlite3.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFirst	server/sqlite3.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFreeList	server/sqlite3.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFreeWith	server/sqlite3.c	/^  u8 bFreeWith;             \/* True if pWith should be freed with parser *\/$/;"	m	struct:Parse	file:
bFts4	server/sqlite3.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFts4	server/sqlite3.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:
bFullMutex	server/sqlite3.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bHasDocsize	server/sqlite3.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	server/sqlite3.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:
bIgnore	server/sqlite3.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:
bIgnoreSavepoint	server/sqlite3.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:
bIncr	server/sqlite3.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bIsReader	server/sqlite3.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:
bLocaltimeFault	server/sqlite3.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	server/sqlite3.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bLookup	server/sqlite3.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bMalloced	server/sqlite3.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	server/sqlite3.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bNoIncrDoclist	server/sqlite3.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:
bNoLeafData	server/sqlite3.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:
bNot	server/sqlite3.c	/^  int bNot;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
bOpenUri	server/sqlite3.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOwned	server/sqlite3.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPending	server/sqlite3.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPoint	server/sqlite3.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:
bProcessLock	server/sqlite3.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	server/sqlite3.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	server/sqlite3.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bRemoveDiacritic	server/sqlite3.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:
bReserved	server/sqlite3.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	server/sqlite3.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bSpanIsTab	server/sqlite3.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:
bStart	server/sqlite3.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bUnderPressure	server/sqlite3.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	server/sqlite3.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
bUseCis	server/sqlite3.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:
bUseFetch	server/sqlite3.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:
bUsePMA	server/sqlite3.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:
bUseThread	server/sqlite3.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:
bUseThreads	server/sqlite3.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:
bVarOnly	server/sqlite3.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:
backtrace	server/sqlite3.c	16766;"	d	file:
backtrace_symbols_fd	server/sqlite3.c	16767;"	d	file:
backupOnePage	server/sqlite3.c	/^static int backupOnePage($/;"	f	file:
backupTruncateFile	server/sqlite3.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	server/sqlite3.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	server/sqlite3.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	server/sqlite3.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	server/sqlite3.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	server/sqlite3.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	server/sqlite3.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	server/sqlite3.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	server/sqlite3.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	server/sqlite3.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	server/sqlite3.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	server/sqlite3.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:
base	server/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	server/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	server/sqlite3.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:
base	server/sqlite3.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:
base	server/sqlite3.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:
base	server/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	server/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	server/sqlite3.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:
begin	xdrpp/xdrpp/types.h	/^  T *begin() { return get(); }$/;"	f	struct:xdr::pointer
begin	xdrpp/xdrpp/types.h	/^  const T *begin() const { return get(); }$/;"	f	struct:xdr::pointer
bft	server/sqlite3.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	file:
bigEndCksum	server/sqlite3.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	server/sqlite3.c	/^static int binCollFunc($/;"	f	file:
bin_PROGRAMS	xdrpp/Makefile	/^bin_PROGRAMS = xdrc\/xdrc$(EXEEXT)$/;"	m
binaryCompareP5	server/sqlite3.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	server/sqlite3.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, const char *v) { return bind_text(i, v); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, const double &v) { return bind_real(i, v); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, const sqlite3_value *v) { return bind_value(i, v); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, const std::string &v) { return bind_text(i, v); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, int v) { return bind_int(i, v); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, sqlite3_int64 v) { return bind_int(i, v); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, std::nullptr_t) { return bind_null(i); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, std::string &&v) { return bind_text(i, std::move(v)); }$/;"	f	class:SQLStmt
bind	server/sqlstmt.h	/^  SQLStmt &bind(int i, unsigned v) { return bind_int(i, v); }$/;"	f	class:SQLStmt
bindText	server/sqlite3.c	/^static int bindText($/;"	f	file:
bind_blob	server/sqlite3.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_blob	server/sqlstmt.h	/^  SQLStmt &bind_blob(int i, const void *p, int len) {$/;"	f	class:SQLStmt
bind_blob64	server/sqlite3.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_double	server/sqlite3.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	server/sqlite3.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	server/sqlstmt.h	/^  SQLStmt &bind_int(int i, sqlite3_int64 v) {$/;"	f	class:SQLStmt
bind_int64	server/sqlite3.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	server/sqlite3.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	server/sqlstmt.h	/^  SQLStmt &bind_null(int i) {$/;"	f	class:SQLStmt
bind_parameter_count	server/sqlite3.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	server/sqlite3.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	server/sqlite3.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_real	server/sqlstmt.h	/^  SQLStmt &bind_real(int i, double v) {$/;"	f	class:SQLStmt
bind_text	server/sqlite3.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text	server/sqlstmt.h	/^  SQLStmt &bind_text(int i, const char *p, int len = -1) {$/;"	f	class:SQLStmt
bind_text	server/sqlstmt.h	/^  SQLStmt &bind_text(int i, const std::string &v) {$/;"	f	class:SQLStmt
bind_text	server/sqlstmt.h	/^  SQLStmt &bind_text(int i, std::string &&v) {$/;"	f	class:SQLStmt
bind_text16	server/sqlite3.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text64	server/sqlite3.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_value	server/sqlite3.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_value	server/sqlstmt.h	/^  SQLStmt &bind_value(int i, const sqlite3_value *v) {$/;"	f	class:SQLStmt
bind_zeroblob	server/sqlite3.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bindir	xdrpp/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
blobGrowBuffer	server/sqlite3.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:
blobReadWrite	server/sqlite3.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	server/sqlite3.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	server/sqlite3.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	server/sqlite3.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	server/sqlite3.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	server/sqlite3.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	server/sqlite3.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	server/sqlite3.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	server/sqlite3.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:
bol	xdrpp/xdrpp/printer.cc	/^Printer::bol(const char *name)$/;"	f	class:xdr::detail::Printer
bound	xdrpp/xdrc/xdrc_internal.h	/^  string bound;$/;"	m	struct:rpc_decl
btree	server/sqlite3.c	/^    } btree;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon19	file:
btreeClearHasContent	server/sqlite3.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	server/sqlite3.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	server/sqlite3.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	server/sqlite3.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	server/sqlite3.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	server/sqlite3.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	server/sqlite3.c	/^static int btreeGetPage($/;"	f	file:
btreeInitPage	server/sqlite3.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	server/sqlite3.c	51765;"	d	file:
btreeInvokeBusyHandler	server/sqlite3.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeLockCarefully	server/sqlite3.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:
btreeMask	server/sqlite3.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	server/sqlite3.c	/^static int btreeMoveto($/;"	f	file:
btreeNext	server/sqlite3.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){$/;"	f	file:
btreePageFromDbPage	server/sqlite3.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	server/sqlite3.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	server/sqlite3.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	server/sqlite3.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	server/sqlite3.c	/^static void btreeParseCellPtr($/;"	f	file:
btreePrevious	server/sqlite3.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){$/;"	f	file:
btreeReleaseAllCursorPages	server/sqlite3.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:
btreeRestoreCursorPosition	server/sqlite3.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	server/sqlite3.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	server/sqlite3.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
buf_	xdrpp/xdrpp/message.h	/^  alignas(std::uint32_t) char buf_[4];$/;"	m	class:xdr::message_t
buf_	xdrpp/xdrpp/printer.h	/^  std::ostringstream buf_;$/;"	m	struct:xdr::detail::Printer
build_alias	xdrpp/Makefile	/^build_alias = $/;"	m
builddir	xdrpp/Makefile	/^builddir = .$/;"	m
busy	server/sqlite3.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	server/sqlite3.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	server/sqlite3.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	server/sqlite3.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	server/sqlite3.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cId	server/sqlite3.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:
cType	server/sqlite3.c	/^static const char cType[] = {$/;"	v	file:
c_str	server/sqlstmt.h	/^  const char *c_str(int i) {$/;"	f	class:SQLStmt
cache	cacheserver/cacheserverimpl.hh	/^  lru_cache<vector<uint8_t>> cache;$/;"	m	class:cache_api_v1_server
cache	cacheserver/lrucache.hh	/^  std::unordered_map<std::string, node*> cache;$/;"	m	class:lru_cache
cacheCtr	server/sqlite3.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	server/sqlite3.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	server/sqlite3.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cacheTransfer	include/server.hh	/^struct cacheTransfer {$/;"	s
cache_api_v1	include/server.hh	/^struct cache_api_v1 {$/;"	s
cache_api_v1_server	cacheserver/cacheserverimpl.hh	/^class cache_api_v1_server {$/;"	c
cache_size	server/sqlite3.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
callCollNeeded	server/sqlite3.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	server/sqlite3.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callStatGet	server/sqlite3.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:
call_dispatch	include/server.hh	/^  call_dispatch(T &&t, std::uint32_t proc, A &&...a) {$/;"	f	struct:api_v1
call_dispatch	include/server.hh	/^  call_dispatch(T &&t, std::uint32_t proc, A &&...a) {$/;"	f	struct:cache_api_v1
cancel_auto_extension	server/sqlite3.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
cases	xdrpp/xdrc/xdrc_internal.h	/^  vec<string> cases;$/;"	m	struct:rpc_ufield
cat_host_service	xdrpp/xdrpp/socket.cc	/^cat_host_service(const char *host, const char *service)$/;"	f	namespace:xdr::__anon38
cb	server/sqlite3.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:
cb_	xdrpp/xdrpp/pollset.h	/^    std::function<void(R)> cb_;$/;"	m	struct:xdr::pollset_plus::wake_type::async_task
cdateFunc	server/sqlite3.c	/^static void cdateFunc($/;"	f	file:
cellArea	server/sqlite3.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	server/sqlite3.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	server/sqlite3.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	server/sqlite3.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	server/sqlite3.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	server/sqlite3.c	/^static RtreeDValue cellOverlap($/;"	f	file:
cellSize	server/sqlite3.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	server/sqlite3.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	server/sqlite3.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cereal	xdrpp/xdrpp/cereal.h	/^namespace cereal {$/;"	n
cereal_CPPFLAGS	xdrpp/Makefile	/^cereal_CPPFLAGS = $/;"	m
chain	server/sqlite3.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	server/sqlite3.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	server/sqlite3.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	server/sqlite3.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	server/sqlite3.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	server/sqlite3.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	server/sqlite3.c	/^static void changes($/;"	f	file:
charFunc	server/sqlite3.c	/^static void charFunc($/;"	f	file:
charMap	server/sqlite3.c	123736;"	d	file:
charMap	server/sqlite3.c	123739;"	d	file:
charset	server/sqlite3.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
check	xdrpp/xdrpp/marshal.h	/^  void check(std::size_t n) const {$/;"	f	struct:xdr::xdr_generic_put
check	xdrpp/xdrpp/marshal.h	/^  void check(std::uint32_t n) const {$/;"	f	struct:xdr::xdr_generic_get
checkActiveVdbeCnt	server/sqlite3.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	server/sqlite3.c	65262;"	d	file:
checkAppendMsg	server/sqlite3.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	server/sqlite3.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	server/sqlite3.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	server/sqlite3.c	/^static void checkList($/;"	f	file:
checkListProperties	server/sqlite3.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	server/sqlite3.c	128434;"	d	file:
checkPage	server/sqlite3.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	server/sqlite3.c	/^static void checkPtrmap($/;"	f	file:
checkRef	server/sqlite3.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:
checkSavepointCount	server/sqlite3.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	server/sqlite3.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	server/sqlite3.c	/^static int checkTreePage($/;"	f	file:
check_PROGRAMS	xdrpp/Makefile	/^check_PROGRAMS = tests\/test-msgsock$(EXEEXT) \\$/;"	m
check_call_hdr	xdrpp/xdrpp/rpc_msg.cc	/^check_call_hdr(const rpc_msg &hdr)$/;"	f	namespace:xdr
check_size	xdrpp/xdrpp/types.h	/^  static void check_size(size_t n) {$/;"	f	struct:xdr::xstring
check_size	xdrpp/xdrpp/types.h	/^  static void check_size(size_t n) {$/;"	f	struct:xdr::xvector
check_size	xdrpp/xdrpp/types.h	/^  static void check_size(uint32_t i) {$/;"	f	struct:xdr::xarray
check_size	xdrpp/xdrpp/types.h	/^  static void check_size(uint32_t n) {$/;"	f	struct:xdr::pointer
checkliterals	xdrpp/xdrc/parse.cc	/^checkliterals()$/;"	f
childPtrSize	server/sqlite3.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	server/sqlite3.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	server/sqlite3.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	server/sqlite3.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	server/sqlite3.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clear	xdrpp/xdrpp/socket.h	/^  void clear() {$/;"	f	class:xdr::unique_fd
clearAllSharedCacheTableLocks	server/sqlite3.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	server/sqlite3.c	52210;"	d	file:
clearCell	server/sqlite3.c	/^static int clearCell($/;"	f	file:
clearDatabasePage	server/sqlite3.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	server/sqlite3.c	/^static void clearSelect(sqlite3 *db, Select *p){$/;"	f	file:
clearYMD_HMS_TZ	server/sqlite3.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	server/sqlite3.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
client	include/client.h	/^    xdr::srpc_client<api_v1> *client;$/;"	m	class:Client
client	include/server.hh	/^  template<typename _XDRBASE> struct client : _XDRBASE {$/;"	s	struct:api_v1
client	include/server.hh	/^  template<typename _XDRBASE> struct client : _XDRBASE {$/;"	s	struct:cache_api_v1
close	libclient/client.cc	/^Client::close()$/;"	f	class:Client
close	server/serverdb.cc	/^ServerDB::close()$/;"	f	class:ServerDB
close	server/sqlite3.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
close	xdrpp/xdrc/xdrc_internal.h	/^  omanip close = omanip(this, &indenter::do_close);$/;"	m	struct:indenter
closeAllCursors	server/sqlite3.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closePendingFds	server/sqlite3.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	server/sqlite3.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_on_destruction_	xdrpp/xdrpp/srpc.h	/^  bool close_on_destruction_;$/;"	m	class:xdr::srpc_server
close_v2	server/sqlite3.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
cnst	xdrpp/xdrc/xdrc_internal.h	/^  struct rpc_const cnst;$/;"	m	struct:YYSTYPE	typeref:struct:YYSTYPE::rpc_const
cnt	server/sqlite3.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	server/sqlite3.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	server/sqlite3.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
code	include/client.h	/^    ClientError code() const { return errcode; }$/;"	f	class:ClientException
codeAllEqualityTerms	server/sqlite3.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	server/sqlite3.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	server/sqlite3.c	/^static void codeAttach($/;"	f	file:
codeCompare	server/sqlite3.c	/^static int codeCompare($/;"	f	file:
codeDistinct	server/sqlite3.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	server/sqlite3.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	server/sqlite3.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	server/sqlite3.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	server/sqlite3.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	server/sqlite3.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	server/sqlite3.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	server/sqlite3.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	server/sqlite3.c	88602;"	d	file:
codeTriggerProgram	server/sqlite3.c	/^static int codeTriggerProgram($/;"	f	file:
colFlags	server/sqlite3.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:
colNamesSet	server/sqlite3.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	server/sqlite3.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	server/sqlite3.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	server/sqlite3.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	server/sqlite3.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
column	server/sqlstmt.h	/^SQLStmt::column(int i)$/;"	f	class:SQLStmt
columnIndex	server/sqlite3.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	server/sqlite3.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	server/sqlite3.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	server/sqlite3.c	/^static const void *columnName($/;"	f	file:
columnNullValue	server/sqlite3.c	/^static const Mem *columnNullValue(void){$/;"	f	file:
columnType	server/sqlite3.c	105308;"	d	file:
columnTypeImpl	server/sqlite3.c	/^static const char *columnTypeImpl($/;"	f	file:
column_blob	server/sqlite3.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	server/sqlite3.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	server/sqlite3.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	server/sqlite3.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	server/sqlite3.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	server/sqlite3.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	server/sqlite3.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	server/sqlite3.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	server/sqlite3.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	server/sqlite3.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	server/sqlite3.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	server/sqlite3.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	server/sqlite3.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	server/sqlite3.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	server/sqlite3.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	server/sqlite3.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	server/sqlite3.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	server/sqlite3.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	server/sqlite3.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	server/sqlite3.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	server/sqlite3.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
columnsInIndex	server/sqlite3.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:
combineLowHigh	include/helpers.cc	/^combineLowHigh(uint64_t low,$/;"	f
commit_hook	server/sqlite3.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	server/sqlite3.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	server/sqlite3.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	server/sqlite3.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	server/sqlite3.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	server/sqlite3.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	server/sqlite3.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	server/sqlite3.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	server/sqlite3.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	server/sqlite3.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeHMS	server/sqlite3.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	server/sqlite3.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	server/sqlite3.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeNumericType	server/sqlite3.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:
computeYMD	server/sqlite3.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	server/sqlite3.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	server/sqlite3.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	server/sqlite3.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	server/sqlite3.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
connectionIsBusy	server/sqlite3.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:
consolidate	xdrpp/xdrpp/pollset.cc	/^pollset::consolidate()$/;"	f	class:xdr::pollset
const_list	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<vec<rpc_const>> const_list;$/;"	m	union:YYSTYPE::__anon32
constraintName	server/sqlite3.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:
constructAutomaticIndex	server/sqlite3.c	/^static void constructAutomaticIndex($/;"	f	file:
constructed	xdrpp/xdrc/union.h	/^  bool constructed() const { return typeid(union_entry) == typeid(*this); }$/;"	f	class:union_entry
contains	cacheserver/lrucache.hh	/^  bool contains(std::string key) {$/;"	f	class:lru_cache
contextMalloc	server/sqlite3.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	server/sqlite3.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convert	xdrpp/xdrpp/iniparse.h	/^  template<typename T> void convert(T *rp) const { from_string(value_, rp); }$/;"	f	class:xdr::IniLine
convertCompoundSelectToSubquery	server/sqlite3.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:
convertToWithoutRowidTable	server/sqlite3.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:
cookieMask	server/sqlite3.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	server/sqlite3.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	server/sqlite3.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	server/sqlite3.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	server/sqlite3.c	/^static int copyPayload($/;"	f	file:
copy_construct_to	xdrpp/xdrc/union.h	/^  virtual void copy_construct_to(union_entry_base *dest) const {$/;"	f	class:union_entry_base
copy_stemmer	server/sqlite3.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	server/sqlite3.c	/^static void corruptSchema($/;"	f	file:
costMult	server/sqlite3.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:
count	server/sqlite3.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	server/sqlite3.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	server/sqlite3.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	server/sqlite3.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	server/sqlite3.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	server/sqlite3.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countValidCursors	server/sqlite3.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:
covered	server/sqlite3.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
create	server/serverdb.cc	/^ServerDB::create(const char *file)$/;"	f	class:ServerDB
createAggContext	server/sqlite3.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:
createCollation	server/sqlite3.c	/^static int createCollation($/;"	f	file:
createFile	server/sqlite3.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMask	server/sqlite3.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	server/sqlite3.c	/^static int createModule($/;"	f	file:
createTableStmt	server/sqlite3.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	server/sqlite3.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	server/sqlite3.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	server/sqlite3.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	server/sqlite3.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	server/sqlite3.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	server/sqlite3.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	server/sqlite3.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	server/sqlite3.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
csr	server/sqlite3.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
ctimeFunc	server/sqlite3.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	server/sqlite3.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	server/sqlite3.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	server/sqlite3.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
curFlags	server/sqlite3.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:
cur_ns	xdrpp/xdrc/gen_hh.cc	/^cur_ns()$/;"	f	namespace:__anon26
cur_scope	xdrpp/xdrc/gen_hh.cc	/^cur_scope()$/;"	f	namespace:__anon26
current	server/sqlite3.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:
currentCount	server/sqlite3.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	server/sqlite3.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	server/sqlite3.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	server/sqlite3.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	server/sqlite3.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	cacheserver/lrucache.hh	/^    T data;$/;"	m	struct:lru_cache::node
data	server/sqlite3.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	server/sqlite3.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data	xdrpp/xdrpp/message.h	/^  char *data() { return buf_ + 4; }$/;"	f	class:xdr::message_t
data	xdrpp/xdrpp/message.h	/^  const char *data() const { return buf_ + 4; }$/;"	f	class:xdr::message_t
data	xdrpp/xdrpp/types.h	/^  char *data() { return &(*this)[0]; } \/\/ protobufs does this, so probably ok$/;"	f	struct:xdr::xstring
data_count	server/sqlite3.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
databaseIsUnmoved	server/sqlite3.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:
datadir	xdrpp/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	xdrpp/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dateFunc	server/sqlite3.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	server/sqlite3.c	/^static void datetimeFunc($/;"	f	file:
db	server/serverdb.h	/^    sqlite3 *db;$/;"	m	class:ServerDB
db	server/sqlite3.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:
db	server/sqlite3.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	server/sqlite3.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	server/sqlite3.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	server/sqlite3.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	server/sqlite3.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:
db	server/sqlite3.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	server/sqlite3.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	server/sqlite3.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	server/sqlite3.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	server/sqlite3.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	server/sqlite3.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	server/sqlite3.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon7	file:
db	server/sqlite3.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	server/sqlite3.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	server/sqlite3.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	server/sqlite3.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	server/sqlite3.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	server/sqlite3.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOptFlags	server/sqlite3.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:
dbOrigSize	server/sqlite3.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	server/sqlite3.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	server/sqlite3.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbSize	server/sqlite3.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	server/sqlite3.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	server/sqlite3.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_filename	server/sqlite3.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	server/sqlite3.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_mutex	server/sqlite3.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_readonly	server/sqlite3.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_release_memory	server/sqlite3.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	server/sqlite3.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
dbthrow	server/sqlstmt.cc	/^dbthrow (sqlite3 *db, const char *query)$/;"	f	file:
debugMutexAlloc	server/sqlite3.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	server/sqlite3.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	server/sqlite3.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	server/sqlite3.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	server/sqlite3.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	server/sqlite3.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	server/sqlite3.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	server/sqlite3.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	server/sqlite3.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
decl	xdrpp/xdrc/xdrc_internal.h	/^  rpc_decl decl;$/;"	m	struct:rpc_ufield
decl	xdrpp/xdrc/xdrc_internal.h	/^  struct rpc_decl decl;$/;"	m	struct:YYSTYPE	typeref:struct:YYSTYPE::rpc_decl
decl_list	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<vec<rpc_decl>> decl_list;$/;"	m	union:YYSTYPE::__anon32
decl_type	xdrpp/xdrc/gen_hh.cc	/^decl_type(const rpc_decl &d)$/;"	f	namespace:__anon26
declareVtab	server/sqlite3.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	server/sqlite3.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decls	xdrpp/xdrc/xdrc_internal.h	/^  vec<rpc_decl> decls;$/;"	m	struct:rpc_struct
decltype	include/server.hh	/^    decltype(c.getCacheContents(std::forward<A>(a)...)) {$/;"	f	struct:cache_api_v1::getCacheContents_t
decltype	include/server.hh	/^    decltype(c.getCacheContents(std::forward<DropIfVoid>(d), std::forward<A>(a)...)) {$/;"	f	struct:cache_api_v1::getCacheContents_t
decltype	include/server.hh	/^    decltype(c.getCacheServer(std::forward<A>(a)...)) {$/;"	f	struct:api_v1::getCacheServer_t
decltype	include/server.hh	/^    decltype(c.getCacheServer(std::forward<DropIfVoid>(d), std::forward<A>(a)...)) {$/;"	f	struct:api_v1::getCacheServer_t
decltype	include/server.hh	/^    decltype(c.newCacheserverAdded(std::forward<A>(a)...)) {$/;"	f	struct:cache_api_v1::newCacheserverAdded_t
decltype	include/server.hh	/^    decltype(c.newCacheserverAdded(std::forward<DropIfVoid>(d), std::forward<A>(a)...)) {$/;"	f	struct:cache_api_v1::newCacheserverAdded_t
decltype	include/server.hh	/^    decltype(c.sendCachedData(std::forward<A>(a)...)) {$/;"	f	struct:cache_api_v1::sendCachedData_t
decltype	include/server.hh	/^    decltype(c.sendCachedData(std::forward<DropIfVoid>(d), std::forward<A>(a)...)) {$/;"	f	struct:cache_api_v1::sendCachedData_t
decltype	include/server.hh	/^    decltype(c.sendHeartbeat(std::forward<A>(a)...)) {$/;"	f	struct:api_v1::sendHeartbeat_t
decltype	include/server.hh	/^    decltype(c.sendHeartbeat(std::forward<DropIfVoid>(d), std::forward<A>(a)...)) {$/;"	f	struct:api_v1::sendHeartbeat_t
decltype	include/server.hh	/^    decltype(this->_XDRBASE::template invoke<getCacheContents_t>(_xdr_args...)) {$/;"	f	struct:cache_api_v1::client
decltype	include/server.hh	/^    decltype(this->_XDRBASE::template invoke<getCacheServer_t>(_xdr_args...)) {$/;"	f	struct:api_v1::client
decltype	include/server.hh	/^    decltype(this->_XDRBASE::template invoke<newCacheserverAdded_t>(_xdr_args...)) {$/;"	f	struct:cache_api_v1::client
decltype	include/server.hh	/^    decltype(this->_XDRBASE::template invoke<sendCachedData_t>(_xdr_args...)) {$/;"	f	struct:cache_api_v1::client
decltype	include/server.hh	/^    decltype(this->_XDRBASE::template invoke<sendHeartbeat_t>(_xdr_args...)) {$/;"	f	struct:api_v1::client
decodeFlags	server/sqlite3.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeIntArray	server/sqlite3.c	/^static void decodeIntArray($/;"	f	file:
default_rc	server/sqlite3.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:
deferredMoveto	server/sqlite3.c	/^  u8 deferredMoveto;    \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	server/sqlite3.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteCell	server/sqlite3.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delete_addrinfo	xdrpp/xdrpp/socket.h	/^  constexpr delete_addrinfo() {}$/;"	f	struct:xdr::delete_addrinfo
delete_addrinfo	xdrpp/xdrpp/socket.h	/^struct delete_addrinfo {$/;"	s	namespace:xdr
delim	server/sqlite3.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
depcomp	xdrpp/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
desc	server/sqlite3.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
desc	server/sqlite3.h	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
deselect	xdrpp/xdrc/union.h	/^  void deselect() {$/;"	f	class:union_entry_base
deserializeGeometry	server/sqlite3.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroy	xdrpp/xdrc/union.h	/^  void destroy() volatile { this->~union_entry_base(); }$/;"	f	class:union_entry_base
destroyRootPage	server/sqlite3.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	server/sqlite3.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	server/sqlite3.c	/^static void detachFunc($/;"	f	file:
detail	xdrpp/xdrpp/cereal.h	/^namespace detail {$/;"	n	namespace:xdr
detail	xdrpp/xdrpp/clear.h	/^namespace detail{$/;"	n	namespace:xdr
detail	xdrpp/xdrpp/printer.cc	/^namespace detail {$/;"	n	namespace:xdr	file:
detail	xdrpp/xdrpp/printer.h	/^namespace detail {$/;"	n	namespace:xdr
detail	xdrpp/xdrpp/types.h	/^namespace detail {$/;"	n	namespace:xdr
dev	server/sqlite3.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
deviceCharacteristics	server/sqlite3.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:
dfltLockMode	server/sqlite3.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
dirDepth	server/serverdb.cc	/^dirDepth(const string &path)$/;"	f
directMode	server/sqlite3.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableTerm	server/sqlite3.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	server/sqlite3.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	server/sqlite3.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	server/sqlite3.c	44478;"	d	file:
disable_simulated_io_errors	server/sqlite3.c	9878;"	d	file:
disallow	server/sqlite3.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon9	file:
disconnectAllVtab	server/sqlite3.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
dispatch	xdrpp/xdrpp/server.cc	/^rpc_server_base::dispatch(msg_ptr m)$/;"	f	class:xdr::rpc_server_base
dispatch	xdrpp/xdrpp/server.h	/^  dispatch(xdr_get &g, rpc_msg rhdr, msg_ptr &ret) {$/;"	f	struct:xdr::synchronous_server
displayComment	server/sqlite3.c	/^static int displayComment($/;"	f	file:
displayP4	server/sqlite3.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
distcleancheck_listfiles	xdrpp/Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	xdrpp/Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	xdrpp/Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
doNotSpill	server/sqlite3.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doWalCallbacks	server/sqlite3.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
do_close	xdrpp/xdrc/xdrc_internal.h	/^  void do_close(ostream &os) { --(*this); do_indent(os); }$/;"	f	struct:indenter
do_indent	xdrpp/xdrc/xdrc_internal.h	/^  void do_indent(ostream &os) { os << std::endl << std::string(level_, ' '); }$/;"	f	struct:indenter
do_open	xdrpp/xdrc/xdrc_internal.h	/^  void do_open(ostream &os) { ++(*this); do_indent(os); }$/;"	f	struct:indenter
do_outdent	xdrpp/xdrc/xdrc_internal.h	/^  void do_outdent(ostream &os) {$/;"	f	struct:indenter
docdir	xdrpp/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
doclist	server/sqlite3.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
doingRerun	server/sqlite3.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:
done	server/sqlite3.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
done	server/sqlite3.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:
done	server/sqlstmt.h	/^  bool done() { return !row(); }$/;"	f	class:SQLStmt
done	xdrpp/xdrpp/pollset.h	/^    void done() {$/;"	f	struct:xdr::pollset_plus::wake_type::async_task
dotlockCheckReservedLock	server/sqlite3.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	server/sqlite3.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	server/sqlite3.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	server/sqlite3.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	server/sqlite3.c	388;"	d	file:
double	server/sqlite3.c	7547;"	d	file:
double	server/sqlite3.c	8435;"	d	file:
double	server/sqlite3.h	264;"	d
double	server/sqlite3.h	7423;"	d
doubleConsonant	server/sqlite3.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	server/sqlite3.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	server/sqlite3.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	server/sqlite3.c	52211;"	d	file:
dropCell	server/sqlite3.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
dup8bytes	server/sqlite3.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	server/sqlite3.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	server/sqlite3.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	server/sqlite3.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
dvidir	xdrpp/Makefile	/^dvidir = ${docdir}$/;"	m
eCoordType	server/sqlite3.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:
eCreate	server/sqlite3.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:
eDest	server/sqlite3.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:
eDistinct	server/sqlite3.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values below *\/$/;"	m	struct:WhereInfo	file:
eEndLoopOp	server/sqlite3.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:
eEvalmode	server/sqlite3.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFWErr	server/sqlite3.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:
eFileLock	server/sqlite3.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	server/sqlite3.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	server/sqlite3.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	server/sqlite3.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	server/sqlite3.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	server/sqlite3.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	server/sqlite3.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eParentWithin	server/sqlite3.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
eParentWithin	server/sqlite3.h	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
ePragTyp	server/sqlite3.c	/^  u8 ePragTyp;              \/* PragTyp_XXX value *\/$/;"	m	struct:sPragmaNames	file:
eSearch	server/sqlite3.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	server/sqlite3.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	server/sqlite3.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTnctType	server/sqlite3.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:
eTriggerOp	server/sqlite3.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	server/sqlite3.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	server/sqlite3.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eWithin	server/sqlite3.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
eWithin	server/sqlite3.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:
eWithin	server/sqlite3.h	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info
e_	xdrpp/xdrpp/marshal.h	/^  const std::uint32_t *const e_;$/;"	m	class:xdr::xdr_generic_get::std
e_	xdrpp/xdrpp/marshal.h	/^  std::uint32_t *const e_;$/;"	m	class:xdr::xdr_generic_put::std
eagain	xdrpp/xdrpp/msgsock.h	/^  static constexpr bool eagain(int err) {$/;"	f	class:xdr::msg_sock
ebcdicToAscii	server/sqlite3.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
echoclient	xdrpp/tests/msgsock.cc	/^echoclient(int fd)$/;"	f
echoserver	xdrpp/tests/msgsock.cc	/^echoserver(int fd)$/;"	f
emplace	xdrpp/xdrc/union.h	/^  template<typename ...A> void emplace(A&&...a) {$/;"	f	class:union_entry
enable_shared_cache	server/sqlite3.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	server/sqlite3.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	server/sqlite3.c	44479;"	d	file:
enable_simulated_io_errors	server/sqlite3.c	9879;"	d	file:
enc	server/sqlite3.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	server/sqlite3.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	server/sqlite3.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	server/sqlite3.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
end	xdrpp/xdrpp/message.h	/^  char *end() { return buf_ + 4 + size_; }$/;"	f	class:xdr::message_t
end	xdrpp/xdrpp/message.h	/^  const char *end() const { return buf_ + 4 + size_; }$/;"	f	class:xdr::message_t
end	xdrpp/xdrpp/types.h	/^  T *end() { return begin() + size(); }$/;"	f	struct:xdr::pointer
end	xdrpp/xdrpp/types.h	/^  const T *end() const { return begin() + size(); }$/;"	f	struct:xdr::pointer
endpoint	server/sqlite3.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
endsWithNL	server/sqlite3.c	/^static int endsWithNL(Explain *p){$/;"	f	file:
enlargeAndAppend	server/sqlite3.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:
ensure_row	server/sqlstmt.h	/^  void ensure_row () { if (status_ != SQLITE_ROW) fail(); }$/;"	f	class:SQLStmt
enterMutex	server/sqlite3.c	/^static void enterMutex(void){$/;"	f	file:
enum_name	xdrpp/xdrpp/types.h	/^  static constexpr const char *enum_name(uint32_t b) {$/;"	f	struct:xdr::xdr_traits
erase_signal_cb	xdrpp/xdrpp/pollset.cc	/^pollset_plus::erase_signal_cb(int sig)$/;"	f	class:xdr::pollset_plus
errCode	server/sqlite3.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	server/sqlite3.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	server/sqlite3.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:
errMask	server/sqlite3.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	server/sqlite3.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	include/client.h	/^    enum ClientError errcode;$/;"	m	class:ClientException	typeref:enum:ClientException::ClientError
errcode	server/sqlite3.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	server/sqlite3.c	/^static void errlogFunc($/;"	f	file:
errmsg	server/sqlite3.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	server/sqlite3.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
error	xdrpp/xdrpp/iniparse.h	/^  bool error() const { return error_; }$/;"	f	class:xdr::IniLine
errorAction	server/sqlite3.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
errstr	server/sqlite3.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:
escape_string	xdrpp/xdrpp/printer.cc	/^escape_string(const std::string &s)$/;"	f	namespace:xdr
estLog	server/sqlite3.c	/^static LogEst estLog(LogEst N){$/;"	f	file:
estimateIndexWidth	server/sqlite3.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:
estimateTableWidth	server/sqlite3.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:
estimatedCost	server/sqlite3.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedCost	server/sqlite3.h	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info
estimatedRows	server/sqlite3.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedRows	server/sqlite3.h	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info
etBUFSIZE	server/sqlite3.c	20910;"	d	file:
etByte	server/sqlite3.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	server/sqlite3.c	20770;"	d	file:
etDYNSTRING	server/sqlite3.c	20768;"	d	file:
etEXP	server/sqlite3.c	20764;"	d	file:
etFLOAT	server/sqlite3.c	20763;"	d	file:
etGENERIC	server/sqlite3.c	20765;"	d	file:
etINVALID	server/sqlite3.c	20781;"	d	file:
etORDINAL	server/sqlite3.c	20779;"	d	file:
etPERCENT	server/sqlite3.c	20769;"	d	file:
etPOINTER	server/sqlite3.c	20777;"	d	file:
etRADIX	server/sqlite3.c	20762;"	d	file:
etSIZE	server/sqlite3.c	20766;"	d	file:
etSQLESCAPE	server/sqlite3.c	20772;"	d	file:
etSQLESCAPE2	server/sqlite3.c	20773;"	d	file:
etSQLESCAPE3	server/sqlite3.c	20778;"	d	file:
etSRCLIST	server/sqlite3.c	20776;"	d	file:
etSTRING	server/sqlite3.c	20767;"	d	file:
etTOKEN	server/sqlite3.c	20775;"	d	file:
et_getdigit	server/sqlite3.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	server/sqlite3.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	server/sqlite3.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
evict	cacheserver/lrucache.hh	/^  void evict() {$/;"	f	class:lru_cache
exclMask	server/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	server/sqlite3.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	server/sqlite3.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	server/sqlite3.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	server/sqlite3.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	server/sqlite3.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	server/sqlite3.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	server/sqlite3.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
exec_prefix	xdrpp/Makefile	/^exec_prefix = ${prefix}$/;"	m
expensive_assert	server/sqlite3.c	38470;"	d	file:
expensive_assert	server/sqlite3.c	38472;"	d	file:
expired	server/sqlite3.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
expired	server/sqlite3.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
explain	server/sqlite3.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	server/sqlite3.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	server/sqlite3.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	server/sqlite3.c	/^static void explainComposite($/;"	f	file:
explainComposite	server/sqlite3.c	105149;"	d	file:
explainIndexRange	server/sqlite3.c	/^static char *explainIndexRange(sqlite3 *db, WhereLoop *pLoop, Table *pTab){$/;"	f	file:
explainOneScan	server/sqlite3.c	/^static void explainOneScan($/;"	f	file:
explainOneScan	server/sqlite3.c	116422;"	d	file:
explainOneSelect	server/sqlite3.c	/^static void explainOneSelect(Vdbe *pVdbe, Select *p){$/;"	f	file:
explainSetInteger	server/sqlite3.c	105107;"	d	file:
explainSetInteger	server/sqlite3.c	105112;"	d	file:
explainSimpleCount	server/sqlite3.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	server/sqlite3.c	108597;"	d	file:
explainTempTable	server/sqlite3.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	server/sqlite3.c	105111;"	d	file:
expmask	server/sqlite3.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAlwaysFalse	server/sqlite3.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAlwaysTrue	server/sqlite3.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:
exprAnalyze	server/sqlite3.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	server/sqlite3.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	server/sqlite3.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	server/sqlite3.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	server/sqlite3.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	server/sqlite3.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	server/sqlite3.c	/^static int exprIsConst(Expr *p, int initFlag){$/;"	f	file:
exprListTableUsage	server/sqlite3.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	server/sqlite3.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprProbability	server/sqlite3.c	/^static int exprProbability(Expr *p){$/;"	f	file:
exprSelectTableUsage	server/sqlite3.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	server/sqlite3.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	server/sqlite3.c	80988;"	d	file:
exprSrcCount	server/sqlite3.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprStructSize	server/sqlite3.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableColumn	server/sqlite3.c	/^static Expr *exprTableColumn($/;"	f	file:
exprTableRegister	server/sqlite3.c	/^static Expr *exprTableRegister($/;"	f	file:
exprTableUsage	server/sqlite3.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToRegister	server/sqlite3.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:
exprToString	server/sqlite3.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	server/sqlite3.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extend_at	xdrpp/xdrpp/types.h	/^  T &extend_at(uint32_t i) {$/;"	f	struct:xdr::pointer
extend_at	xdrpp/xdrpp/types.h	/^  T &extend_at(uint32_t i) {$/;"	f	struct:xdr::xarray
extend_at	xdrpp/xdrpp/types.h	/^  T &extend_at(uint32_t i) {$/;"	f	struct:xdr::xvector
extended_errcode	server/sqlite3.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	server/sqlite3.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
f	server/sqlite3.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:
fErrorOrAux	server/sqlite3.c	/^  u8 fErrorOrAux;       \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	file:
fail	server/sqlstmt.cc	/^SQLStmt::fail ()$/;"	f	class:SQLStmt
fail	xdrpp/xdrpp/iniparse.h	/^  std::ostream &fail() const { error_ = true; return warn(); }$/;"	f	class:xdr::IniLine
fcntlSizeHint	server/sqlite3.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	server/sqlite3.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	server/sqlite3.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	server/sqlite3.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fd_	xdrpp/xdrpp/msgsock.h	/^  const int fd_;$/;"	m	class:xdr::msg_sock
fd_	xdrpp/xdrpp/socket.h	/^  int fd_;$/;"	m	class:xdr::unique_fd
fd_	xdrpp/xdrpp/srpc.h	/^  const int fd_;$/;"	m	class:xdr::srpc_server
fd_	xdrpp/xdrpp/srpc.h	/^  const int fd_;$/;"	m	class:xdr::synchronous_client_base
fd_cb	xdrpp/xdrpp/pollset.cc	/^pollset::fd_cb(int fd, op_t op, std::nullptr_t)$/;"	f	class:xdr::pollset
fd_cb	xdrpp/xdrpp/pollset.h	/^  template<typename CB> void fd_cb(int fd, op_t op, CB &&cb) {$/;"	f	class:xdr::pollset
fd_cb_helper	xdrpp/xdrpp/pollset.cc	/^pollset::fd_cb_helper(int fd, op_t op)$/;"	f	class:xdr::pollset
fd_state	xdrpp/xdrpp/pollset.h	/^  struct fd_state {$/;"	s	class:xdr::pollset
fdatasync	server/sqlite3.c	28125;"	d	file:
fetchPayload	server/sqlite3.c	/^static const void *fetchPayload($/;"	f	file:
field_archiver	xdrpp/xdrpp/types.h	/^constexpr field_archiver_t field_archiver;$/;"	m	namespace:xdr
field_archiver_t	xdrpp/xdrpp/types.h	/^  constexpr field_archiver_t() {}$/;"	f	struct:xdr::field_archiver_t
field_archiver_t	xdrpp/xdrpp/types.h	/^struct field_archiver_t {$/;"	s	namespace:xdr
field_assigner	xdrpp/xdrpp/types.h	/^constexpr field_assigner_t field_assigner;$/;"	m	namespace:xdr
field_assigner_t	xdrpp/xdrpp/types.h	/^  constexpr field_assigner_t() {}$/;"	f	struct:xdr::field_assigner_t
field_assigner_t	xdrpp/xdrpp/types.h	/^struct field_assigner_t {$/;"	s	namespace:xdr
field_constructor	xdrpp/xdrpp/types.h	/^constexpr field_constructor_t field_constructor;$/;"	m	namespace:xdr
field_constructor_t	xdrpp/xdrpp/types.h	/^  constexpr field_constructor_t() {}$/;"	f	struct:xdr::field_constructor_t
field_constructor_t	xdrpp/xdrpp/types.h	/^struct field_constructor_t {$/;"	s	namespace:xdr
field_destructor	xdrpp/xdrpp/types.h	/^constexpr field_destructor_t field_destructor;$/;"	m	namespace:xdr
field_destructor_t	xdrpp/xdrpp/types.h	/^  constexpr field_destructor_t() {}$/;"	f	struct:xdr::field_destructor_t
field_destructor_t	xdrpp/xdrpp/types.h	/^struct field_destructor_t {$/;"	s	namespace:xdr
field_ptr	xdrpp/xdrpp/types.h	/^template<typename T, typename F, F T::*Ptr> struct field_ptr {$/;"	s	namespace:xdr
field_size	xdrpp/xdrpp/types.h	/^constexpr field_size_t field_size;$/;"	m	namespace:xdr
field_size_t	xdrpp/xdrpp/types.h	/^  constexpr field_size_t() {}$/;"	f	struct:xdr::field_size_t
field_size_t	xdrpp/xdrpp/types.h	/^struct field_size_t {$/;"	s	namespace:xdr
fields	xdrpp/xdrc/xdrc_internal.h	/^  vec<rpc_ufield> fields;$/;"	m	struct:rpc_union
file	server/sqlite3.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:
file2	server/sqlite3.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:
fileHasMoved	server/sqlite3.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:
fileId	server/sqlite3.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_	xdrpp/xdrpp/iniparse.h	/^  string file_;$/;"	m	class:xdr::IniLine
file_control	server/sqlite3.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	server/sqlite3.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
file_prefix	xdrpp/xdrc/xdrc.cc	/^string file_prefix;$/;"	v
filename	xdrpp/xdrc/scan.cc	/^string filename = "(stdin)";$/;"	v
fillInCell	server/sqlite3.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	server/sqlite3.c	/^static int fillInUnixFile($/;"	f	file:
filter	server/sqlite3.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalDbSize	server/sqlite3.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:
finalize	server/sqlite3.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	server/sqlite3.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
find	cacheserver/serverdb.cc	/^ServerDB::find(const string &key)$/;"	f	class:ServerDB
findBtree	server/sqlite3.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	server/sqlite3.c	53044;"	d	file:
findCellv2	server/sqlite3.c	53046;"	d	file:
findCollSeqEntry	server/sqlite3.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	server/sqlite3.c	/^static int findCreateFileMode($/;"	f	file:
findElementWithHash	server/sqlite3.c	/^static HashElem *findElementWithHash($/;"	f	file:
findIndexCol	server/sqlite3.c	/^static int findIndexCol($/;"	f	file:
findIndexOrPrimaryKey	server/sqlite3.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:
findInodeInfo	server/sqlite3.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	server/sqlite3.c	/^static int findLeafNode($/;"	f	file:
findNextHostParameter	server/sqlite3.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	server/sqlite3.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	server/sqlite3.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findRightmost	server/sqlite3.c	/^static Select *findRightmost(Select *p){$/;"	f	file:
findTerm	server/sqlite3.c	/^static WhereTerm *findTerm($/;"	f	file:
finder_type	server/sqlite3.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	server/sqlite3.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	server/sqlite3.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	server/sqlite3.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	server/sqlite3.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t fixed_size = 0;$/;"	m	struct:xdr::xdr_struct_base
fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t fixed_size = sizeof(uint_type);$/;"	m	struct:xdr::xdr_fp_base
fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t fixed_size = sizeof(uint_type);$/;"	m	struct:xdr::xdr_integral_base
fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t fixed_size =$/;"	m	struct:xdr::detail::xdr_container_base
fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t fixed_size =$/;"	m	struct:xdr::detail::xdr_struct_base_fs
fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t fixed_size =$/;"	m	struct:xdr::xdr_traits
fkActionTrigger	server/sqlite3.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkChildIsModified	server/sqlite3.c	/^static int fkChildIsModified($/;"	f	file:
fkLookupParent	server/sqlite3.c	/^static void fkLookupParent($/;"	f	file:
fkParentIsModified	server/sqlite3.c	/^static int fkParentIsModified($/;"	f	file:
fkScanChildren	server/sqlite3.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	server/sqlite3.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	server/sqlite3.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flags	server/sqlite3.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	server/sqlite3.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	server/sqlite3.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	server/sqlite3.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	server/sqlite3.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	server/sqlite3.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	server/sqlite3.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	server/sqlite3.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	server/sqlite3.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flattenSubquery	server/sqlite3.c	/^static int flattenSubquery($/;"	f	file:
flex_int16_t	xdrpp/xdrc/scan.cc	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	xdrpp/xdrc/scan.cc	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	xdrpp/xdrc/scan.cc	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	xdrpp/xdrc/scan.cc	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	xdrpp/xdrc/scan.cc	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	xdrpp/xdrc/scan.cc	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	xdrpp/xdrc/scan.cc	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	xdrpp/xdrc/scan.cc	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	xdrpp/xdrc/scan.cc	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	xdrpp/xdrc/scan.cc	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	xdrpp/xdrc/scan.cc	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	xdrpp/xdrc/scan.cc	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
float	server/sqlite3.c	8436;"	d	file:
floatSwap	server/sqlite3.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	server/sqlite3.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	server/sqlite3.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	server/sqlite3.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	server/sqlite3.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	server/sqlite3.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	server/sqlite3.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	server/sqlite3.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	server/sqlite3.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	server/sqlite3.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	server/sqlite3.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	server/sqlite3.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	server/sqlite3.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	server/sqlite3.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	server/sqlite3.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:
freeTempSpace	server/sqlite3.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
free_table	server/sqlite3.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
from_string	xdrpp/xdrpp/iniparse.cc	/^from_string(const string &s, bool *bp)$/;"	f	namespace:xdr
from_string	xdrpp/xdrpp/iniparse.cc	/^from_string(const string &s, string *sp)$/;"	f	namespace:xdr
from_uint	xdrpp/xdrpp/types.h	/^  static type from_uint(uint_type u) { return u; }$/;"	f	struct:xdr::xdr_traits
from_uint	xdrpp/xdrpp/types.h	/^  static type from_uint(uint_type u) { return xdr_reinterpret<type>(u); }$/;"	f	struct:xdr::xdr_fp_base
from_uint	xdrpp/xdrpp/types.h	/^  static type from_uint(uint_type u) {$/;"	f	struct:xdr::xdr_integral_base
fsFlags	server/sqlite3.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	server/sqlite3.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3AppendToNode	server/sqlite3.c	/^static int fts3AppendToNode($/;"	f	file:
fts3Appendf	server/sqlite3.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	server/sqlite3.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	server/sqlite3.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	server/sqlite3.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	server/sqlite3.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	server/sqlite3.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ChecksumEntry	server/sqlite3.c	/^static u64 fts3ChecksumEntry($/;"	f	file:
fts3ChecksumIndex	server/sqlite3.c	/^static u64 fts3ChecksumIndex($/;"	f	file:
fts3CloseMethod	server/sqlite3.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	server/sqlite3.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	server/sqlite3.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	server/sqlite3.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	server/sqlite3.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	server/sqlite3.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	server/sqlite3.c	/^static int fts3CompareElemByTerm(const void *lhs, const void *rhs){$/;"	f	file:
fts3ConnectMethod	server/sqlite3.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	server/sqlite3.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	server/sqlite3.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	server/sqlite3.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	server/sqlite3.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	server/sqlite3.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){$/;"	f	file:
fts3DatabasePageSize	server/sqlite3.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	server/sqlite3.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	server/sqlite3.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	server/sqlite3.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	server/sqlite3.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	server/sqlite3.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	server/sqlite3.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteSegment	server/sqlite3.c	/^static int fts3DeleteSegment($/;"	f	file:
fts3DeleteTerms	server/sqlite3.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	server/sqlite3.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	server/sqlite3.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoAutoincrmerge	server/sqlite3.c	/^static int fts3DoAutoincrmerge($/;"	f	file:
fts3DoIncrmerge	server/sqlite3.c	/^static int fts3DoIncrmerge($/;"	f	file:
fts3DoIntegrityCheck	server/sqlite3.c	/^static int fts3DoIntegrityCheck($/;"	f	file:
fts3DoOptimize	server/sqlite3.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	server/sqlite3.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DocidRange	server/sqlite3.c	/^static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts3DoclistCountDocids	server/sqlite3.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	server/sqlite3.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	server/sqlite3.c	/^static void fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	server/sqlite3.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	server/sqlite3.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	server/sqlite3.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	server/sqlite3.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	server/sqlite3.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalDlPhraseNext	server/sqlite3.c	/^static void fts3EvalDlPhraseNext($/;"	f	file:
fts3EvalGatherStats	server/sqlite3.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalIncrPhraseNext	server/sqlite3.c	/^static int fts3EvalIncrPhraseNext($/;"	f	file:
fts3EvalInvalidatePoslist	server/sqlite3.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	server/sqlite3.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	server/sqlite3.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	server/sqlite3.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	server/sqlite3.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	server/sqlite3.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	server/sqlite3.c	/^static void fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	server/sqlite3.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	server/sqlite3.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	server/sqlite3.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	server/sqlite3.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	server/sqlite3.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	server/sqlite3.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestDeferredAndNear	server/sqlite3.c	/^static int fts3EvalTestDeferredAndNear(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:
fts3EvalTestExpr	server/sqlite3.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	server/sqlite3.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	server/sqlite3.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprBalance	server/sqlite3.c	/^static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){$/;"	f	file:
fts3ExprCheckDepth	server/sqlite3.c	/^static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){$/;"	f	file:
fts3ExprGlobalHitsCb	server/sqlite3.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	server/sqlite3.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	server/sqlite3.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLoadDoclists	server/sqlite3.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	server/sqlite3.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	server/sqlite3.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	server/sqlite3.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprParseUnbalanced	server/sqlite3.c	/^static int fts3ExprParseUnbalanced($/;"	f	file:
fts3ExprPhraseCount	server/sqlite3.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	server/sqlite3.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	server/sqlite3.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	server/sqlite3.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	server/sqlite3.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	server/sqlite3.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	server/sqlite3.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FreeExprNode	server/sqlite3.c	/^static void fts3FreeExprNode(Fts3Expr *p){$/;"	f	file:
fts3FunctionArg	server/sqlite3.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	server/sqlite3.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	server/sqlite3.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	server/sqlite3.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	server/sqlite3.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	server/sqlite3.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GetVarint32	server/sqlite3.c	129790;"	d	file:
fts3Getint	server/sqlite3.c	/^static int fts3Getint(const char **pz){$/;"	f	file:
fts3GobbleInt	server/sqlite3.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	server/sqlite3.c	129274;"	d	file:
fts3HashCount	server/sqlite3.c	129298;"	d	file:
fts3HashData	server/sqlite3.c	129291;"	d	file:
fts3HashFind	server/sqlite3.c	129273;"	d	file:
fts3HashFindElem	server/sqlite3.c	129275;"	d	file:
fts3HashFirst	server/sqlite3.c	129289;"	d	file:
fts3HashFree	server/sqlite3.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	server/sqlite3.c	129271;"	d	file:
fts3HashInsert	server/sqlite3.c	129272;"	d	file:
fts3HashInsertElement	server/sqlite3.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	server/sqlite3.c	129292;"	d	file:
fts3HashKeysize	server/sqlite3.c	129293;"	d	file:
fts3HashMalloc	server/sqlite3.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	server/sqlite3.c	129290;"	d	file:
fts3IncrmergeAppend	server/sqlite3.c	/^static int fts3IncrmergeAppend($/;"	f	file:
fts3IncrmergeChomp	server/sqlite3.c	/^static int fts3IncrmergeChomp($/;"	f	file:
fts3IncrmergeCsr	server/sqlite3.c	/^static int fts3IncrmergeCsr($/;"	f	file:
fts3IncrmergeHintLoad	server/sqlite3.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeHintPop	server/sqlite3.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:
fts3IncrmergeHintPush	server/sqlite3.c	/^static void fts3IncrmergeHintPush($/;"	f	file:
fts3IncrmergeHintStore	server/sqlite3.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeLoad	server/sqlite3.c	/^static int fts3IncrmergeLoad($/;"	f	file:
fts3IncrmergeOutputIdx	server/sqlite3.c	/^static int fts3IncrmergeOutputIdx( $/;"	f	file:
fts3IncrmergePush	server/sqlite3.c	/^static int fts3IncrmergePush($/;"	f	file:
fts3IncrmergeRelease	server/sqlite3.c	/^static void fts3IncrmergeRelease($/;"	f	file:
fts3IncrmergeWriter	server/sqlite3.c	/^static int fts3IncrmergeWriter( $/;"	f	file:
fts3InitVtab	server/sqlite3.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	server/sqlite3.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	server/sqlite3.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	server/sqlite3.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IntegrityCheck	server/sqlite3.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:
fts3IsAppendable	server/sqlite3.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:
fts3IsEmpty	server/sqlite3.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	server/sqlite3.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	server/sqlite3.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LogMerge	server/sqlite3.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:
fts3LogMerge	server/sqlite3.c	139522;"	d	file:
fts3MallocZero	server/sqlite3.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	server/sqlite3.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	server/sqlite3.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	server/sqlite3.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	server/sqlite3.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	server/sqlite3.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	server/sqlite3.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	server/sqlite3.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	server/sqlite3.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	server/sqlite3.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	server/sqlite3.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	server/sqlite3.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	server/sqlite3.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	server/sqlite3.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	server/sqlite3.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	server/sqlite3.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	server/sqlite3.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	server/sqlite3.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	server/sqlite3.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	server/sqlite3.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	server/sqlite3.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	server/sqlite3.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	server/sqlite3.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	server/sqlite3.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	server/sqlite3.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	server/sqlite3.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	server/sqlite3.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	server/sqlite3.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	server/sqlite3.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PromoteSegments	server/sqlite3.c	/^static int fts3PromoteSegments($/;"	f	file:
fts3PutColNumber	server/sqlite3.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	server/sqlite3.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	server/sqlite3.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	server/sqlite3.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadEndBlockField	server/sqlite3.c	/^static void fts3ReadEndBlockField($/;"	f	file:
fts3ReadExprList	server/sqlite3.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	server/sqlite3.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	server/sqlite3.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	server/sqlite3.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	server/sqlite3.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	server/sqlite3.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RemoveSegdirEntry	server/sqlite3.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:
fts3RenameMethod	server/sqlite3.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RepackSegdirLevel	server/sqlite3.c	/^static int fts3RepackSegdirLevel($/;"	f	file:
fts3ReversePoslist	server/sqlite3.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	server/sqlite3.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	server/sqlite3.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	server/sqlite3.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	server/sqlite3.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	server/sqlite3.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	server/sqlite3.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	server/sqlite3.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	server/sqlite3.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	server/sqlite3.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	server/sqlite3.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	server/sqlite3.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	server/sqlite3.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	server/sqlite3.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	server/sqlite3.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	server/sqlite3.c	139607;"	d	file:
fts3SegReaderIsRootOnly	server/sqlite3.c	139608;"	d	file:
fts3SegReaderNext	server/sqlite3.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	server/sqlite3.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	server/sqlite3.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	server/sqlite3.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	server/sqlite3.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	server/sqlite3.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	server/sqlite3.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	server/sqlite3.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	server/sqlite3.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	server/sqlite3.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentIsMaxLevel	server/sqlite3.c	/^static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){$/;"	f	file:
fts3SegmentMaxLevel	server/sqlite3.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	server/sqlite3.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	server/sqlite3.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	server/sqlite3.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SetEstimatedRows	server/sqlite3.c	/^static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
fts3SetHasStat	server/sqlite3.c	/^static int fts3SetHasStat(Fts3Table *p){$/;"	f	file:
fts3SnippetAdvance	server/sqlite3.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	server/sqlite3.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	server/sqlite3.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	server/sqlite3.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	server/sqlite3.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	server/sqlite3.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	server/sqlite3.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	server/sqlite3.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	server/sqlite3.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	server/sqlite3.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StartNode	server/sqlite3.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:
fts3StrCompare	server/sqlite3.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	server/sqlite3.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	server/sqlite3.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	server/sqlite3.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermCmp	server/sqlite3.c	/^static int fts3TermCmp($/;"	f	file:
fts3TermSegReaderCursor	server/sqlite3.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	server/sqlite3.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	server/sqlite3.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	server/sqlite3.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TreeFinishNode	server/sqlite3.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3TruncateNode	server/sqlite3.c	/^static int fts3TruncateNode($/;"	f	file:
fts3TruncateSegment	server/sqlite3.c	/^static int fts3TruncateSegment($/;"	f	file:
fts3UpdateDocTotals	server/sqlite3.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	server/sqlite3.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	server/sqlite3.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	server/sqlite3.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	server/sqlite3.c	/^static int fts3WriteSegment($/;"	f	file:
fts3Writelock	server/sqlite3.c	/^static int fts3Writelock(Fts3Table *p){$/;"	f	file:
fts3_isalnum	server/sqlite3.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	server/sqlite3.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	server/sqlite3.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	server/sqlite3.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	server/sqlite3.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	server/sqlite3.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	server/sqlite3.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	server/sqlite3.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	server/sqlite3.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	server/sqlite3.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	server/sqlite3.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	server/sqlite3.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	server/sqlite3.c	/^static int fts3isspace(char c){$/;"	f	file:
fts3tokBestIndexMethod	server/sqlite3.c	/^static int fts3tokBestIndexMethod($/;"	f	file:
fts3tokCloseMethod	server/sqlite3.c	/^static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokColumnMethod	server/sqlite3.c	/^static int fts3tokColumnMethod($/;"	f	file:
fts3tokConnectMethod	server/sqlite3.c	/^static int fts3tokConnectMethod($/;"	f	file:
fts3tokDequoteArray	server/sqlite3.c	/^static int fts3tokDequoteArray($/;"	f	file:
fts3tokDisconnectMethod	server/sqlite3.c	/^static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3tokEofMethod	server/sqlite3.c	/^static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokFilterMethod	server/sqlite3.c	/^static int fts3tokFilterMethod($/;"	f	file:
fts3tokNextMethod	server/sqlite3.c	/^static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokOpenMethod	server/sqlite3.c	/^static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3tokQueryTokenizer	server/sqlite3.c	/^static int fts3tokQueryTokenizer($/;"	f	file:
fts3tokResetCursor	server/sqlite3.c	/^static void fts3tokResetCursor(Fts3tokCursor *pCsr){$/;"	f	file:
fts3tokRowidMethod	server/sqlite3.c	/^static int fts3tokRowidMethod($/;"	f	file:
ftsCompareFunction	server/sqlite3.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	server/sqlite3.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	server/sqlite3.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	server/sqlite3.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
funcFlags	server/sqlite3.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
func_at_file	xdrpp/ar-lib	/^func_at_file ()$/;"	f
func_cl_dashL	xdrpp/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	xdrpp/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	xdrpp/compile	/^func_cl_wrapper ()$/;"	f
func_error	xdrpp/ar-lib	/^func_error ()$/;"	f
func_file_conv	xdrpp/ar-lib	/^func_file_conv ()$/;"	f
func_file_conv	xdrpp/compile	/^func_file_conv ()$/;"	f
functionDestroy	server/sqlite3.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	server/sqlite3.c	/^static FuncDef *functionSearch($/;"	f	file:
g_elapsed	server/sqlite3.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_start	server/sqlite3.c	/^static sqlite_uint64 g_start;$/;"	v	file:
gai_category	xdrpp/xdrpp/socket.cc	/^gai_category()$/;"	f	namespace:xdr
gai_category_impl	xdrpp/xdrpp/socket.cc	/^struct gai_category_impl : public std::error_category {$/;"	s	namespace:xdr	file:
gen	xdrpp/xdrc/gen_hh.cc	/^gen(std::ostream &os, const rpc_enum &e)$/;"	f	namespace:__anon26
gen	xdrpp/xdrc/gen_hh.cc	/^gen(std::ostream &os, const rpc_program &u)$/;"	f	namespace:__anon26
gen	xdrpp/xdrc/gen_hh.cc	/^gen(std::ostream &os, const rpc_struct &s)$/;"	f	namespace:__anon26
gen	xdrpp/xdrc/gen_hh.cc	/^gen(std::ostream &os, const rpc_union &u)$/;"	f	namespace:__anon26
gen_cc	xdrpp/xdrc/xdrc.cc	/^gen_cc(std::ostream &)$/;"	f
gen_decl	xdrpp/xdrc/gen_server.cc	/^gen_decl(std::ostream &os, const rpc_program &u, const rpc_vers &v)$/;"	f	namespace:__anon27
gen_def	xdrpp/xdrc/gen_server.cc	/^gen_def(std::ostream &os, const rpc_program &u, const rpc_vers &v)$/;"	f	namespace:__anon27
gen_embedded	xdrpp/xdrc/gen_hh.cc	/^gen_embedded(std::ostream &os, const rpc_decl &d)$/;"	f	namespace:__anon26
gen_hh	xdrpp/xdrc/gen_hh.cc	/^gen_hh(std::ostream &os)$/;"	f
gen_server	xdrpp/xdrc/gen_server.cc	/^gen_server(std::ostream &os)$/;"	f
gen_server_internal	xdrpp/xdrc/gen_server.cc	/^gen_server_internal(std::ostream &os, bool cc)$/;"	f	namespace:__anon27
gen_servercc	xdrpp/xdrc/gen_server.cc	/^gen_servercc(std::ostream &os)$/;"	f
gen_vers	xdrpp/xdrc/gen_hh.cc	/^gen_vers(std::ostream &os, const rpc_program &u, const rpc_vers &v)$/;"	f	namespace:__anon26
generateColumnNames	server/sqlite3.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	server/sqlite3.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	server/sqlite3.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	server/sqlite3.c	/^static void generateSortTail($/;"	f	file:
generateWithRecursiveQuery	server/sqlite3.c	/^static void generateWithRecursiveQuery($/;"	f	file:
geomCallback	server/sqlite3.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get	cacheserver/lrucache.hh	/^  T get(std::string key) {$/;"	f	class:lru_cache
get	cacheserver/serverdb.cc	/^ServerDB::get(const string &key)$/;"	f	class:ServerDB
get	server/serverdb.cc	/^ServerDB::get(const string &path)$/;"	f	class:ServerDB
get	server/sqlstmt.h	/^  sqlite3_stmt *get() { return stmt_; }$/;"	f	class:SQLStmt
get	xdrpp/xdrc/union.h	/^  T *get() { return get_ptr().get(); }$/;"	f	class:union_ptr
get	xdrpp/xdrc/union.h	/^  T *get() { verify(); return &val_; }$/;"	f	class:union_entry
get	xdrpp/xdrc/union.h	/^  const T *get() const { return get_ptr().get(); }$/;"	f	class:union_ptr
get	xdrpp/xdrc/union.h	/^  const T *get() const { verify(); return &val_; }$/;"	f	class:union_entry
get	xdrpp/xdrpp/socket.h	/^  int get() const { return fd_; }$/;"	f	class:xdr::unique_fd
get2byte	server/sqlite3.c	51811;"	d	file:
get2byteNotZero	server/sqlite3.c	52145;"	d	file:
get32	xdrpp/xdrpp/marshal.h	/^  static std::uint32_t get32(const std::uint32_t *&p) { return *p++; }$/;"	f	struct:xdr::marshal_noswap
get32	xdrpp/xdrpp/marshal.h	/^  static std::uint32_t get32(const std::uint32_t *&p) { return swap32(*p++); }$/;"	f	struct:xdr::marshal_swap
get4byte	server/sqlite3.c	51813;"	d	file:
get64	xdrpp/xdrpp/marshal.h	/^  static std::uint64_t get64(const std::uint32_t *&p) {$/;"	f	struct:xdr::marshal_noswap
get64	xdrpp/xdrpp/marshal.h	/^  static std::uint64_t get64(const std::uint32_t *&p) {$/;"	f	struct:xdr::marshal_swap
getAbsoluteLevel	server/sqlite3.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAndInitPage	server/sqlite3.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	server/sqlite3.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCacheContents	cacheserver/cacheserverimpl.cc	/^cache_api_v1_server::getCacheContents(std::unique_ptr<longstring> arg)$/;"	f	class:cache_api_v1_server
getCacheContents	libclient/client.cc	/^Client::getCacheContents(const string& cacheHost,$/;"	f	class:Client
getCacheContents_t	include/server.hh	/^  struct getCacheContents_t {$/;"	s	struct:cache_api_v1
getCacheServer	libclient/client.cc	/^Client::getCacheServer(const string& url)$/;"	f	class:Client
getCacheServer	server/serverimpl.cc	/^api_v1_server::getCacheServer(std::unique_ptr<longstring> arg)$/;"	f	class:api_v1_server
getCacheServer_t	include/server.hh	/^  struct getCacheServer_t {$/;"	s	struct:api_v1
getCellInfo	server/sqlite3.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	server/sqlite3.c	55909;"	d	file:
getDigits	server/sqlite3.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getDoubleArg	server/sqlite3.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:
getHttpHeader	include/helpers.cc	/^getHttpHeader(int socket,$/;"	f
getIntArg	server/sqlite3.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:
getIntFromStmt	server/sqlite3.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLockingMode	server/sqlite3.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMD5Digest	include/helpers.cc	/^getMD5Digest(const string& str, uint128_t* digest) $/;"	f
getMask	server/sqlite3.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getMonotonicNsec	include/helpers.cc	/^getMonotonicNsec() {$/;"	f
getNextNode	server/sqlite3.c	/^static int getNextNode($/;"	f	file:
getNextString	server/sqlite3.c	/^static int getNextString($/;"	f	file:
getNextToken	server/sqlite3.c	/^static int getNextToken($/;"	f	file:
getNodeSize	server/sqlite3.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	server/sqlite3.c	/^static int getOverflowPage($/;"	f	file:
getOwnAddress	include/helpers.cc	/^getOwnAddress()$/;"	f
getPageReferenced	server/sqlite3.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getRowTrigger	server/sqlite3.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	server/sqlite3.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:
getTempStore	server/sqlite3.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTextArg	server/sqlite3.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:
getVarint	server/sqlite3.c	12947;"	d	file:
getVarint32	server/sqlite3.c	12942;"	d	file:
getVirtualNodeDigests	server/serverimpl.cc	/^getVirtualNodeDigests(const string& ip)$/;"	f	file:
get_addrinfo	xdrpp/xdrpp/socket.cc	/^unique_addrinfo get_addrinfo(const char *host, int socktype,$/;"	f	namespace:xdr
get_autocommit	server/sqlite3.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	server/sqlite3.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_bytes	xdrpp/xdrpp/marshal.cc	/^marshal_base::get_bytes(const std::uint32_t *&pr, void *buf, std::size_t len)$/;"	f	class:xdr::marshal_base
get_dirname	xdrpp/ylwrap	/^get_dirname ()$/;"	f
get_numinfo	xdrpp/xdrpp/socket.cc	/^void get_numinfo(const sockaddr *sa, socklen_t salen,$/;"	f	namespace:xdr
get_ptr	xdrpp/xdrc/union.h	/^  const std::shared_ptr<T> &get_ptr() const { return *super::get(); }$/;"	f	class:union_ptr
get_ptr	xdrpp/xdrc/union.h	/^  std::shared_ptr<T> &get_ptr() { return *super::get(); }$/;"	f	class:union_ptr
get_table	server/sqlite3.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
getdb	server/sqlstmt.h	/^  sqlite3 *getdb() { return sqlite3_db_handle(stmt_); }$/;"	f	class:SQLStmt
getmsg	xdrpp/tests/srpc.cc	/^getmsg(int fd)$/;"	f
getnewid	xdrpp/xdrc/parse.cc	/^getnewid(string id, bool repeats_bad)$/;"	f	file:
gettype	xdrpp/xdrc/xdrc_internal.h	/^  symtype gettype () const { return type; }$/;"	f	struct:rpc_sym
give_advice	xdrpp/missing	/^give_advice ()$/;"	f
globInfo	server/sqlite3.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	server/sqlite3.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
go	server/sqlstmt.h	/^    static SQLStmt &go(SQLStmt &s, const std::tuple<Args...> &t) {$/;"	f	struct:SQLStmt::_tparm_helper
go	server/sqlstmt.h	/^  static SQLStmt &go(SQLStmt &s, const std::tuple<Args...> &t) { return s; }$/;"	f	struct:SQLStmt::_tparm_helper
groupConcatFinalize	server/sqlite3.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	server/sqlite3.c	/^static void groupConcatStep($/;"	f	file:
group_	xdrpp/xdrpp/iniparse.h	/^  string group_;		\/\/!< Name of the group containing property$/;"	m	class:xdr::IniLine
growOpArray	server/sqlite3.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:
growVTrans	server/sqlite3.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	server/sqlite3.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
guard	xdrpp/ylwrap	/^guard ()$/;"	f
guard_token	xdrpp/xdrc/xdrc.cc	/^guard_token(const string &extra)$/;"	f
h	server/sqlite3.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	server/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	server/sqlite3.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	server/sqlite3.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	server/sqlite3.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	server/sqlite3.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hMap	server/sqlite3.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMap	server/sqlite3.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:
hMutex	server/sqlite3.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:
hPending	server/sqlite3.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	server/sqlite3.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
handleDeferredMoveto	server/sqlite3.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:
handleMovedCursor	server/sqlite3.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:
hasColumn	server/sqlite3.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:
hasCompound	server/sqlite3.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:
hasHotJournal	server/sqlite3.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasKey	server/serverdb.cc	/^ServerDB::hasKey(const string &path)$/;"	f	class:ServerDB
hasMutex	server/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	server/sqlite3.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	server/sqlite3.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	server/sqlite3.c	52213;"	d	file:
hasSharedCacheTableLock	server/sqlite3.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	server/sqlite3.c	52212;"	d	file:
hasVowel	server/sqlite3.c	/^static int hasVowel(const char *z){$/;"	f	file:
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = false;$/;"	m	struct:xdr::detail::xdr_container_base
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = false;$/;"	m	struct:xdr::detail::xdr_struct_base_vs
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = false;$/;"	m	struct:xdr::xdr_traits
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = false;$/;"	m	struct:xdr::xdr_traits_base
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = false;;$/;"	m	struct:xdr::xdr_traits
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = true;$/;"	m	struct:xdr::detail::xdr_container_base
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = true;$/;"	m	struct:xdr::detail::xdr_struct_base_fs
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = true;$/;"	m	struct:xdr::xdr_fp_base
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = true;$/;"	m	struct:xdr::xdr_integral_base
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr bool has_fixed_size = true;$/;"	m	struct:xdr::xdr_struct_base
has_fixed_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t has_fixed_size = true;$/;"	m	struct:xdr::xdr_traits
hashDestroy	server/sqlite3.c	/^static void hashDestroy(void *p){$/;"	f	file:
hdr	server/sqlite3.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon11	file:
hdr	server/sqlite3.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	server/sqlite3.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
head	cacheserver/lrucache.hh	/^  node* head;$/;"	m	class:lru_cache
heartbeat	include/server.hh	/^struct heartbeat {$/;"	s
heartbeat	libclient/client.cc	/^Client::heartbeat(const string& ip)$/;"	f	class:Client
heartbeat_loop	cacheserver/cacheserver.cc	/^void* heartbeat_loop(void * val)$/;"	f
heightOfExpr	server/sqlite3.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	server/sqlite3.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	server/sqlite3.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
hexFunc	server/sqlite3.c	/^static void hexFunc($/;"	f	file:
hexdigits	server/sqlite3.c	/^static const char hexdigits[] = {$/;"	v	file:
hexdump	xdrpp/xdrpp/printer.cc	/^hexdump(const void *_data, size_t len)$/;"	f	namespace:xdr
hints	server/sqlite3.c	/^  u8 hints;                             \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:
hlmask	server/sqlite3.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
host_alias	xdrpp/Makefile	/^host_alias = $/;"	m
ht	server/sqlite3.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	server/sqlite3.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	server/sqlite3.c	/^typedef u16 ht_slot;$/;"	t	file:
htmldir	xdrpp/Makefile	/^htmldir = ${docdir}$/;"	m
htsize	server/sqlite3.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	server/sqlite3.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
httpclient	include/httpclient.cc	/^httpclient::httpclient(string host): _socket(0), _initialized(false)$/;"	f	class:httpclient
httpclient	include/httpclient.hh	/^class httpclient {$/;"	c
i	server/sqlite3.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::MemValue	file:
i	server/sqlite3.c	/^    int i;                                     \/* Integer value *\/$/;"	m	union:Walker::__anon8	file:
i	server/sqlite3.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon1	file:
i	server/sqlite3.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:
i	server/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	server/sqlite3.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	server/sqlite3.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	server/sqlite3.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	server/sqlite3.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	server/sqlite3.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	server/sqlite3.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	server/sqlite3.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:
iAddr	server/sqlite3.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	server/sqlite3.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	server/sqlite3.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:
iArg	server/sqlite3.c	/^  int iArg;                       \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:
iArg	server/sqlite3.c	/^  u32 iArg;                 \/* Extra argument *\/$/;"	m	struct:sPragmaNames	file:
iBatch	server/sqlite3.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBlock	server/sqlite3.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:
iBreak	server/sqlite3.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iBufEnd	server/sqlite3.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufStart	server/sqlite3.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iCacheCnt	server/sqlite3.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	server/sqlite3.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	server/sqlite3.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	server/sqlite3.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:
iChange	server/sqlite3.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChild	server/sqlite3.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:
iCol	server/sqlite3.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	server/sqlite3.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	server/sqlite3.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColFilter	server/sqlite3.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	server/sqlite3.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	server/sqlite3.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	server/sqlite3.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	server/sqlite3.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	server/sqlite3.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	server/sqlite3.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iColumn	server/sqlite3.h	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby
iColumn	server/sqlite3.h	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iConstExprReg	server/sqlite3.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon5	file:
iContinue	server/sqlite3.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	server/sqlite3.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	server/sqlite3.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:
iCurrent	server/sqlite3.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrentBlock	server/sqlite3.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCurrentTime	server/sqlite3.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:
iCursor	server/sqlite3.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDb	server/sqlite3.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	server/sqlite3.c	/^  i8 iDb;               \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	server/sqlite3.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	server/sqlite3.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	server/sqlite3.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon7	file:
iDefaultCol	server/sqlite3.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	server/sqlite3.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	server/sqlite3.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	server/sqlite3.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	server/sqlite3.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	server/sqlite3.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	server/sqlite3.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	server/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	server/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDocid	server/sqlite3.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:
iDoclistToken	server/sqlite3.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	server/sqlite3.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:
iEnd	server/sqlite3.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:
iEnd	server/sqlite3.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iEndBlock	server/sqlite3.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEof	server/sqlite3.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:
iEof	server/sqlite3.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:
iEquiv	server/sqlite3.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
iFirst	server/sqlite3.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iFixedOp	server/sqlite3.c	/^  int iFixedOp;        \/* Never back out opcodes iFixedOp-1 or earlier *\/$/;"	m	struct:Parse	file:
iForeGuard	server/sqlite3.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	server/sqlite3.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	server/sqlite3.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	server/sqlite3.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	server/sqlite3.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iGet	server/sqlite3.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:
iHash	server/sqlite3.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:
iHdrOffset	server/sqlite3.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHdrOffset	server/sqlite3.c	/^  u32 iHdrOffset;       \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:
iHead	server/sqlite3.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	server/sqlite3.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:
iIdx	server/sqlite3.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	server/sqlite3.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	server/sqlite3.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	server/sqlite3.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLangid	server/sqlite3.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	server/sqlite3.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLangid	server/sqlite3.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:
iLastCol	server/sqlite3.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	server/sqlite3.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	server/sqlite3.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	server/sqlite3.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	server/sqlite3.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	server/sqlite3.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLevel	server/sqlite3.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iLevel	server/sqlite3.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:
iLevel	server/sqlite3.h	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iLimit	server/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	server/sqlite3.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxDocid	server/sqlite3.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iMaxKey	server/sqlite3.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	server/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	server/sqlite3.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMemory	server/sqlite3.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:
iMin	server/sqlite3.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:
iMinDocid	server/sqlite3.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iNext	server/sqlite3.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	server/sqlite3.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon14	file:
iNext	server/sqlite3.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	server/sqlite3.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	server/sqlite3.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:
iNodeSize	server/sqlite3.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	server/sqlite3.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:
iOff	server/sqlite3.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:
iOff	server/sqlite3.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	server/sqlite3.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	server/sqlite3.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	server/sqlite3.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	server/sqlite3.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	server/sqlite3.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	server/sqlite3.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOp	server/sqlite3.c	/^  int iOp;                        \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:
iOp	server/sqlite3.c	/^  int iOp;              \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:
iOrderByCol	server/sqlite3.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:
iOverflow	server/sqlite3.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iPKey	server/sqlite3.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the primary key *\/$/;"	m	struct:Table	file:
iPadding1	server/sqlite3.c	/^  int iPadding1;      \/* Padding for 8-byte alignment *\/$/;"	m	struct:Mem	file:
iPage	server/sqlite3.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iParent	server/sqlite3.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iPartIdxTab	server/sqlite3.c	/^  int iPartIdxTab;     \/* Table corresponding to a partial index *\/$/;"	m	struct:Parse	file:
iPkSortOrder	server/sqlite3.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:
iPos	server/sqlite3.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:
iPos	server/sqlite3.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	server/sqlite3.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	server/sqlite3.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	server/sqlite3.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrev	server/sqlite3.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:
iPrevDocid	server/sqlite3.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	server/sqlite3.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	server/sqlite3.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrior	server/sqlite3.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	server/sqlite3.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:
iRangeReg	server/sqlite3.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReadOff	server/sqlite3.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:
iReg	server/sqlite3.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	server/sqlite3.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightJoinTable	server/sqlite3.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	server/sqlite3.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon15	file:
iRowid	server/sqlite3.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:
iRowid	server/sqlite3.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:
iRowid	server/sqlite3.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iRowid	server/sqlite3.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iRowid	server/sqlite3.h	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info
iSDParm	server/sqlite3.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iSavepoint	server/sqlite3.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSdst	server/sqlite3.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iSelectId	server/sqlite3.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	server/sqlite3.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSize	server/sqlite3.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	server/sqlite3.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	server/sqlite3.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSortIdx	server/sqlite3.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:
iSorterColumn	server/sqlite3.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iSrcLine	server/sqlite3.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:
iStart	server/sqlite3.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:
iStart	server/sqlite3.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iStartBlock	server/sqlite3.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStartOff	server/sqlite3.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:
iStatement	server/sqlite3.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	server/sqlite3.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	server/sqlite3.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	server/sqlite3.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	server/sqlite3.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSyncPoint	server/sqlite3.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iTab	server/sqlite3.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTab	server/sqlite3.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:
iTabCur	server/sqlite3.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	server/sqlite3.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	server/sqlite3.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	server/sqlite3.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	server/sqlite3.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	server/sqlite3.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	server/sqlite3.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	server/sqlite3.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iTermOffset	server/sqlite3.h	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
iToken	server/sqlite3.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:
iToken	server/sqlite3.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	server/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	server/sqlite3.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	server/sqlite3.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	server/sqlite3.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iVal	server/sqlite3.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:
iValue	server/sqlite3.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon3	file:
iVersion	server/sqlite3.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	server/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	server/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	server/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	server/sqlite3.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	server/sqlite3.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iVersion	server/sqlite3.h	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs
iVersion	server/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods
iVersion	server/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_module
iVersion	server/sqlite3.h	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2
iWriteOff	server/sqlite3.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:
iZero	server/sqlite3.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	server/sqlite3.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	server/sqlite3.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	server/sqlite3.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	server/sqlite3.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	server/sqlite3.c	/^static int icuCreate($/;"	f	file:
icuDestroy	server/sqlite3.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	server/sqlite3.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	server/sqlite3.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	server/sqlite3.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	server/sqlite3.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	server/sqlite3.c	/^static int icuNext($/;"	f	file:
icuOpen	server/sqlite3.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	server/sqlite3.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	server/sqlite3.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	server/sqlite3.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	server/sqlite3.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	server/sqlite3.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	server/sqlite3.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:
id	server/sqlite3.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	server/sqlite3.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	server/sqlite3.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_const
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_decl
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_enum
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_proc
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_program
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_struct
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_union
id	xdrpp/xdrc/xdrc_internal.h	/^  string id;$/;"	m	struct:rpc_vers
id_space	xdrpp/xdrc/gen_hh.cc	/^id_space(const string &s)$/;"	f	namespace:__anon26
identLength	server/sqlite3.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	server/sqlite3.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
ids	xdrpp/xdrc/xdrc.cc	/^std::set<string> ids;$/;"	v
idx	server/sqlite3.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxHash	server/sqlite3.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	server/sqlite3.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
idxNum	server/sqlite3.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxNum	server/sqlite3.h	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info
idxStr	server/sqlite3.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
idxStr	server/sqlite3.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	server/sqlite3.h	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info
idxType	server/sqlite3.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:
idxaff	server/sqlite3.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:
ignoreline	xdrpp/xdrpp/iniparse.cc	/^ignoreline(const IniLine &li)$/;"	f	namespace:xdr
in	server/sqlite3.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon16	typeref:struct:WhereLevel::__anon16::__anon17	file:
inNormalWrite	server/sqlite3.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	server/sqlite3.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	server/sqlite3.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	server/sqlite3.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	server/sqlite3.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
inVtabMethod	server/sqlite3.c	/^  bft inVtabMethod:2;     \/* See comments above *\/$/;"	m	struct:Vdbe	file:
includedir	xdrpp/Makefile	/^includedir = ${prefix}\/include$/;"	m
incrAggDepth	server/sqlite3.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:
incrAggFunctionDepth	server/sqlite3.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:
incrPhraseTokenNext	server/sqlite3.c	/^static int incrPhraseTokenNext($/;"	f	file:
incrVacuum	server/sqlite3.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	server/sqlite3.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:
indenter	xdrpp/xdrc/xdrc_internal.h	/^  indenter() : omanip(this, &indenter::do_indent) {}$/;"	f	struct:indenter
indenter	xdrpp/xdrc/xdrc_internal.h	/^struct indenter : omanip {$/;"	s
indexMightHelpWithOrderBy	server/sqlite3.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:
indexable	server/sqlite3.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	server/sqlite3.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
infodir	xdrpp/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
ini_parse	xdrpp/xdrpp/iniparse.cc	/^ini_parse(IniActions &a, string file)$/;"	f	namespace:xdr
ini_runparse	xdrpp/xdrpp/iniparse.cc	/^ini_runparse(IniActions &a, IniLine &st, std::istream &s)$/;"	f	namespace:xdr
ini_unescape	xdrpp/xdrpp/iniparse.cc	/^ini_unescape(string::const_iterator i, string::const_iterator e, string *out)$/;"	f	namespace:xdr
init	server/sqlite3.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
init	xdrpp/xdrpp/msgsock.cc	/^msg_sock::init()$/;"	f	class:xdr::msg_sock
initAvgEq	server/sqlite3.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:
initMaskSet	server/sqlite3.c	113809;"	d	file:
initcb	xdrpp/xdrpp/msgsock.cc	/^msg_sock::initcb()$/;"	f	class:xdr::msg_sock
inject_cb	xdrpp/xdrpp/pollset.h	/^  template<typename CB> void inject_cb(CB &&cb) {$/;"	f	class:xdr::pollset_plus::wake_type
inject_cb_vec	xdrpp/xdrpp/pollset.cc	/^pollset_plus::inject_cb_vec(std::vector<cb_t>::iterator b,$/;"	f	class:xdr::pollset_plus
ino	server/sqlite3.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	server/sqlite3.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
input	xdrpp/xdrpp/msgsock.cc	/^msg_sock::input()$/;"	f	class:xdr::msg_sock
input_file	xdrpp/xdrc/xdrc.cc	/^string input_file;$/;"	v
insertBinaryOperator	server/sqlite3.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	server/sqlite3.c	/^static void insertCell($/;"	f	file:
insertElement	server/sqlite3.c	/^static void insertElement($/;"	f	file:
insert_head	cacheserver/lrucache.hh	/^  void insert_head(node* n) {$/;"	f	class:lru_cache
install_sh	xdrpp/Makefile	/^install_sh = ${SHELL} \/afs\/.ir\/users\/a\/b\/abhay\/cs244b\/lab1\/xdrpp\/install-sh$/;"	m
install_sh_DATA	xdrpp/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	xdrpp/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	xdrpp/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instrFunc	server/sqlite3.c	/^static void instrFunc($/;"	f	file:
intKey	server/sqlite3.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:
intKeyLeaf	server/sqlite3.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:
intTestFunc	server/sqlite3.c	/^static void intTestFunc($/;"	f	file:
integer	server/sqlstmt.h	/^  sqlite3_int64 integer(int i) {$/;"	f	class:SQLStmt
interruptx	server/sqlite3.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	server/sqlite3.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateCachedKeyInfo	server/sqlite3.c	/^static void invalidateCachedKeyInfo(sqlite3 *db){$/;"	f	file:
invalidateIncrblobCursors	server/sqlite3.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	server/sqlite3.c	52601;"	d	file:
invalidateOverflowCache	server/sqlite3.c	52554;"	d	file:
invalidateTempStorage	server/sqlite3.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invoke	xdrpp/xdrpp/srpc.h	/^  invoke(const typename P::arg_wire_type &a) {$/;"	f	class:xdr::synchronous_client_base
invoke	xdrpp/xdrpp/srpc.h	/^  template<typename P> typename P::res_type invoke() {$/;"	f	class:xdr::synchronous_client_base
invokeValueDestructor	server/sqlite3.c	/^static int invokeValueDestructor($/;"	f	file:
isAttached	server/sqlite3.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	server/sqlite3.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isConnected	libclient/client.cc	/^Client::isConnected()$/;"	f	class:Client
isConsonant	server/sqlite3.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	server/sqlite3.c	/^    unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isCovering	server/sqlite3.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:
isDate	server/sqlite3.c	/^static int isDate($/;"	f	file:
isDeferred	server/sqlite3.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	server/sqlite3.c	138177;"	d	file:
isDirty	server/sqlite3.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:
isDistinctRedundant	server/sqlite3.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	server/sqlite3.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	server/sqlite3.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isEphemeral	server/sqlite3.c	/^  Bool isEphemeral:1;   \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:
isError	server/sqlite3.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	server/sqlite3.c	/^static int isFatalError(int rc){$/;"	f	file:
isInit	server/sqlite3.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	server/sqlite3.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	server/sqlite3.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	server/sqlite3.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	server/sqlite3.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	server/sqlite3.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon2	file:
isLikeOrGlob	server/sqlite3.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	server/sqlite3.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	server/sqlite3.c	20351;"	d	file:
isMallocInit	server/sqlite3.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	server/sqlite3.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	server/sqlite3.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	server/sqlite3.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	server/sqlite3.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNot	server/sqlite3.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	server/sqlite3.c	41597;"	d	file:
isOrdered	server/sqlite3.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
isOrdered	server/sqlite3.c	/^  Bool isOrdered:1;     \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isOrdered	server/sqlite3.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:
isPCacheInit	server/sqlite3.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	server/sqlite3.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:
isPinned	server/sqlite3.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:
isPrefix	server/sqlite3.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	server/sqlite3.c	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isReadonly	server/sqlite3.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRecursive	server/sqlite3.c	/^    unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item	file:
isRequireSeek	server/sqlite3.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isResized	server/sqlite3.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:
isSimpleCount	server/sqlite3.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	server/sqlite3.c	69093;"	d	file:
isSystemTable	server/sqlite3.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTable	server/sqlite3.c	/^  Bool isTable:1;       \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTnct	server/sqlite3.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:
isTransactionSavepoint	server/sqlite3.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	server/sqlite3.c	111000;"	d	file:
isView	server/sqlite3.c	111001;"	d	file:
isView	server/sqlite3.c	111504;"	d	file:
isView	server/sqlite3.c	93544;"	d	file:
isView	server/sqlite3.c	93545;"	d	file:
isView	server/sqlite3.c	93823;"	d	file:
isView	server/sqlite3.c	97783;"	d	file:
isView	server/sqlite3.c	97784;"	d	file:
isView	server/sqlite3.c	98286;"	d	file:
isVowel	server/sqlite3.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	server/sqlite3.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
is_big_endian	xdrpp/xdrpp/endian.h	/^constexpr bool is_big_endian = true;$/;"	m	namespace:xdr
is_bytes	xdrpp/xdrpp/types.h	/^  static constexpr bool is_bytes = false;$/;"	m	struct:xdr::xdr_traits
is_bytes	xdrpp/xdrpp/types.h	/^  static constexpr bool is_bytes = false;$/;"	m	struct:xdr::xdr_traits_base
is_bytes	xdrpp/xdrpp/types.h	/^  static constexpr bool is_bytes = true;$/;"	m	struct:xdr::xdr_traits
is_class	xdrpp/xdrpp/types.h	/^  static constexpr bool is_class = false;$/;"	m	struct:xdr::xdr_traits
is_class	xdrpp/xdrpp/types.h	/^  static constexpr bool is_class = false;$/;"	m	struct:xdr::xdr_traits_base
is_class	xdrpp/xdrpp/types.h	/^  static constexpr bool is_class = true;$/;"	m	struct:xdr::xdr_struct_base
is_container	xdrpp/xdrpp/types.h	/^  static constexpr bool is_container = false;$/;"	m	struct:xdr::xdr_traits
is_container	xdrpp/xdrpp/types.h	/^  static constexpr bool is_container = false;$/;"	m	struct:xdr::xdr_traits_base
is_container	xdrpp/xdrpp/types.h	/^  static constexpr bool is_container = true;$/;"	m	struct:xdr::detail::xdr_container_base
is_enum	xdrpp/xdrpp/types.h	/^  static constexpr bool is_enum = false;$/;"	m	struct:xdr::xdr_traits
is_enum	xdrpp/xdrpp/types.h	/^  static constexpr bool is_enum = false;$/;"	m	struct:xdr::xdr_traits_base
is_enum	xdrpp/xdrpp/types.h	/^  static constexpr bool is_enum = true;$/;"	m	struct:xdr::xdr_traits
is_numeric	xdrpp/xdrpp/types.h	/^  static constexpr bool is_numeric = false;$/;"	m	struct:xdr::xdr_traits
is_numeric	xdrpp/xdrpp/types.h	/^  static constexpr bool is_numeric = false;$/;"	m	struct:xdr::xdr_traits_base
is_numeric	xdrpp/xdrpp/types.h	/^  static constexpr bool is_numeric = true;$/;"	m	struct:xdr::xdr_fp_base
is_numeric	xdrpp/xdrpp/types.h	/^  static constexpr bool is_numeric = true;$/;"	m	struct:xdr::xdr_integral_base
is_struct	xdrpp/xdrpp/types.h	/^  static constexpr bool is_struct = false;$/;"	m	struct:xdr::xdr_traits
is_struct	xdrpp/xdrpp/types.h	/^  static constexpr bool is_struct = false;$/;"	m	struct:xdr::xdr_traits_base
is_struct	xdrpp/xdrpp/types.h	/^  static constexpr bool is_struct = true;$/;"	m	struct:xdr::xdr_struct_base
is_union	xdrpp/xdrpp/types.h	/^  static constexpr bool is_union = false;$/;"	m	struct:xdr::xdr_traits
is_union	xdrpp/xdrpp/types.h	/^  static constexpr bool is_union = false;$/;"	m	struct:xdr::xdr_traits_base
ix	server/sqlite3.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	server/sqlite3.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
jfd	server/sqlite3.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	server/sqlite3.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	server/sqlite3.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	server/sqlite3.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	server/sqlite3.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	server/sqlite3.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	server/sqlite3.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	server/sqlite3.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	server/sqlite3.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	server/sqlite3.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	server/sqlite3.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	server/sqlite3.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	server/sqlite3.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	server/sqlite3.c	/^static int jrnlWrite($/;"	f	file:
juliandayFunc	server/sqlite3.c	/^static void juliandayFunc($/;"	f	file:
k	server/sqlite3.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:
kOnceFlag	xdrpp/xdrpp/pollset.h	/^  static constexpr int kOnceFlag = 0x4;$/;"	m	class:xdr::pollset
kReadFlag	xdrpp/xdrpp/pollset.h	/^  static constexpr int kReadFlag = 0x1;$/;"	m	class:xdr::pollset
kWriteFlag	xdrpp/xdrpp/pollset.h	/^  static constexpr int kWriteFlag = 0x2;$/;"	m	class:xdr::pollset
key	cacheserver/lrucache.hh	/^    std::string key;$/;"	m	struct:lru_cache::node
key	server/sqlite3.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:
key	server/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	server/sqlite3.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	server/sqlite3.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	server/sqlite3.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:
key_	xdrpp/xdrpp/iniparse.h	/^  string key_;			\/\/!< Key of the property.$/;"	m	class:xdr::IniLine
keywordCode	server/sqlite3.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
labelBkOut	server/sqlite3.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:
langidFromSelect	server/sqlite3.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
lastErrno	server/sqlite3.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	server/sqlite3.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	server/sqlite3.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	server/sqlite3.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	server/sqlite3.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
lastRowid	server/sqlite3.c	/^  i64 lastRowid;        \/* Rowid being deleted by OP_Delete *\/$/;"	m	struct:VdbeCursor	file:
last_insert_rowid	server/sqlite3.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	server/sqlite3.c	/^static void last_insert_rowid($/;"	f	file:
leaf	server/sqlite3.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:
leaveMutex	server/sqlite3.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	server/sqlite3.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon21	file:
leftCursor	server/sqlite3.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	server/sqlite3.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	server/sqlite3.c	/^static void lengthFunc($/;"	f	file:
lhs	server/sqlite3.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon24	file:
lib_LIBRARIES	xdrpp/Makefile	/^lib_LIBRARIES = xdrpp\/libxdrpp.a$/;"	m
libdir	xdrpp/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	xdrpp/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libversion	server/sqlite3.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	server/sqlite3.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	server/sqlite3.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	server/sqlite3.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	server/sqlite3.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	server/sqlite3.c	8156;"	d	file:
limit	server/sqlite3.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
lineno	xdrpp/xdrc/scan.cc	/^int lineno;$/;"	v
list	cacheserver/serverdb.cc	/^ServerDB::list(const string &path)$/;"	f	class:ServerDB
list	server/serverdb.cc	/^ServerDB::list(const string &path)$/;"	f	class:ServerDB
list	server/sqlite3.c	/^    } list;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon12	file:
list	server/sqlite3.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:
list	server/sqlite3.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:
listen_fd_	xdrpp/xdrpp/server.h	/^  unique_fd listen_fd_;$/;"	m	class:xdr::rpc_tcp_listener
litq	xdrpp/xdrc/scan.cc	/^vec<string> litq;$/;"	v
load	include/server.hh	/^  load(Archive &ar, ::cacheTransfer &obj) {$/;"	f	struct:xdr::xdr_traits
load	include/server.hh	/^  load(Archive &ar, ::heartbeat &obj) {$/;"	f	struct:xdr::xdr_traits
load	include/server.hh	/^  load(Archive &ar, ::newCacheServerInfo &obj) {$/;"	f	struct:xdr::xdr_traits
load	xdrpp/xdrpp/cereal.h	/^load(Archive &ar, T &t)$/;"	f	namespace:xdr::detail
load	xdrpp/xdrpp/types.h	/^  template<typename Archive> static void load(Archive &a, T &t) {$/;"	f	struct:xdr::detail::xdr_container_base
load	xdrpp/xdrpp/types.h	/^  template<typename Archive> static void load(Archive &ar, xdr_void &obj) {}$/;"	f	struct:xdr::xdr_traits
loadAnalysis	server/sqlite3.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	server/sqlite3.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat4	server/sqlite3.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:
loadStatTbl	server/sqlite3.c	/^static int loadStatTbl($/;"	f	file:
load_extension	server/sqlite3.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:
local	server/sqlite3.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	server/sqlite3.c	/^static void local_ioerr(){$/;"	f	file:
localedir	xdrpp/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	xdrpp/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localtime	server/sqlite3.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	server/sqlite3.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
lock	server/sqlite3.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	server/sqlite3.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	server/sqlite3.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	server/sqlite3.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	server/sqlite3.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	server/sqlite3.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	server/sqlite3.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	server/sqlite3.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	server/sqlite3.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	server/sqlite3.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	server/sqlite3.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	server/sqlite3.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	server/sqlite3.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	server/sqlite3.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	server/sqlite3.c	/^static int lookupName($/;"	f	file:
lowerFunc	server/sqlite3.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	server/sqlite3.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lru_cache	cacheserver/lrucache.hh	/^  lru_cache(int max_size = 10) {$/;"	f	class:lru_cache
lru_cache	cacheserver/lrucache.hh	/^class lru_cache {$/;"	c
lseek	server/sqlite3.c	25040;"	d	file:
m	server/sqlite3.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	server/sqlite3.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
mPragFlag	server/sqlite3.c	/^  u8 mPragFlag;             \/* Zero or more PragFlag_XXX values *\/$/;"	m	struct:sPragmaNames	file:
m_eq_1	server/sqlite3.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	server/sqlite3.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	server/sqlite3.c	/^static int m_gt_1(const char *z){$/;"	f	file:
magic	server/sqlite3.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	server/sqlite3.c	/^  u32 magic;                  \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	server/sqlite3.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic1	server/sqlite3.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
magic2	server/sqlite3.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
main	cacheserver/cacheserver.cc	/^int main(int argc, const char *argv[])$/;"	f
main	server/server.cc	/^int main(int argc, const char *argv[])$/;"	f
main	shell/shell.cc	/^main(int argc, const char *argv[])$/;"	f
main	xdrpp/tests/cereal.cc	/^main()$/;"	f
main	xdrpp/tests/listener.cc	/^main(int argc, char **argv)$/;"	f
main	xdrpp/tests/marshal.cc	/^main()$/;"	f
main	xdrpp/tests/msgsock.cc	/^main(int argc, char **argv)$/;"	f
main	xdrpp/tests/printer.cc	/^main()$/;"	f
main	xdrpp/tests/srpc.cc	/^main(int argc, char **argv)$/;"	f
main	xdrpp/xdrc/xdrc.cc	/^main(int argc, char **argv)$/;"	f
major	server/sqlite3.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
make_dummy_depfile	xdrpp/depcomp	/^make_dummy_depfile ()$/;"	f
make_uaddr	xdrpp/xdrpp/socket.cc	/^make_uaddr(const sockaddr *sa, socklen_t salen)$/;"	f	namespace:xdr
make_uaddr	xdrpp/xdrpp/socket.cc	/^make_uaddr(int fd)$/;"	f	namespace:xdr
malloc	server/sqlite3.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
malloc64	server/sqlite3.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	server/sqlite3.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	server/sqlite3.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	server/sqlite3.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
man1dir	xdrpp/Makefile	/^man1dir = $(mandir)\/man1$/;"	m
man_MANS	xdrpp/Makefile	/^man_MANS = doc\/xdrc.1$/;"	m
mandir	xdrpp/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map_case	xdrpp/xdrc/gen_hh.cc	/^map_case(const string &s)$/;"	f
map_tag	xdrpp/xdrc/gen_hh.cc	/^map_tag(const string &s)$/;"	f
map_type	xdrpp/xdrc/gen_hh.cc	/^map_type(const string &s)$/;"	f
marshal_base	xdrpp/xdrpp/marshal.h	/^struct marshal_base {$/;"	s	namespace:xdr
marshal_noswap	xdrpp/xdrpp/marshal.h	/^struct marshal_noswap : marshal_base {$/;"	s	namespace:xdr
marshal_swap	xdrpp/xdrpp/marshal.h	/^struct marshal_swap : marshal_base {$/;"	s	namespace:xdr
mask	server/sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:
maskLoop	server/sqlite3.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:
maskPage	server/sqlite3.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
maskSelf	server/sqlite3.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:
matchAll	server/sqlite3.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	server/sqlite3.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	server/sqlite3.c	/^static int matchQuality($/;"	f	file:
matchSet	server/sqlite3.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
max1bytePayload	server/sqlite3.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	server/sqlite3.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	server/sqlite3.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	server/sqlite3.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	server/sqlite3.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	server/sqlite3.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	server/sqlite3.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	server/sqlite3.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
max_size	cacheserver/lrucache.hh	/^  int max_size;$/;"	m	class:lru_cache
max_size	xdrpp/xdrpp/types.h	/^  static constexpr uint32_t max_size() { return N; }$/;"	f	struct:xdr::xstring
max_size	xdrpp/xdrpp/types.h	/^  static constexpr uint32_t max_size() { return N; }$/;"	f	struct:xdr::xvector
maxmsglen_	xdrpp/xdrpp/msgsock.h	/^  const size_t maxmsglen_;$/;"	m	class:xdr::msg_sock
mayAbort	server/sqlite3.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
measureAllocationSize	server/sqlite3.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:
mem	server/sqlite3.c	/^} mem;$/;"	v	typeref:struct:__anon9	file:
mem0	server/sqlite3.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	server/sqlite3.c	19986;"	d	file:
mem3	server/sqlite3.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	server/sqlite3.c	17400;"	d	file:
mem5	server/sqlite3.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	server/sqlite3.c	18083;"	d	file:
memAboutToChange	server/sqlite3.c	68959;"	d	file:
memAboutToChange	server/sqlite3.c	68961;"	d	file:
memDb	server/sqlite3.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	server/sqlite3.c	14253;"	d	file:
memTracePrint	server/sqlite3.c	/^static void memTracePrint(Mem *p){$/;"	f	file:
member	xdrpp/xdrpp/types.h	/^member(T &&t, F T::*mp)$/;"	f	namespace:xdr::detail
member	xdrpp/xdrpp/types.h	/^member(T &t, F T::*mp)$/;"	f	namespace:xdr::detail
member	xdrpp/xdrpp/types.h	/^member(const T &t, F T::*mp)$/;"	f	namespace:xdr::detail
memjrnlClose	server/sqlite3.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	server/sqlite3.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	server/sqlite3.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	server/sqlite3.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	server/sqlite3.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	server/sqlite3.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	server/sqlite3.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	server/sqlite3.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	server/sqlite3.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	server/sqlite3.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	server/sqlite3.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	server/sqlite3.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	server/sqlite3.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	server/sqlite3.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	server/sqlite3.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	server/sqlite3.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	server/sqlite3.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	server/sqlite3.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	server/sqlite3.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	server/sqlite3.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	server/sqlite3.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	server/sqlite3.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	server/sqlite3.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	server/sqlite3.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	server/sqlite3.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	server/sqlite3.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	server/sqlite3.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	server/sqlite3.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	server/sqlite3.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	server/sqlite3.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	server/sqlite3.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	server/sqlite3.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	server/sqlite3.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	server/sqlite3.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	server/sqlite3.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	server/sqlite3.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	server/sqlite3.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	server/sqlite3.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	server/sqlite3.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	server/sqlite3.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	server/sqlite3.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
message_t	xdrpp/xdrpp/message.h	/^  message_t(std::size_t size) : size_(size) {}$/;"	f	class:xdr::message_t
message_t	xdrpp/xdrpp/message.h	/^class message_t {$/;"	c	namespace:xdr
minLeaf	server/sqlite3.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	server/sqlite3.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	server/sqlite3.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	server/sqlite3.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	server/sqlite3.c	/^static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){$/;"	f	file:
minWriteFileFormat	server/sqlite3.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	server/sqlite3.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	server/sqlite3.c	/^static void minmaxStep($/;"	f	file:
minor	server/sqlite3.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mkdir_p	xdrpp/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	xdrpp/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmapSize	server/sqlite3.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSize	server/sqlite3.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeActual	server/sqlite3.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSizeActual	server/sqlite3.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeMax	server/sqlite3.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:
mmapSizeMax	server/sqlite3.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:
mnMaster	server/sqlite3.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	server/sqlite3.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReg	server/sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mnReq	server/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	server/sqlite3.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	server/sqlite3.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	server/sqlite3.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	server/sqlite3.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	server/sqlite3.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	server/sqlite3.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
move_construct_to	xdrpp/xdrc/union.h	/^  virtual void move_construct_to(union_entry_base *dest) {$/;"	f	class:union_entry_base
moveret	xdrpp/xdrpp/srpc.h	/^  static void moveret(std::unique_ptr<xdr_void> &) {}$/;"	f	class:xdr::synchronous_client_base
moveret	xdrpp/xdrpp/srpc.h	/^  template<typename T> static T &&moveret(T &t) { return std::move(t); }$/;"	f	class:xdr::synchronous_client_base
movetoTarget	server/sqlite3.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	server/sqlite3.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msg_sock	xdrpp/xdrpp/msgsock.h	/^  msg_sock(pollset &ps, int fd) : msg_sock(ps, fd, nullptr) {}$/;"	f	class:xdr::msg_sock
msg_sock	xdrpp/xdrpp/msgsock.h	/^  template<typename T> msg_sock(pollset &ps, int fd, T &&rcb,$/;"	f	class:xdr::msg_sock
msg_sock	xdrpp/xdrpp/msgsock.h	/^class msg_sock {$/;"	c	namespace:xdr
msg_yytext	xdrpp/xdrc/scan.cc	/^msg_yytext(const char *msg)$/;"	f
msize	server/sqlite3.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:
multiSelect	server/sqlite3.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	server/sqlite3.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	server/sqlite3.c	/^static int multiSelectOrderBy($/;"	f	file:
multiSelectOrderByKeyInfo	server/sqlite3.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:
mutex	server/sqlite3.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	server/sqlite3.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon9	file:
mutex	server/sqlite3.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	server/sqlite3.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	server/sqlite3.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	server/sqlite3.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	server/sqlite3.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	server/sqlite3.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	server/sqlite3.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	server/sqlite3.c	/^  int  mxAlloc;        \/* Maximum allowed string length *\/$/;"	m	struct:StrAccum	file:
mxCurrent	server/sqlite3.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon9	file:
mxErr	server/sqlite3.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	server/sqlite3.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxKeysize	server/sqlite3.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:
mxLevel	server/sqlite3.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
mxLevel	server/sqlite3.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:
mxLevel	server/sqlite3.h	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info
mxMmap	server/sqlite3.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:
mxOut	server/sqlite3.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	server/sqlite3.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	server/sqlite3.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPathname	server/sqlite3.h	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs
mxPgno	server/sqlite3.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	server/sqlite3.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	server/sqlite3.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReg	server/sqlite3.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mxReq	server/sqlite3.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	server/sqlite3.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:
mxSavepoint	server/sqlite3.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	server/sqlite3.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxSz	server/sqlite3.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:
mxValue	server/sqlite3.c	/^  int mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	server/sqlite3.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	server/sqlite3.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	server/sqlite3.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	server/sqlite3.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	server/sqlite3.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:
n	server/sqlite3.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	server/sqlite3.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	server/sqlite3.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:
n	server/sqlite3.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:
n	server/sqlite3.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	server/sqlite3.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	server/sqlite3.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	server/sqlite3.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAlias	server/sqlite3.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAll	server/sqlite3.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	server/sqlite3.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	server/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:
nAlloc	server/sqlite3.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	server/sqlite3.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:
nAlloc	server/sqlite3.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:
nAlloc	server/sqlite3.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon9	file:
nAlloc	server/sqlite3.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	server/sqlite3.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	server/sqlite3.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	server/sqlite3.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	server/sqlite3.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nArg	server/sqlite3.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:
nAuthPW	server/sqlite3.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:
nAutoincrmerge	server/sqlite3.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:
nBackfill	server/sqlite3.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	server/sqlite3.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	server/sqlite3.c	/^  int nBacktrace;$/;"	m	struct:__anon9	file:
nBacktraceSlots	server/sqlite3.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	server/sqlite3.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	server/sqlite3.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	server/sqlite3.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	server/sqlite3.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	server/sqlite3.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:
nBuffer	server/sqlite3.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:
nBuffer	server/sqlite3.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	server/sqlite3.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	server/sqlite3.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	server/sqlite3.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nBytes	server/sqlite3.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	server/sqlite3.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	server/sqlite3.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	server/sqlite3.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	server/sqlite3.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	server/sqlite3.c	/^  int nChange;            \/* Statement changes (Vdbe.nChanges)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	server/sqlite3.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	server/sqlite3.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	server/sqlite3.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	server/sqlite3.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	server/sqlite3.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	server/sqlite3.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	server/sqlite3.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	server/sqlite3.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	server/sqlite3.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	server/sqlite3.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nCol	server/sqlite3.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColumn	server/sqlite3.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	server/sqlite3.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	server/sqlite3.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:
nColumn	server/sqlite3.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nConstraint	server/sqlite3.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	server/sqlite3.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nConstraint	server/sqlite3.h	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info
nCoord	server/sqlite3.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nCoord	server/sqlite3.h	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info
nCost	server/sqlite3.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCsr	server/sqlite3.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCte	server/sqlite3.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:
nCurrent	server/sqlite3.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon9	file:
nCurrentPage	server/sqlite3.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	server/sqlite3.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	server/sqlite3.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nData	server/sqlite3.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	server/sqlite3.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	server/sqlite3.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	server/sqlite3.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nDb	server/sqlite3.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDeferredCons	server/sqlite3.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	server/sqlite3.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDeferredImmCons	server/sqlite3.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:
nDeferredImmCons	server/sqlite3.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:
nDim	server/sqlite3.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	server/sqlite3.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	server/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	server/sqlite3.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	server/sqlite3.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	server/sqlite3.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	server/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:
nDoclist	server/sqlite3.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntry	server/sqlite3.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	server/sqlite3.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	server/sqlite3.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:
nEquiv	server/sqlite3.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
nErr	server/sqlite3.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	server/sqlite3.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	server/sqlite3.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nException	server/sqlite3.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:
nExpr	server/sqlite3.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	server/sqlite3.c	/^  int nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	server/sqlite3.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	server/sqlite3.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nFetchOut	server/sqlite3.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:
nFetchOut	server/sqlite3.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:
nField	server/sqlite3.c	/^  i16 nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	server/sqlite3.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nField	server/sqlite3.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:
nFkConstraint	server/sqlite3.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	server/sqlite3.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	server/sqlite3.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	server/sqlite3.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	server/sqlite3.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	server/sqlite3.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	server/sqlite3.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHdrParsed	server/sqlite3.c	/^  u16 nHdrParsed;       \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:
nHeap	server/sqlite3.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	server/sqlite3.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	server/sqlite3.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nId	server/sqlite3.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	server/sqlite3.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	file:
nIndent	server/sqlite3.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:
nIndex	server/sqlite3.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInput	server/sqlite3.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:
nInput	server/sqlite3.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	server/sqlite3.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	server/sqlite3.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:
nKey	server/sqlite3.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:
nKey	server/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nKeyCol	server/sqlite3.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nKeyCol	server/sqlite3.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:
nLSlot	server/sqlite3.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLTerm	server/sqlite3.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLabel	server/sqlite3.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:
nLeafAdd	server/sqlite3.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:
nLeafData	server/sqlite3.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:
nLeafData	server/sqlite3.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafEst	server/sqlite3.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:
nLevel	server/sqlite3.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	server/sqlite3.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nList	server/sqlite3.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:
nLocal	server/sqlite3.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:
nLock	server/sqlite3.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	server/sqlite3.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nMalloc	server/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	server/sqlite3.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	server/sqlite3.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	server/sqlite3.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	server/sqlite3.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	server/sqlite3.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	server/sqlite3.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMaxSorterMmap	server/sqlite3.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:
nMem	server/sqlite3.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	server/sqlite3.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	server/sqlite3.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	server/sqlite3.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMemory	server/sqlite3.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:
nMin	server/sqlite3.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	server/sqlite3.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMmapOut	server/sqlite3.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:
nModuleArg	server/sqlite3.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nName	server/sqlite3.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	server/sqlite3.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	server/sqlite3.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	server/sqlite3.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNode	server/sqlite3.c	/^  int nNode;$/;"	m	struct:NodeReader	file:
nNodeSize	server/sqlite3.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOBSat	server/sqlite3.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:
nOBSat	server/sqlite3.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:
nOcc	server/sqlite3.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	server/sqlite3.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOnce	server/sqlite3.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:
nOnce	server/sqlite3.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:
nOnceFlag	server/sqlite3.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:
nOnceFlag	server/sqlite3.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:
nOp	server/sqlite3.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	server/sqlite3.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	server/sqlite3.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	server/sqlite3.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
nOrderBy	server/sqlite3.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrderBy	server/sqlite3.h	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info
nOrig	server/sqlite3.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOther	server/sqlite3.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:
nOut	server/sqlite3.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:
nOut	server/sqlite3.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:
nOut	server/sqlite3.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	server/sqlite3.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	server/sqlite3.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nOvflAlloc	server/sqlite3.c	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor	file:
nPMA	server/sqlite3.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:
nPSample	server/sqlite3.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:
nPage	server/sqlite3.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	server/sqlite3.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	server/sqlite3.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	server/sqlite3.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	server/sqlite3.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	server/sqlite3.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	server/sqlite3.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nParam	server/sqlite3.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	server/sqlite3.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
nParam	server/sqlite3.h	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info
nParam	server/sqlite3.h	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry
nPayload	server/sqlite3.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	server/sqlite3.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPgsz	server/sqlite3.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	server/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	server/sqlite3.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	server/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	server/sqlite3.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPoint	server/sqlite3.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPointAlloc	server/sqlite3.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPool	server/sqlite3.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	server/sqlite3.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPrefix	server/sqlite3.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nProgressOps	server/sqlite3.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQueryLoop	server/sqlite3.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:
nRangeReg	server/sqlite3.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	server/sqlite3.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReaders	server/sqlite3.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	server/sqlite3.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecValid	server/sqlite3.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:
nRecyclable	server/sqlite3.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	server/sqlite3.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	server/sqlite3.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	server/sqlite3.c	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	server/sqlite3.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	server/sqlite3.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	server/sqlite3.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:
nRef	server/sqlite3.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	server/sqlite3.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	server/sqlite3.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	server/sqlite3.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	server/sqlite3.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	server/sqlite3.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	server/sqlite3.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	server/sqlite3.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:
nRef	server/sqlite3.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	server/sqlite3.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	server/sqlite3.h	/^  int nRef;                       \/* NO LONGER USED *\/$/;"	m	struct:sqlite3_vtab
nRefInitMutex	server/sqlite3.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	server/sqlite3.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	server/sqlite3.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	server/sqlite3.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	server/sqlite3.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	server/sqlite3.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	server/sqlite3.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	server/sqlite3.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:
nRow	server/sqlite3.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:
nRow	server/sqlite3.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	server/sqlite3.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	server/sqlite3.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:
nRowLogEst	server/sqlite3.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	server/sqlite3.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nRowid	server/sqlite3.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:
nSample	server/sqlite3.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:
nSample	server/sqlite3.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSampleCol	server/sqlite3.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:
nSavepoint	server/sqlite3.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	server/sqlite3.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScratch	server/sqlite3.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	server/sqlite3.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSdst	server/sqlite3.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nSegment	server/sqlite3.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	server/sqlite3.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSelect	server/sqlite3.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:
nSelectIndent	server/sqlite3.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	file:
nSelectRow	server/sqlite3.c	/^  u64 nSelectRow;        \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	server/sqlite3.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	server/sqlite3.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	server/sqlite3.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	server/sqlite3.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	server/sqlite3.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSkip	server/sqlite3.c	/^      u16 nSkip;             \/* Number of initial index columns to skip *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:
nSlot	server/sqlite3.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	server/sqlite3.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	server/sqlite3.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	server/sqlite3.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	server/sqlite3.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	server/sqlite3.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	server/sqlite3.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	server/sqlite3.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	server/sqlite3.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtDefImmCons	server/sqlite3.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStop	server/sqlite3.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	server/sqlite3.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	server/sqlite3.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	server/sqlite3.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTableLock	server/sqlite3.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTask	server/sqlite3.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:
nTempReg	server/sqlite3.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	server/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	server/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	server/sqlite3.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	server/sqlite3.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	server/sqlite3.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	server/sqlite3.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	server/sqlite3.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nThis	server/sqlite3.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:
nTitle	server/sqlite3.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon9	file:
nTitle	server/sqlite3.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	server/sqlite3.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	server/sqlite3.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	server/sqlite3.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:
nToken	server/sqlite3.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	server/sqlite3.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	server/sqlite3.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	server/sqlite3.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	server/sqlite3.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:
nUsed	server/sqlite3.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:
nVTrans	server/sqlite3.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	server/sqlite3.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:
nVar	server/sqlite3.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	server/sqlite3.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVdbeActive	server/sqlite3.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:
nVdbeExec	server/sqlite3.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
nVdbeRead	server/sqlite3.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:
nVdbeWrite	server/sqlite3.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:
nVtabLock	server/sqlite3.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	server/sqlite3.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWork	server/sqlite3.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:
nWorker	server/sqlite3.c	76739;"	d	file:
nWorker	server/sqlite3.c	76806;"	d	file:
nXField	server/sqlite3.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	file:
nZero	server/sqlite3.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::MemValue	file:
nameInUsingClause	server/sqlite3.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
namespaces	xdrpp/xdrc/gen_hh.cc	/^vec<string> namespaces;$/;"	m	namespace:__anon26	file:
ncFlags	server/sqlite3.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:
nearlyFull	server/sqlite3.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needFree	server/sqlite3.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
needToFreeIdxStr	server/sqlite3.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
needToFreeIdxStr	server/sqlite3.h	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info
nested	server/sqlite3.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
neverCorrupt	server/sqlite3.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:
newCacheServerInfo	include/server.hh	/^struct newCacheServerInfo {$/;"	s
newCacheserverAdded	cacheserver/cacheserverimpl.cc	/^cache_api_v1_server::newCacheserverAdded(std::unique_ptr<newCacheServerInfo> arg)$/;"	f	class:cache_api_v1_server
newCacheserverAdded_t	include/server.hh	/^  struct newCacheserverAdded_t {$/;"	s	struct:cache_api_v1
newDatabase	server/sqlite3.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	server/sqlite3.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	server/sqlite3.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	server/sqlite3.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	cacheserver/lrucache.hh	/^    node* next;$/;"	m	struct:lru_cache::node
next	server/sqlite3.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:
next	server/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	server/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	server/sqlite3.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	server/sqlite3.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	server/sqlite3.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	server/sqlite3.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	server/sqlite3.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	server/sqlite3.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
next_timeout	xdrpp/xdrpp/pollset.cc	/^pollset::next_timeout(int ms)$/;"	f	class:xdr::pollset
nextlen	xdrpp/xdrpp/msgsock.h	/^  uint32_t nextlen() const { return swap32le(nextlen_); }$/;"	f	class:xdr::msg_sock
nextlen_	xdrpp/xdrpp/msgsock.h	/^  uint32_t nextlen_;$/;"	m	class:xdr::msg_sock
nextlenp	xdrpp/xdrpp/msgsock.h	/^  char *nextlenp() { return reinterpret_cast<char *>(&nextlen_); }$/;"	f	class:xdr::msg_sock
nfsUnlock	server/sqlite3.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
nl	xdrpp/xdrc/gen_hh.cc	/^indenter nl;$/;"	m	namespace:__anon26	file:
nl	xdrpp/xdrc/gen_server.cc	/^indenter nl;$/;"	m	namespace:__anon27	file:
noCase	server/sqlite3.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noLock	server/sqlite3.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:
noPayload	server/sqlite3.c	/^  u8 noPayload;        \/* True if internal intKey page (thus w\/o data) *\/$/;"	m	struct:MemPage	file:
noSync	server/sqlite3.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
no_clear	xdrpp/xdrpp/types.h	/^constexpr no_clear_t no_clear;$/;"	m	namespace:xdr::detail
no_clear_t	xdrpp/xdrpp/types.h	/^  constexpr no_clear_t() {}$/;"	f	struct:xdr::detail::no_clear_t
no_clear_t	xdrpp/xdrpp/types.h	/^struct no_clear_t {$/;"	s	namespace:xdr::detail
nocaseCollatingFunc	server/sqlite3.c	/^static int nocaseCollatingFunc($/;"	f	file:
node	cacheserver/lrucache.hh	/^    node(std::string key, T data, node* prev = NULL, node* next = NULL) {$/;"	f	struct:lru_cache::node
node	cacheserver/lrucache.hh	/^  struct node {$/;"	s	class:lru_cache
nodeAcquire	server/sqlite3.c	/^static int nodeAcquire($/;"	f	file:
nodeDeleteCell	server/sqlite3.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	server/sqlite3.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	server/sqlite3.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	server/sqlite3.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	server/sqlite3.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	server/sqlite3.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	server/sqlite3.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	server/sqlite3.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	server/sqlite3.c	/^static int nodeInsertCell($/;"	f	file:
nodeNew	server/sqlite3.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	server/sqlite3.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	server/sqlite3.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReaderInit	server/sqlite3.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:
nodeReaderNext	server/sqlite3.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:
nodeReaderRelease	server/sqlite3.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:
nodeReference	server/sqlite3.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	server/sqlite3.c	/^static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	server/sqlite3.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	server/sqlite3.c	/^static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	server/sqlite3.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nodist_pkginclude_HEADERS	xdrpp/Makefile	/^nodist_pkginclude_HEADERS = xdrpp\/endian.h$/;"	m
noexcept	xdrpp/xdrc/union.h	/^  union_entry_base() noexcept = default;$/;"	m	class:union_entry_base
nolockCheckReservedLock	server/sqlite3.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	server/sqlite3.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	server/sqlite3.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	server/sqlite3.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nonnull2	xdrpp/tests/listener.cc	/^xdrtest2_server::nonnull2(std::unique_ptr<u_4_12> arg)$/;"	f	class:xdrtest2_server
nonnull2	xdrpp/tests/srpc.cc	/^xdrtest2_server::nonnull2(std::unique_ptr<u_4_12> arg)$/;"	f	class:xdrtest2_server
noopFunc	server/sqlite3.c	94555;"	d	file:
noopMutexAlloc	server/sqlite3.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	server/sqlite3.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	server/sqlite3.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	server/sqlite3.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	server/sqlite3.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	server/sqlite3.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	server/sqlite3.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
notIndexed	server/sqlite3.c	/^    unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	server/sqlite3.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notReady	server/sqlite3.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:
notUsed1	server/sqlite3.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon2	file:
notValidCheckConstraint	server/sqlite3.c	/^static void notValidCheckConstraint($/;"	f	file:
notValidCheckConstraint	server/sqlite3.c	79707;"	d	file:
notValidPartIdxWhere	server/sqlite3.c	/^static void notValidPartIdxWhere($/;"	f	file:
nowValue	server/sqlite3.c	/^  int nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
now_ms	xdrpp/xdrpp/pollset.cc	/^pollset::now_ms()$/;"	f	class:xdr::pollset
nrhs	server/sqlite3.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon24	file:
null	server/sqlstmt.h	/^  bool null(int i) {$/;"	f	class:SQLStmt
null2	xdrpp/tests/listener.cc	/^xdrtest2_server::null2()$/;"	f	class:xdrtest2_server
null2	xdrpp/tests/srpc.cc	/^xdrtest2_server::null2()$/;"	f	class:xdrtest2_server
nullRow	server/sqlite3.c	/^  u8 nullRow;           \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	server/sqlite3.c	/^static void nullifFunc($/;"	f	file:
num	xdrpp/xdrc/xdrc_internal.h	/^  uint32_t num;$/;"	m	struct:YYSTYPE
num_cbs	xdrpp/xdrpp/pollset.cc	/^pollset::num_cbs() const$/;"	f	class:xdr::pollset
num_sig	xdrpp/xdrpp/pollset.h	/^  static constexpr int num_sig = 32;$/;"	m	class:xdr::pollset_plus::wake_type
numberOfCachePages	server/sqlite3.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
numericType	server/sqlite3.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:
nvp_adapter	xdrpp/xdrpp/cereal.h	/^template<typename Archive> struct nvp_adapter {$/;"	s	namespace:xdr::detail
nzVar	server/sqlite3.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:
nzVar	server/sqlite3.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:
offset	server/sqlite3.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offset	xdrpp/xdrpp/message.h	/^  const void *offset(std::ptrdiff_t i) const { return buf_ + i; }$/;"	f	class:xdr::message_t
offsetof	server/sqlite3.c	8515;"	d	file:
okConstFactor	server/sqlite3.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:
okOnePass	server/sqlite3.c	/^  u8 okOnePass;             \/* Ok to use one-pass algorithm for UPDATE\/DELETE *\/$/;"	m	struct:WhereInfo	file:
oldLockingContext	server/sqlite3.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldincludedir	xdrpp/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldmask	server/sqlite3.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omanip	xdrpp/xdrc/xdrc_internal.h	/^  template<typename T> omanip(T *t, void(T::*fn)(ostream &))$/;"	f	struct:omanip
omanip	xdrpp/xdrc/xdrc_internal.h	/^struct omanip : std::function<void(std::ostream&)> {$/;"	s
omit	server/sqlite3.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omit	server/sqlite3.h	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage
omitMask	server/sqlite3.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
onError	server/sqlite3.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	server/sqlite3.c	/^static const char *onErrorText(int onError){$/;"	f	file:
op	server/sqlite3.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	server/sqlite3.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	server/sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	server/sqlite3.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	server/sqlite3.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	server/sqlite3.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	server/sqlite3.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	server/sqlite3.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op	server/sqlite3.h	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
op2	server/sqlite3.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:
opIterNext	server/sqlite3.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opMask	server/sqlite3.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:
opPrecedence	server/sqlite3.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
op_t	xdrpp/xdrpp/pollset.h	/^  enum op_t {$/;"	g	class:xdr::pollset
opaque_array	xdrpp/xdrpp/types.h	/^  opaque_array() : xarray(detail::no_clear) { std::memset(this->data(), 0, N); }$/;"	f	struct:xdr::opaque_array
opaque_array	xdrpp/xdrpp/types.h	/^template<uint32_t N = XDR_MAX_LEN> struct opaque_array$/;"	s	namespace:xdr
opcode	server/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	server/sqlite3.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	libclient/client.cc	/^Client::open(const std::string &host)$/;"	f	class:Client
open	server/serverdb.cc	/^ServerDB::open(const char *file)$/;"	f	class:ServerDB
open	server/sqlite3.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open	xdrpp/xdrc/xdrc_internal.h	/^  omanip open = omanip(this, &indenter::do_open);$/;"	m	struct:indenter
open16	server/sqlite3.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	server/sqlite3.c	/^static int openDatabase($/;"	f	file:
openDirectory	server/sqlite3.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	server/sqlite3.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	server/sqlite3.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	server/sqlite3.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openStatTable	server/sqlite3.c	/^static void openStatTable($/;"	f	file:
openSubJournal	server/sqlite3.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_socketfd	include/httpclient.cc	/^httpclient::open_socketfd(const string& hostname,$/;"	f	class:httpclient
open_v2	server/sqlite3.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operator ()	xdrpp/xdrpp/clear.h	/^  operator()(T &t) const { t = T{}; }$/;"	f	struct:xdr::detail::xdr_clear_t
operator ()	xdrpp/xdrpp/clear.h	/^  operator()(T &t) const { t.resize(0); }$/;"	f	struct:xdr::detail::xdr_clear_t
operator ()	xdrpp/xdrpp/clear.h	/^  operator()(T &t) const { xdr_traits<T>::load(*this, t); }$/;"	f	struct:xdr::detail::xdr_clear_t
operator ()	xdrpp/xdrpp/clear.h	/^  operator()(T &t) const {$/;"	f	struct:xdr::detail::xdr_clear_t
operator ()	xdrpp/xdrpp/clear.h	/^  template<std::uint32_t N> void operator()(opaque_array<N> &t) const {$/;"	f	struct:xdr::detail::xdr_clear_t
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(T &t) { check(4); t = xdr_traits<T>::from_uint(get32(p_)); }$/;"	f	struct:xdr::xdr_generic_get
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(T &t) { check(8); t = xdr_traits<T>::from_uint(get64(p_)); }$/;"	f	struct:xdr::xdr_generic_get
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(T &t) { xdr_traits<T>::load(*this, t); }$/;"	f	struct:xdr::xdr_generic_get
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(T &t) {$/;"	f	struct:xdr::xdr_generic_get
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(T t) { check(4); put32(p_, xdr_traits<T>::to_uint(t)); }$/;"	f	struct:xdr::xdr_generic_put
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(T t) { check(8); put64(p_, xdr_traits<T>::to_uint(t)); }$/;"	f	struct:xdr::xdr_generic_put
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(const T &t) { xdr_traits<T>::save(*this, t); }$/;"	f	struct:xdr::xdr_generic_put
operator ()	xdrpp/xdrpp/marshal.h	/^  operator()(const T &t) {$/;"	f	struct:xdr::xdr_generic_put
operator ()	xdrpp/xdrpp/printer.h	/^  operator()(const char *field, const T &t) {$/;"	f	struct:xdr::detail::Printer
operator ()	xdrpp/xdrpp/printer.h	/^  template<typename T> void operator()(const char *field, const pointer<T> &t) {$/;"	f	struct:xdr::detail::Printer
operator ()	xdrpp/xdrpp/printer.h	/^  void operator()(const char *field, const char *s) { bol(field) << s; }$/;"	f	struct:xdr::detail::Printer
operator ()	xdrpp/xdrpp/printer.h	/^  void operator()(const char *field, const std::string &s) { bol(field) << s; }$/;"	f	struct:xdr::detail::Printer
operator ()	xdrpp/xdrpp/socket.h	/^  void operator()(addrinfo *ai) const { freeaddrinfo(ai); }$/;"	f	struct:xdr::delete_addrinfo
operator ()	xdrpp/xdrpp/types.h	/^  F &operator()(T &&t) const { return std::move(t.*value); }$/;"	f	struct:xdr::field_ptr
operator ()	xdrpp/xdrpp/types.h	/^  F &operator()(T &t) const { return t.*value; }$/;"	f	struct:xdr::field_ptr
operator ()	xdrpp/xdrpp/types.h	/^  const F &operator()(const T &t) const { return t.*value; }$/;"	f	struct:xdr::field_ptr
operator ()	xdrpp/xdrpp/types.h	/^  operator()(F T::*mp, Archive &ar, T &t, const char *name) const {$/;"	f	struct:xdr::field_archiver_t
operator ()	xdrpp/xdrpp/types.h	/^  operator()(F T::*mp, Archive &ar, const T &t, const char *name) const {$/;"	f	struct:xdr::field_archiver_t
operator ()	xdrpp/xdrpp/types.h	/^  operator()(F T::*mp, T &t) const { detail::member(t, mp).~F(); }$/;"	f	struct:xdr::field_destructor_t
operator ()	xdrpp/xdrpp/types.h	/^  operator()(F T::*mp, T &t, TT &&tt) const {$/;"	f	struct:xdr::field_assigner_t
operator ()	xdrpp/xdrpp/types.h	/^  operator()(F T::*mp, T &t, TT &&tt) const {$/;"	f	struct:xdr::field_constructor_t
operator ()	xdrpp/xdrpp/types.h	/^  operator()(F T::*mp, const T &t, std::size_t &size) const {$/;"	f	struct:xdr::field_size_t
operator ()	xdrpp/xdrpp/types.h	/^  template<typename T, typename F> void operator()(F T::*mp, T &t) const {$/;"	f	struct:xdr::field_constructor_t
operator *	xdrpp/xdrc/union.h	/^  T &operator*() { return *get(); }$/;"	f	class:union_entry
operator *	xdrpp/xdrc/union.h	/^  T &operator*() { return *get(); }$/;"	f	class:union_ptr
operator *	xdrpp/xdrc/union.h	/^  const T &operator*() const { return *get(); }$/;"	f	class:union_entry
operator *	xdrpp/xdrc/union.h	/^  const T &operator*() const { return *get(); }$/;"	f	class:union_ptr
operator ++	xdrpp/xdrc/xdrc_internal.h	/^  void operator++() { level_ += 2; }$/;"	f	struct:indenter
operator --	xdrpp/xdrc/xdrc_internal.h	/^  void operator--() { level_ -= 2; assert (level_ >= 0); }$/;"	f	struct:indenter
operator ->	xdrpp/xdrc/union.h	/^  T *operator->() { return get(); }$/;"	f	class:union_entry
operator ->	xdrpp/xdrc/union.h	/^  T *operator->() { return get(); }$/;"	f	class:union_ptr
operator ->	xdrpp/xdrc/union.h	/^  const T *operator->() const { return get(); }$/;"	f	class:union_entry
operator ->	xdrpp/xdrc/union.h	/^  const T *operator->() const { return get(); }$/;"	f	class:union_ptr
operator <<	cacheserver/lrucache.hh	/^  friend std::ostream& operator<<(std::ostream& out, const lru_cache& cache) {$/;"	f	class:lru_cache
operator <<	xdrpp/xdrc/xdrc_internal.h	/^  friend ostream &operator<<(ostream &os, omanip &m) {$/;"	f	struct:omanip
operator =	xdrpp/xdrc/union.h	/^  template<typename TT> union_entry &operator=(TT &&tt) {$/;"	f	class:union_entry
operator =	xdrpp/xdrc/union.h	/^  union_entry &operator=(const union_entry &ue) {$/;"	f	class:union_entry
operator =	xdrpp/xdrc/union.h	/^  union_entry &operator=(union_entry &&ue) {$/;"	f	class:union_entry
operator =	xdrpp/xdrc/union.h	/^  union_entry_base &operator=(const union_entry_base &ueb) {$/;"	f	class:union_entry_base
operator =	xdrpp/xdrc/union.h	/^  union_entry_base &operator=(union_entry_base &&ueb) {$/;"	f	class:union_entry_base
operator =	xdrpp/xdrc/xdrc_internal.h	/^  YYSTYPE &operator=(YYSTYPE &&st) {$/;"	f	struct:YYSTYPE
operator =	xdrpp/xdrc/xdrc_internal.h	/^  YYSTYPE &operator=(const YYSTYPE &st) {$/;"	f	struct:YYSTYPE
operator =	xdrpp/xdrc/xdrc_internal.h	/^  rpc_decl &operator=(const rpc_decl &d) {$/;"	f	struct:rpc_decl
operator =	xdrpp/xdrc/xdrc_internal.h	/^  rpc_decl &operator=(rpc_decl &&d) {$/;"	f	struct:rpc_decl
operator =	xdrpp/xdrpp/pollset.h	/^    Timeout &operator=(iterator i) { i_ = i; return *this; }$/;"	f	class:xdr::pollset::Timeout
operator =	xdrpp/xdrpp/socket.h	/^  unique_fd &operator=(unique_fd &&uf) {$/;"	f	class:xdr::unique_fd
operator T*	xdrpp/xdrc/union.h	/^  operator T*() { return get(); }$/;"	f	class:union_entry
operator T*	xdrpp/xdrc/union.h	/^  operator T*() { return get(); }$/;"	f	class:union_ptr
operator bool	xdrpp/xdrpp/socket.h	/^  explicit operator bool() const { return fd_ != -1; }$/;"	f	class:xdr::unique_fd
operator const T*	xdrpp/xdrc/union.h	/^  operator const T*() const { return get(); }$/;"	f	class:union_entry
operator const T*	xdrpp/xdrc/union.h	/^  operator const T*() const { return get(); }$/;"	f	class:union_ptr
operatorMask	server/sqlite3.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	server/sqlite3.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
opttag	xdrpp/xdrc/xdrc.cc	/^enum opttag {$/;"	g	file:
orconf	server/sqlite3.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	server/sqlite3.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	server/sqlite3.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orderByConsumed	server/sqlite3.h	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info
orphanTrigger	server/sqlite3.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
osAccess	server/sqlite3.c	25090;"	d	file:
osAreFileApisANSI	server/sqlite3.c	32901;"	d	file:
osAreFileApisANSI	server/sqlite3.c	32922;"	d	file:
osCharLowerW	server/sqlite3.c	32931;"	d	file:
osCharUpperW	server/sqlite3.c	32939;"	d	file:
osClose	server/sqlite3.c	25087;"	d	file:
osCloseHandle	server/sqlite3.c	32943;"	d	file:
osCreateEventExW	server/sqlite3.c	33408;"	d	file:
osCreateFile2	server/sqlite3.c	33458;"	d	file:
osCreateFileA	server/sqlite3.c	32951;"	d	file:
osCreateFileMappingA	server/sqlite3.c	32970;"	d	file:
osCreateFileMappingFromApp	server/sqlite3.c	33513;"	d	file:
osCreateFileMappingW	server/sqlite3.c	32980;"	d	file:
osCreateFileW	server/sqlite3.c	32960;"	d	file:
osCreateMutexW	server/sqlite3.c	32989;"	d	file:
osDeleteFileA	server/sqlite3.c	32998;"	d	file:
osDeleteFileW	server/sqlite3.c	33006;"	d	file:
osFallocate	server/sqlite3.c	25162;"	d	file:
osFchmod	server/sqlite3.c	25155;"	d	file:
osFchown	server/sqlite3.c	25177;"	d	file:
osFcntl	server/sqlite3.c	25116;"	d	file:
osFcntl	server/sqlite3.c	25446;"	d	file:
osFcntl	server/sqlite3.c	25447;"	d	file:
osFileTimeToLocalFileTime	server/sqlite3.c	33014;"	d	file:
osFileTimeToSystemTime	server/sqlite3.c	33023;"	d	file:
osFlushFileBuffers	server/sqlite3.c	33028;"	d	file:
osFormatMessageA	server/sqlite3.c	33036;"	d	file:
osFormatMessageW	server/sqlite3.c	33045;"	d	file:
osFreeLibrary	server/sqlite3.c	33054;"	d	file:
osFstat	server/sqlite3.c	25106;"	d	file:
osFtruncate	server/sqlite3.c	25113;"	d	file:
osGetCurrentProcessId	server/sqlite3.c	33058;"	d	file:
osGetDiskFreeSpaceA	server/sqlite3.c	33066;"	d	file:
osGetDiskFreeSpaceW	server/sqlite3.c	33075;"	d	file:
osGetFileAttributesA	server/sqlite3.c	33084;"	d	file:
osGetFileAttributesExW	server/sqlite3.c	33100;"	d	file:
osGetFileAttributesW	server/sqlite3.c	33092;"	d	file:
osGetFileInformationByHandleEx	server/sqlite3.c	33440;"	d	file:
osGetFileSize	server/sqlite3.c	33109;"	d	file:
osGetFullPathNameA	server/sqlite3.c	33117;"	d	file:
osGetFullPathNameW	server/sqlite3.c	33126;"	d	file:
osGetLastError	server/sqlite3.c	33131;"	d	file:
osGetNativeSystemInfo	server/sqlite3.c	33484;"	d	file:
osGetProcAddressA	server/sqlite3.c	33146;"	d	file:
osGetProcessHeap	server/sqlite3.c	33505;"	d	file:
osGetSystemInfo	server/sqlite3.c	33155;"	d	file:
osGetSystemTime	server/sqlite3.c	33159;"	d	file:
osGetSystemTimeAsFileTime	server/sqlite3.c	33167;"	d	file:
osGetTempPathA	server/sqlite3.c	33176;"	d	file:
osGetTempPathW	server/sqlite3.c	33184;"	d	file:
osGetTickCount	server/sqlite3.c	33192;"	d	file:
osGetTickCount64	server/sqlite3.c	33476;"	d	file:
osGetVersionExA	server/sqlite3.c	33201;"	d	file:
osGetVersionExW	server/sqlite3.c	33211;"	d	file:
osGetcwd	server/sqlite3.c	25093;"	d	file:
osGetpagesize	server/sqlite3.c	25193;"	d	file:
osHeapAlloc	server/sqlite3.c	33216;"	d	file:
osHeapCompact	server/sqlite3.c	33265;"	d	file:
osHeapCreate	server/sqlite3.c	33225;"	d	file:
osHeapDestroy	server/sqlite3.c	33234;"	d	file:
osHeapFree	server/sqlite3.c	33238;"	d	file:
osHeapReAlloc	server/sqlite3.c	33242;"	d	file:
osHeapSize	server/sqlite3.c	33247;"	d	file:
osHeapValidate	server/sqlite3.c	33256;"	d	file:
osInterlockedCompareExchange	server/sqlite3.c	33524;"	d	file:
osIsNT	server/sqlite3.c	33785;"	d	file:
osIsNT	server/sqlite3.c	33787;"	d	file:
osIsNT	server/sqlite3.c	33789;"	d	file:
osIsNT	server/sqlite3.c	33791;"	d	file:
osLoadLibraryA	server/sqlite3.c	33273;"	d	file:
osLoadLibraryW	server/sqlite3.c	33282;"	d	file:
osLoadPackagedLibrary	server/sqlite3.c	33467;"	d	file:
osLocalFree	server/sqlite3.c	33290;"	d	file:
osLocaltime	server/sqlite3.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	server/sqlite3.c	33299;"	d	file:
osLockFileEx	server/sqlite3.c	33310;"	d	file:
osMapViewOfFile	server/sqlite3.c	33320;"	d	file:
osMapViewOfFileFromApp	server/sqlite3.c	33449;"	d	file:
osMkdir	server/sqlite3.c	25171;"	d	file:
osMmap	server/sqlite3.c	25181;"	d	file:
osMremap	server/sqlite3.c	25191;"	d	file:
osMultiByteToWideChar	server/sqlite3.c	33325;"	d	file:
osMunmap	server/sqlite3.c	25184;"	d	file:
osOpen	server/sqlite3.c	25084;"	d	file:
osOpenDirectory	server/sqlite3.c	25168;"	d	file:
osOutputDebugStringA	server/sqlite3.c	33493;"	d	file:
osOutputDebugStringW	server/sqlite3.c	33501;"	d	file:
osPread	server/sqlite3.c	25126;"	d	file:
osPread64	server/sqlite3.c	25133;"	d	file:
osPwrite	server/sqlite3.c	25143;"	d	file:
osPwrite64	server/sqlite3.c	25151;"	d	file:
osQueryPerformanceCounter	server/sqlite3.c	33330;"	d	file:
osRead	server/sqlite3.c	25119;"	d	file:
osReadFile	server/sqlite3.c	33335;"	d	file:
osRmdir	server/sqlite3.c	25174;"	d	file:
osSetEndOfFile	server/sqlite3.c	33340;"	d	file:
osSetFilePointer	server/sqlite3.c	33348;"	d	file:
osSetFilePointerEx	server/sqlite3.c	33431;"	d	file:
osSleep	server/sqlite3.c	33357;"	d	file:
osStat	server/sqlite3.c	25096;"	d	file:
osSystemTimeToFileTime	server/sqlite3.c	33361;"	d	file:
osUnlink	server/sqlite3.c	25165;"	d	file:
osUnlockFile	server/sqlite3.c	33371;"	d	file:
osUnlockFileEx	server/sqlite3.c	33381;"	d	file:
osUnmapViewOfFile	server/sqlite3.c	33390;"	d	file:
osWaitForSingleObject	server/sqlite3.c	33417;"	d	file:
osWaitForSingleObjectEx	server/sqlite3.c	33422;"	d	file:
osWideCharToMultiByte	server/sqlite3.c	33394;"	d	file:
osWrite	server/sqlite3.c	25136;"	d	file:
osWriteFile	server/sqlite3.c	33399;"	d	file:
outdent	xdrpp/xdrc/xdrc_internal.h	/^  omanip outdent = omanip(this, &indenter::do_outdent);$/;"	m	struct:indenter
output	xdrpp/xdrpp/msgsock.cc	/^msg_sock::output(bool cbset)$/;"	f	class:xdr::msg_sock
output_file	xdrpp/xdrc/xdrc.cc	/^string output_file;$/;"	v
overflow	server/sqlite3.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overload_function	server/sqlite3.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
override	xdrpp/xdrpp/pollset.h	/^  bool pending() const override;$/;"	m	class:xdr::pollset_plus::wake_type
override	xdrpp/xdrpp/pollset.h	/^  void run_subtype_handlers() override;$/;"	m	class:xdr::pollset_plus::wake_type
owner	server/sqlite3.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	server/sqlite3.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	server/sqlite3.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon1	file:
p	server/sqlite3.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:
p1	server/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	server/sqlite3.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	server/sqlite3.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	server/sqlite3.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	server/sqlite3.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	server/sqlite3.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	server/sqlite3.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	server/sqlite3.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p3	server/sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p4	server/sqlite3.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon1	file:
p4type	server/sqlite3.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	server/sqlite3.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	server/sqlite3.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	server/sqlite3.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	server/sqlite3.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	server/sqlite3.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	server/sqlite3.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:
pAppData	server/sqlite3.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	server/sqlite3.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pAppData	server/sqlite3.h	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods
pAppData	server/sqlite3.h	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs
pArg	server/sqlite3.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	server/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	server/sqlite3.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pArg	server/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods
pArg	server/sqlite3.h	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2
pAuthArg	server/sqlite3.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	server/sqlite3.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pAux	server/sqlite3.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:
pAuxData	server/sqlite3.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:
pBackup	server/sqlite3.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	server/sqlite3.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	server/sqlite3.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	server/sqlite3.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	server/sqlite3.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	server/sqlite3.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	server/sqlite3.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	server/sqlite3.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	server/sqlite3.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	server/sqlite3.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	server/sqlite3.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBuf	server/sqlite3.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBuf	server/sqlite3.h	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page
pBusyHandlerArg	server/sqlite3.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	server/sqlite3.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	server/sqlite3.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	server/sqlite3.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCheck	server/sqlite3.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	server/sqlite3.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	server/sqlite3.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	server/sqlite3.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	server/sqlite3.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon1	file:
pCollNeededArg	server/sqlite3.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pCols	server/sqlite3.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:
pColumns	server/sqlite3.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	server/sqlite3.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pConstExpr	server/sqlite3.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:
pContext	server/sqlite3.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pContext	server/sqlite3.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	server/sqlite3.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pContext	server/sqlite3.h	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info
pContext	server/sqlite3.h	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry
pCovidx	server/sqlite3.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon16	file:
pCsr	server/sqlite3.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	server/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	server/sqlite3.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	server/sqlite3.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCsr	server/sqlite3.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:
pCtx	server/sqlite3.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	server/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	server/sqlite3.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	server/sqlite3.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	server/sqlite3.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	server/sqlite3.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	server/sqlite3.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDbFd	server/sqlite3.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	server/sqlite3.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	server/sqlite3.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::MemValue	file:
pDefault	server/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	server/sqlite3.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	server/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	server/sqlite3.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	server/sqlite3.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	server/sqlite3.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	server/sqlite3.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	server/sqlite3.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	server/sqlite3.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	server/sqlite3.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	server/sqlite3.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	server/sqlite3.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	server/sqlite3.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	server/sqlite3.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	server/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	server/sqlite3.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	server/sqlite3.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	server/sqlite3.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	server/sqlite3.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	server/sqlite3.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	server/sqlite3.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	server/sqlite3.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:
pEnd	server/sqlite3.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	server/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	server/sqlite3.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	server/sqlite3.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExplain	server/sqlite3.c	/^  Explain *pExplain;      \/* The explainer *\/$/;"	m	struct:Vdbe	file:
pExpr	server/sqlite3.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	server/sqlite3.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	server/sqlite3.c	/^    Expr *pExpr;            \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	server/sqlite3.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	server/sqlite3.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	server/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	server/sqlite3.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExprList	server/sqlite3.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:
pExtra	server/sqlite3.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	server/sqlite3.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pExtra	server/sqlite3.h	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page
pFKey	server/sqlite3.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	server/sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:
pFd	server/sqlite3.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:
pFd	server/sqlite3.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFd	server/sqlite3.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:
pFiller	server/sqlite3.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFilter	server/sqlite3.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFirst	server/sqlite3.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	server/sqlite3.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:
pFirst	server/sqlite3.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	server/sqlite3.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	server/sqlite3.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrame	server/sqlite3.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::MemValue	file:
pFrame	server/sqlite3.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	server/sqlite3.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	server/sqlite3.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	server/sqlite3.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	server/sqlite3.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	server/sqlite3.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts3Tab	server/sqlite3.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	server/sqlite3.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	server/sqlite3.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon1	file:
pFunc	server/sqlite3.c	/^  FuncDef *pFunc;       \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:
pGroup	server/sqlite3.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	server/sqlite3.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	server/sqlite3.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	server/sqlite3.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	server/sqlite3.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	server/sqlite3.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	server/sqlite3.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	server/sqlite3.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	server/sqlite3.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon1	file:
pId	server/sqlite3.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	server/sqlite3.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	server/sqlite3.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	server/sqlite3.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:
pIn	server/sqlite3.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:
pIn	server/sqlite3.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:
pInJournal	server/sqlite3.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	server/sqlite3.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncr	server/sqlite3.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:
pIndex	server/sqlite3.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:
pIndex	server/sqlite3.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	server/sqlite3.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInfo	server/sqlite3.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:
pInitMutex	server/sqlite3.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	server/sqlite3.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	server/sqlite3.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	server/sqlite3.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	server/sqlite3.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	server/sqlite3.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	server/sqlite3.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:
pKey	server/sqlite3.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	server/sqlite3.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon1	file:
pKeyInfo	server/sqlite3.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:
pKeyInfo	server/sqlite3.c	/^  KeyInfo *pKeyInfo;       \/* A KeyInfo object suitable for this index *\/$/;"	m	struct:Index	file:
pKeyInfo	server/sqlite3.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	server/sqlite3.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	server/sqlite3.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	server/sqlite3.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	server/sqlite3.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:
pLast	server/sqlite3.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeft	server/sqlite3.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	server/sqlite3.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	server/sqlite3.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	server/sqlite3.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	server/sqlite3.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	server/sqlite3.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	server/sqlite3.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon4	file:
pList	server/sqlite3.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	server/sqlite3.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:
pList	server/sqlite3.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	server/sqlite3.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	server/sqlite3.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pList	server/sqlite3.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:
pLock	server/sqlite3.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	server/sqlite3.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLoops	server/sqlite3.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:
pLruHead	server/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	server/sqlite3.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	server/sqlite3.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	server/sqlite3.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	server/sqlite3.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMapRegion	server/sqlite3.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:
pMapRegion	server/sqlite3.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:
pMem	server/sqlite3.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon1	file:
pMem	server/sqlite3.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMerger	server/sqlite3.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:
pMerger	server/sqlite3.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:
pMethod	server/sqlite3.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	server/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	server/sqlite3.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	server/sqlite3.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	server/sqlite3.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMethods	server/sqlite3.h	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods
pMmapFreelist	server/sqlite3.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:
pMod	server/sqlite3.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pMod	server/sqlite3.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:
pModule	server/sqlite3.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	server/sqlite3.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	server/sqlite3.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pModule	server/sqlite3.h	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab
pNC	server/sqlite3.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon8	file:
pName	server/sqlite3.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNew	server/sqlite3.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:
pNewTable	server/sqlite3.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	server/sqlite3.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	server/sqlite3.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon14	file:
pNext	server/sqlite3.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	server/sqlite3.c	/^  AuxData *pNext;                 \/* Next element in list *\/$/;"	m	struct:AuxData	file:
pNext	server/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	server/sqlite3.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	server/sqlite3.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	server/sqlite3.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	server/sqlite3.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	server/sqlite3.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	server/sqlite3.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	server/sqlite3.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	server/sqlite3.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	server/sqlite3.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	server/sqlite3.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	server/sqlite3.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	server/sqlite3.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:
pNext	server/sqlite3.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	server/sqlite3.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	server/sqlite3.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	server/sqlite3.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	server/sqlite3.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	server/sqlite3.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	server/sqlite3.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	server/sqlite3.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	server/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	server/sqlite3.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	server/sqlite3.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	server/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	server/sqlite3.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	server/sqlite3.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	server/sqlite3.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	server/sqlite3.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	server/sqlite3.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	server/sqlite3.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNext	server/sqlite3.h	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs
pNextBlocked	server/sqlite3.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	server/sqlite3.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	server/sqlite3.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	server/sqlite3.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:
pNextId	server/sqlite3.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextLoop	server/sqlite3.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:
pNextTo	server/sqlite3.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:
pNextZombie	server/sqlite3.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pOffset	server/sqlite3.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	server/sqlite3.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	server/sqlite3.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	server/sqlite3.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	server/sqlite3.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	server/sqlite3.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:
pOrSet	server/sqlite3.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	server/sqlite3.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	server/sqlite3.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:
pOrderBy	server/sqlite3.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOrderBy	server/sqlite3.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:
pOrderBy	server/sqlite3.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:
pOrigWC	server/sqlite3.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:
pOut	server/sqlite3.c	/^  Mem *pOut;            \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
pOut	server/sqlite3.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:
pOuter	server/sqlite3.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pOuter	server/sqlite3.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:
pPCache	server/sqlite3.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	server/sqlite3.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	server/sqlite3.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	server/sqlite3.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	server/sqlite3.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	server/sqlite3.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	server/sqlite3.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	server/sqlite3.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	server/sqlite3.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	server/sqlite3.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	server/sqlite3.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	server/sqlite3.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	server/sqlite3.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	server/sqlite3.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	server/sqlite3.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	server/sqlite3.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:
pParse	server/sqlite3.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	server/sqlite3.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pParse	server/sqlite3.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:
pPartIdxWhere	server/sqlite3.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:
pPayload	server/sqlite3.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:
pPhrase	server/sqlite3.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	server/sqlite3.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	server/sqlite3.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	server/sqlite3.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	server/sqlite3.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	server/sqlite3.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	server/sqlite3.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	server/sqlite3.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:
pPrior	server/sqlite3.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pProfileArg	server/sqlite3.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	server/sqlite3.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon1	file:
pProgram	server/sqlite3.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	server/sqlite3.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	server/sqlite3.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	server/sqlite3.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	server/sqlite3.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	server/sqlite3.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	server/sqlite3.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReader	server/sqlite3.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:
pReal	server/sqlite3.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon1	file:
pReal	server/sqlite3.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pRec	server/sqlite3.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:
pReprepare	server/sqlite3.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResult	server/sqlite3.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:
pResultSet	server/sqlite3.c	/^  ExprList *pResultSet;     \/* Result set. DISTINCT operates on these *\/$/;"	m	struct:WhereInfo	file:
pResultSet	server/sqlite3.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	server/sqlite3.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	server/sqlite3.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	server/sqlite3.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	server/sqlite3.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRollbackArg	server/sqlite3.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRoot	server/sqlite3.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRowSet	server/sqlite3.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::MemValue	file:
pSavepoint	server/sqlite3.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	server/sqlite3.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSchema	server/sqlite3.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	server/sqlite3.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	server/sqlite3.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	server/sqlite3.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	server/sqlite3.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:
pSchema	server/sqlite3.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	server/sqlite3.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	server/sqlite3.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	server/sqlite3.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	server/sqlite3.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegcsr	server/sqlite3.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	server/sqlite3.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	server/sqlite3.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:
pSelect	server/sqlite3.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon4	file:
pSelect	server/sqlite3.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	server/sqlite3.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	server/sqlite3.c	/^  Select *pSelect;     \/* SELECT statment or RHS of INSERT INTO .. SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSem	server/sqlite3.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	server/sqlite3.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	server/sqlite3.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	server/sqlite3.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	server/sqlite3.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	server/sqlite3.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	server/sqlite3.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSorter	server/sqlite3.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:
pSorter	server/sqlite3.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:
pSqllogArg	server/sqlite3.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:
pSrc	server/sqlite3.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	server/sqlite3.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrc	server/sqlite3.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:
pSrcCount	server/sqlite3.c	/^    struct SrcCount *pSrcCount;                \/* Counting column references *\/$/;"	m	union:Walker::__anon8	typeref:struct:Walker::__anon8::SrcCount	file:
pSrcDb	server/sqlite3.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	server/sqlite3.c	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::__anon8	file:
pSrcList	server/sqlite3.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	server/sqlite3.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	server/sqlite3.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	server/sqlite3.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	server/sqlite3.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	server/sqlite3.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	server/sqlite3.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	server/sqlite3.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	server/sqlite3.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	server/sqlite3.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	server/sqlite3.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	server/sqlite3.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	server/sqlite3.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	server/sqlite3.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	server/sqlite3.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	server/sqlite3.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTask	server/sqlite3.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:
pTask	server/sqlite3.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:
pThread	server/sqlite3.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:
pTmpSpace	server/sqlite3.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	server/sqlite3.c	/^  u8 *pTmpSpace;        \/* BtShared.pageSize bytes of space for tmp use *\/$/;"	m	struct:BtShared	file:
pTok	server/sqlite3.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:
pToken	server/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	server/sqlite3.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	server/sqlite3.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	server/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	server/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	server/sqlite3.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	server/sqlite3.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	server/sqlite3.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	server/sqlite3.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTrig	server/sqlite3.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	server/sqlite3.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	server/sqlite3.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	server/sqlite3.c	111507;"	d	file:
pTrigger	server/sqlite3.c	93826;"	d	file:
pTrigger	server/sqlite3.c	98289;"	d	file:
pTriggerPrg	server/sqlite3.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	server/sqlite3.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	server/sqlite3.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	server/sqlite3.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	server/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:
pUnpacked	server/sqlite3.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:
pUnused	server/sqlite3.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	server/sqlite3.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	server/sqlite3.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	server/sqlite3.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pUser	server/sqlite3.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	server/sqlite3.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUser	server/sqlite3.h	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info
pUser	server/sqlite3.h	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry
pUserData	server/sqlite3.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	server/sqlite3.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	server/sqlite3.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTable	server/sqlite3.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	server/sqlite3.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVdbe	server/sqlite3.c	/^  Vdbe *pVdbe;          \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:
pVdbe	server/sqlite3.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	server/sqlite3.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:
pVdbe	server/sqlite3.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeBranchArg	server/sqlite3.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:
pVfs	server/sqlite3.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	server/sqlite3.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	server/sqlite3.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	server/sqlite3.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	server/sqlite3.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	server/sqlite3.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	server/sqlite3.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon1	file:
pVtab	server/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	server/sqlite3.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtab	server/sqlite3.h	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor
pVtabCtx	server/sqlite3.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pVtabCursor	server/sqlite3.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pWC	server/sqlite3.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:
pWC	server/sqlite3.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:
pWC	server/sqlite3.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWInfo	server/sqlite3.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:
pWInfo	server/sqlite3.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:
pWLoop	server/sqlite3.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:
pWal	server/sqlite3.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	server/sqlite3.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	server/sqlite3.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	server/sqlite3.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	server/sqlite3.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	server/sqlite3.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	server/sqlite3.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWith	server/sqlite3.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:
pWith	server/sqlite3.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:
pWriteNode	server/sqlite3.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	server/sqlite3.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	server/sqlite3.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	server/sqlite3.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	server/sqlite3.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
p_	xdrpp/xdrpp/marshal.h	/^  const std::uint32_t *p_;$/;"	m	struct:xdr::xdr_generic_get
padToSectorBoundary	server/sqlite3.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	server/sqlite3.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:
pageHash	server/sqlite3.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	server/sqlite3.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:
pageReinit	server/sqlite3.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	server/sqlite3.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	server/sqlite3.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagerAcquireMapPage	server/sqlite3.c	/^static int pagerAcquireMapPage($/;"	f	file:
pagerBeginReadTransaction	server/sqlite3.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	server/sqlite3.c	41612;"	d	file:
pagerExclusiveLock	server/sqlite3.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerFixMaplimit	server/sqlite3.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:
pagerFreeMapHdrs	server/sqlite3.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:
pagerLockDb	server/sqlite3.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	server/sqlite3.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	server/sqlite3.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	server/sqlite3.c	41611;"	d	file:
pagerOpentemp	server/sqlite3.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	server/sqlite3.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	server/sqlite3.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReleaseMapPage	server/sqlite3.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:
pagerReportSize	server/sqlite3.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	server/sqlite3.c	42882;"	d	file:
pagerRollbackWal	server/sqlite3.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	server/sqlite3.c	41609;"	d	file:
pagerStress	server/sqlite3.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	server/sqlite3.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	server/sqlite3.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	server/sqlite3.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	server/sqlite3.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	server/sqlite3.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	server/sqlite3.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	server/sqlite3.c	41608;"	d	file:
pagerWalFrames	server/sqlite3.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	server/sqlite3.c	41610;"	d	file:
pagerWriteLargeSector	server/sqlite3.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:
pager_cksum	server/sqlite3.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	server/sqlite3.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	server/sqlite3.c	41994;"	d	file:
pager_delmaster	server/sqlite3.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	server/sqlite3.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:
pager_error	server/sqlite3.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	server/sqlite3.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_open_journal	server/sqlite3.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	server/sqlite3.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	server/sqlite3.c	41995;"	d	file:
pager_playback	server/sqlite3.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	server/sqlite3.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	server/sqlite3.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	server/sqlite3.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	server/sqlite3.c	41996;"	d	file:
pager_truncate	server/sqlite3.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	server/sqlite3.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	server/sqlite3.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	server/sqlite3.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	server/sqlite3.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	server/sqlite3.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
param	server/sqlstmt.h	/^  template<typename... Args> SQLStmt &param(Args&&... args) {$/;"	f	class:SQLStmt
parentWrite	server/sqlite3.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parse	xdrpp/xdrpp/iniparse.cc	/^IniGroup::parse(const IniLine &li)$/;"	f	class:xdr::IniGroup
parseDateOrTime	server/sqlite3.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	server/sqlite3.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	server/sqlite3.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	server/sqlite3.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	server/sqlite3.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
parse_uaddr_port	xdrpp/xdrpp/socket.cc	/^parse_uaddr_port(const string &uaddr)$/;"	f	namespace:xdr
parsekv	xdrpp/xdrpp/iniparse.cc	/^parsekv(const string &line, string *kout, string *vout, string *rvout)$/;"	f	namespace:xdr
patternCompare	server/sqlite3.c	/^static int patternCompare($/;"	f	file:
payloadSize	server/sqlite3.c	/^  u32 payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	server/sqlite3.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	server/sqlite3.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	server/sqlite3.c	39243;"	d	file:
pcache1Alloc	server/sqlite3.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	server/sqlite3.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	server/sqlite3.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	server/sqlite3.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	server/sqlite3.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	server/sqlite3.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	server/sqlite3.c	39248;"	d	file:
pcache1Fetch	server/sqlite3.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1FetchStage2	server/sqlite3.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:
pcache1Free	server/sqlite3.c	/^static int pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	server/sqlite3.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	server/sqlite3.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	server/sqlite3.c	39249;"	d	file:
pcache1MemSize	server/sqlite3.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	server/sqlite3.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	server/sqlite3.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	server/sqlite3.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	server/sqlite3.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	server/sqlite3.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	server/sqlite3.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	server/sqlite3.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	server/sqlite3.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	server/sqlite3.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	server/sqlite3.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	server/sqlite3.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	server/sqlite3.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	server/sqlite3.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheFetchFinishWithInit	server/sqlite3.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:
pcacheManageDirtyList	server/sqlite3.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:
pcacheMergeDirtyList	server/sqlite3.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheSortDirtyList	server/sqlite3.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	server/sqlite3.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pdfdir	xdrpp/Makefile	/^pdfdir = ${docdir}$/;"	m
pending	xdrpp/xdrpp/pollset.cc	/^pollset_plus::pending() const$/;"	f	class:xdr::pollset_plus
pending	xdrpp/xdrpp/pollset.h	/^  virtual bool pending() const { return num_cbs(); }$/;"	f	class:xdr::pollset
pgno	server/sqlite3.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	server/sqlite3.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	server/sqlite3.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pgnoRoot	server/sqlite3.c	/^  Pgno pgnoRoot;        \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:
pgsz	server/sqlite3.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:
pkgconfig_DATA	xdrpp/Makefile	/^pkgconfig_DATA = xdrpp.pc$/;"	m
pkgconfigdir	xdrpp/Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	xdrpp/Makefile	/^pkgdatadir = $(datadir)\/xdrpp$/;"	m
pkginclude_HEADERS	xdrpp/Makefile	/^pkginclude_HEADERS = xdrpp\/types.h xdrpp\/cereal.h xdrpp\/clear.h		\\$/;"	m
pkgincludedir	xdrpp/Makefile	/^pkgincludedir = $(includedir)\/xdrpp$/;"	m
pkglibdir	xdrpp/Makefile	/^pkglibdir = $(libdir)\/xdrpp$/;"	m
pkglibexecdir	xdrpp/Makefile	/^pkglibexecdir = $(libexecdir)\/xdrpp$/;"	m
pnBytesFreed	server/sqlite3.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
pointer	xdrpp/xdrpp/types.h	/^template<typename T> struct pointer : std::unique_ptr<T> {$/;"	s	namespace:xdr
poll	xdrpp/xdrpp/pollset.cc	/^pollset::poll(int timeout)$/;"	f	class:xdr::pollset
pollfds_	xdrpp/xdrpp/pollset.h	/^  std::vector<pollfd> pollfds_;$/;"	m	class:xdr::pollset
pollset	xdrpp/xdrpp/pollset.h	/^class pollset {$/;"	c	namespace:xdr
pollset_plus	xdrpp/xdrpp/pollset.cc	/^pollset_plus::pollset_plus()$/;"	f	class:xdr::pollset_plus
pollset_plus	xdrpp/xdrpp/pollset.h	/^class pollset_plus : public pollset {$/;"	c	namespace:xdr
pop_wbytes	xdrpp/xdrpp/msgsock.cc	/^msg_sock::pop_wbytes(size_t n)$/;"	f	class:xdr::msg_sock
porterClose	server/sqlite3.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	server/sqlite3.c	/^static int porterCreate($/;"	f	file:
porterDestroy	server/sqlite3.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	server/sqlite3.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	server/sqlite3.c	/^static int porterNext($/;"	f	file:
porterOpen	server/sqlite3.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	server/sqlite3.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	server/sqlite3.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	server/sqlite3.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	server/sqlite3.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	server/sqlite3.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	server/sqlite3.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
posixFchown	server/sqlite3.c	/^static int posixFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
posixOpen	server/sqlite3.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	server/sqlite3.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
ppNextElem	server/sqlite3.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
ppRec	server/sqlite3.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:
prefix	server/sqlite3.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prefix	xdrpp/Makefile	/^prefix = \/usr\/local$/;"	m
prepare	server/sqlite3.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	server/sqlite3.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	server/sqlite3.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_call	xdrpp/xdrpp/srpc.cc	/^prepare_call(uint32_t prog, uint32_t vers, uint32_t proc, rpc_msg &hdr)$/;"	f	namespace:xdr
prepare_call	xdrpp/xdrpp/srpc.h	/^prepare_call(rpc_msg &hdr)$/;"	f	namespace:xdr
prepare_v2	server/sqlite3.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereq	server/sqlite3.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:
prereq	server/sqlite3.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:
prereqAll	server/sqlite3.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	server/sqlite3.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	cacheserver/lrucache.hh	/^    node* prev;$/;"	m	struct:lru_cache::node
prev	server/sqlite3.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:
prev	server/sqlite3.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	server/sqlite3.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	server/sqlite3.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	server/sqlite3.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:
printUint128	include/helpers.cc	/^printUint128(uint128_t num)$/;"	f
print_pager_state	server/sqlite3.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
printfFunc	server/sqlite3.c	/^static void printfFunc($/;"	f	file:
proc	include/server.hh	/^    static constexpr std::uint32_t proc = 1;$/;"	m	struct:api_v1::sendHeartbeat_t
proc	include/server.hh	/^    static constexpr std::uint32_t proc = 1;$/;"	m	struct:cache_api_v1::getCacheContents_t
proc	include/server.hh	/^    static constexpr std::uint32_t proc = 2;$/;"	m	struct:api_v1::getCacheServer_t
proc	include/server.hh	/^    static constexpr std::uint32_t proc = 2;$/;"	m	struct:cache_api_v1::newCacheserverAdded_t
proc	include/server.hh	/^    static constexpr std::uint32_t proc = 3;$/;"	m	struct:cache_api_v1::sendCachedData_t
proc_compare	xdrpp/xdrc/parse.cc	/^proc_compare(const void *_a, const void *_b)$/;"	f	file:
proc_name	include/server.hh	/^    static constexpr const char *proc_name = "getCacheContents";$/;"	m	struct:cache_api_v1::getCacheContents_t
proc_name	include/server.hh	/^    static constexpr const char *proc_name = "getCacheServer";$/;"	m	struct:api_v1::getCacheServer_t
proc_name	include/server.hh	/^    static constexpr const char *proc_name = "newCacheserverAdded";$/;"	m	struct:cache_api_v1::newCacheserverAdded_t
proc_name	include/server.hh	/^    static constexpr const char *proc_name = "sendCachedData";$/;"	m	struct:cache_api_v1::sendCachedData_t
proc_name	include/server.hh	/^    static constexpr const char *proc_name = "sendHeartbeat";$/;"	m	struct:api_v1::sendHeartbeat_t
procs	xdrpp/xdrc/xdrc_internal.h	/^  vec<rpc_proc> procs;$/;"	m	struct:rpc_vers
profile	server/sqlite3.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
prog_	xdrpp/xdrpp/server.h	/^  const uint32_t prog_;$/;"	m	struct:xdr::service_base
program	include/server.hh	/^  static constexpr std::uint32_t program = 1074036870;$/;"	m	struct:api_v1
program	include/server.hh	/^  static constexpr std::uint32_t program = 2147778694;$/;"	m	struct:cache_api_v1
program_details	xdrpp/missing	/^program_details ()$/;"	f
program_name	include/server.hh	/^  static constexpr const char *program_name = "cache_server_api";$/;"	m	struct:cache_api_v1
program_name	include/server.hh	/^  static constexpr const char *program_name = "server_api";$/;"	m	struct:api_v1
program_transform_name	xdrpp/Makefile	/^program_transform_name = s,x,x,$/;"	m
progress_handler	server/sqlite3.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
prototypes	xdrpp/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxyBreakConchLock	server/sqlite3.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	server/sqlite3.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	server/sqlite3.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	server/sqlite3.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	server/sqlite3.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	server/sqlite3.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	server/sqlite3.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	server/sqlite3.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	server/sqlite3.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	server/sqlite3.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	server/sqlite3.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	server/sqlite3.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	server/sqlite3.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	server/sqlite3.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	server/sqlite3.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	server/sqlite3.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	server/sqlite3.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	server/sqlite3.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
ps_	xdrpp/xdrpp/msgsock.h	/^  pollset &ps_;$/;"	m	class:xdr::msg_sock
ps_	xdrpp/xdrpp/pollset.h	/^    pollset_plus *ps_;$/;"	m	struct:xdr::pollset_plus::wake_type::async_task
ps_	xdrpp/xdrpp/server.h	/^  pollset ps_;$/;"	m	class:xdr::rpc_tcp_listener
psdir	xdrpp/Makefile	/^psdir = ${docdir}$/;"	m
pseudoTableReg	server/sqlite3.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pswitch	xdrpp/xdrc/gen_hh.cc	/^pswitch(const rpc_union &u, string id = string())$/;"	f	namespace:__anon26
pthreadMutexAlloc	server/sqlite3.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	server/sqlite3.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	server/sqlite3.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	server/sqlite3.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	server/sqlite3.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	server/sqlite3.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	server/sqlite3.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	server/sqlite3.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	server/sqlite3.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	server/sqlite3.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	server/sqlite3.c	53033;"	d	file:
ptrmapPageno	server/sqlite3.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	server/sqlite3.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	server/sqlite3.c	53032;"	d	file:
ptrmapPutOvflPtr	server/sqlite3.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	server/sqlite3.c	53034;"	d	file:
pushOntoSorter	server/sqlite3.c	/^static void pushOntoSorter($/;"	f	file:
push_back	xdrpp/xdrc/xdrc_internal.h	/^  T &push_back() { this->emplace_back(); return this->back(); }$/;"	f	struct:vec
put	cacheserver/lrucache.hh	/^  void put(std::string key, T value) {$/;"	f	class:lru_cache
put	cacheserver/serverdb.cc	/^ServerDB::put(const string &path, const string &val)$/;"	f	class:ServerDB
put2byte	server/sqlite3.c	51812;"	d	file:
put32	xdrpp/xdrpp/marshal.h	/^  static void put32(std::uint32_t *&p, std::uint32_t v) { *p++ = v; }$/;"	f	struct:xdr::marshal_noswap
put32	xdrpp/xdrpp/marshal.h	/^  static void put32(std::uint32_t *&p, std::uint32_t v) {$/;"	f	struct:xdr::marshal_swap
put32bits	server/sqlite3.c	41853;"	d	file:
put4byte	server/sqlite3.c	51814;"	d	file:
put64	xdrpp/xdrpp/marshal.h	/^  static void put64(std::uint32_t *&p, u64conv u) {$/;"	f	struct:xdr::marshal_noswap
put64	xdrpp/xdrpp/marshal.h	/^  static void put64(std::uint32_t *&p, u64conv u) {$/;"	f	struct:xdr::marshal_swap
putVarint	server/sqlite3.c	12948;"	d	file:
putVarint32	server/sqlite3.c	12944;"	d	file:
putVarint64	server/sqlite3.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:
put_bytes	xdrpp/xdrpp/marshal.cc	/^marshal_base::put_bytes(std::uint32_t *&pr, const void *buf, std::size_t len)$/;"	f	class:xdr::marshal_base
putmsg	xdrpp/xdrpp/msgsock.cc	/^msg_sock::putmsg(msg_ptr &mb)$/;"	f	class:xdr::msg_sock
putmsg	xdrpp/xdrpp/msgsock.h	/^  void putmsg(msg_ptr &&b) { putmsg(b); }$/;"	f	class:xdr::msg_sock
pzErrMsg	server/sqlite3.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon7	file:
qual	xdrpp/xdrc/xdrc_internal.h	/^  enum { SCALAR, PTR, ARRAY, VEC } qual {SCALAR};$/;"	g	struct:rpc_decl
querySharedCacheTableLock	server/sqlite3.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	server/sqlite3.c	52208;"	d	file:
queryTestTokenizer	server/sqlite3.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	server/sqlite3.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	server/sqlite3.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
quote_for_sed	xdrpp/ylwrap	/^quote_for_sed ()$/;"	f
r	server/sqlite3.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:Mem::MemValue	file:
r1	server/sqlite3.c	/^  int r1;             \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:
r2	server/sqlite3.c	/^  int r2;             \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	file:
rCost	server/sqlite3.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:
rParentScore	server/sqlite3.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rParentScore	server/sqlite3.h	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info
rRun	server/sqlite3.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:
rRun	server/sqlite3.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:
rScore	server/sqlite3.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:
rScore	server/sqlite3.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rScore	server/sqlite3.h	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info
rSetup	server/sqlite3.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:
rSum	server/sqlite3.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rUnsorted	server/sqlite3.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:
rValue	server/sqlite3.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon25	file:
randomBlob	server/sqlite3.c	/^static void randomBlob($/;"	f	file:
randomFill	server/sqlite3.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	server/sqlite3.c	/^static void randomFunc($/;"	f	file:
randomness	server/sqlite3.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
randomnessPid	server/sqlite3.c	/^static int randomnessPid = 0;$/;"	v	file:
raw_data	xdrpp/xdrpp/message.h	/^  char *raw_data() { return buf_; }$/;"	f	class:xdr::message_t
raw_data	xdrpp/xdrpp/message.h	/^  const char *raw_data() const { return buf_; }$/;"	f	class:xdr::message_t
raw_size	xdrpp/xdrpp/message.h	/^  std::size_t raw_size() const { return size_ + 4; }$/;"	f	class:xdr::message_t
rawvalue_	xdrpp/xdrpp/iniparse.h	/^  string rawvalue_;$/;"	m	class:xdr::IniLine
rc	server/sqlite3.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	server/sqlite3.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	server/sqlite3.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	server/sqlite3.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon7	file:
rc	server/sqlite3.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rcb	xdrpp/xdrpp/pollset.h	/^    cb_t rcb;$/;"	m	struct:xdr::pollset::fd_state
rcb_	xdrpp/xdrpp/msgsock.h	/^  rcb_t rcb_;$/;"	m	class:xdr::msg_sock
rdmsg_	xdrpp/xdrpp/msgsock.h	/^  msg_ptr rdmsg_;$/;"	m	class:xdr::msg_sock
read32bits	server/sqlite3.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	server/sqlite3.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	server/sqlite3.c	/^static int readDbPage(PgHdr *pPg, u32 iFrame){$/;"	f	file:
readInt16	server/sqlite3.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	server/sqlite3.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	server/sqlite3.c	/^static int readJournalHdr($/;"	f	file:
readLock	server/sqlite3.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	server/sqlite3.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	server/sqlite3.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:
readOnly	server/sqlite3.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	server/sqlite3.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
read_message	xdrpp/xdrpp/srpc.cc	/^read_message(int fd)$/;"	f	namespace:xdr
readpoint	server/sqlite3.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	server/sqlite3.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:
real	server/sqlstmt.h	/^  double real(int i) {$/;"	f	class:SQLStmt
realloc	server/sqlite3.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
realloc64	server/sqlite3.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
really_close	xdrpp/xdrpp/socket.cc	/^really_close(int fd)$/;"	f	namespace:xdr
receive_cb	xdrpp/xdrpp/server.cc	/^rpc_tcp_listener::receive_cb(msg_sock *ms, msg_ptr mp)$/;"	f	class:xdr::rpc_tcp_listener
recordFunc	server/sqlite3.c	/^static void recordFunc($/;"	f	file:
regCtr	server/sqlite3.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regResult	server/sqlite3.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	server/sqlite3.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	server/sqlite3.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:
regRoot	server/sqlite3.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	server/sqlite3.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
register	xdrpp/xdrc/scan.cc	614;"	d	file:
registerTokenizer	server/sqlite3.c	/^int registerTokenizer($/;"	f	file:
registerTrace	server/sqlite3.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:
register_service	xdrpp/xdrpp/server.h	/^  template<typename T> void register_service(T &t) {$/;"	f	class:xdr::rpc_tcp_listener
register_service	xdrpp/xdrpp/srpc.h	/^  template<typename T> void register_service(T &t) {$/;"	f	class:xdr::srpc_server
register_service_base	xdrpp/xdrpp/server.cc	/^rpc_server_base::register_service_base(service_base *s)$/;"	f	class:xdr::rpc_server_base
registered_services	xdrpp/xdrpp/socket.cc	/^std::vector<rpcb> registered_services;$/;"	m	namespace:xdr::__anon37	file:
rehash	server/sqlite3.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	server/sqlite3.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	server/sqlite3.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	server/sqlite3.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
reject_	xdrpp/xdrpp/exception.h	/^    reject_stat reject_;$/;"	m	union:xdr::xdr_call_error::__anon33
release	xdrpp/xdrpp/socket.h	/^  int release() {$/;"	f	class:xdr::unique_fd
releaseAllSavepoints	server/sqlite3.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	server/sqlite3.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	server/sqlite3.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	server/sqlite3.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	server/sqlite3.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	server/sqlite3.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	server/sqlite3.c	/^static int relocatePage($/;"	f	file:
remove	cacheserver/lrucache.hh	/^  void remove(node* n) {$/;"	f	class:lru_cache
remove	server/serverdb.cc	/^ServerDB::remove(const string &path)$/;"	f	class:ServerDB
removeElementGivenHash	server/sqlite3.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	server/sqlite3.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	server/sqlite3.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	server/sqlite3.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
removeTimedOutServers	server/serverimpl.cc	/^api_v1_server::removeTimedOutServers(uint128_t curr_nsec)$/;"	f	class:api_v1_server
remove_diacritic	server/sqlite3.c	/^static int remove_diacritic(int c){$/;"	f	file:
renameParentFunc	server/sqlite3.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	server/sqlite3.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	server/sqlite3.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	server/sqlite3.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	server/sqlite3.c	/^static void replaceFunc($/;"	f	file:
res	xdrpp/xdrc/xdrc_internal.h	/^  string res;$/;"	m	struct:rpc_proc
reserved	server/sqlite3.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	server/sqlite3.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
reset	server/sqlstmt.h	/^  SQLStmt &reset() { return set_status(sqlite3_reset (stmt_)); }$/;"	f	class:SQLStmt
reset	xdrpp/xdrc/union.h	/^  template<typename ...A> void reset(A&&...a) {$/;"	f	class:union_ptr
reset	xdrpp/xdrpp/socket.h	/^  void reset(int fd) { clear(); fd_ = fd; }$/;"	f	class:xdr::unique_fd
resetAccumulator	server/sqlite3.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
reset_auto_extension	server/sqlite3.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:
resize	xdrpp/xdrpp/types.h	/^  static void resize(uint32_t i) {$/;"	f	struct:xdr::xarray
resize	xdrpp/xdrpp/types.h	/^  void resize(uint32_t n) {$/;"	f	struct:xdr::pointer
resize	xdrpp/xdrpp/types.h	/^  void resize(uint32_t n) {$/;"	f	struct:xdr::xvector
resizeIndexObject	server/sqlite3.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:
resolveAlias	server/sqlite3.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	server/sqlite3.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	server/sqlite3.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	server/sqlite3.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	server/sqlite3.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	server/sqlite3.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	server/sqlite3.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	server/sqlite3.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	server/sqlite3.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	server/sqlite3.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	server/sqlite3.c	52862;"	d	file:
result_blob	server/sqlite3.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_blob64	server/sqlite3.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_double	server/sqlite3.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	server/sqlite3.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	server/sqlite3.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	server/sqlite3.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	server/sqlite3.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	server/sqlite3.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	server/sqlite3.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	server/sqlite3.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	server/sqlite3.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	server/sqlite3.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	server/sqlite3.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	server/sqlite3.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	server/sqlite3.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text64	server/sqlite3.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_value	server/sqlite3.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	server/sqlite3.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	server/sqlite3.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	server/sqlite3.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
reusable	server/sqlite3.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:
revLoop	server/sqlite3.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:
revMask	server/sqlite3.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:
robust_close	server/sqlite3.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	server/sqlite3.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	server/sqlite3.c	26983;"	d	file:
robust_ftruncate	server/sqlite3.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	server/sqlite3.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rollback_hook	server/sqlite3.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
roneshot	xdrpp/xdrpp/pollset.h	/^    bool roneshot;$/;"	m	struct:xdr::pollset::fd_state
rootOnly	server/sqlite3.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:
roundFunc	server/sqlite3.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
row	server/sqlstmt.h	/^  bool row() {$/;"	f	class:SQLStmt
rowSetEntryAlloc	server/sqlite3.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	server/sqlite3.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	server/sqlite3.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	server/sqlite3.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	server/sqlite3.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetToList	server/sqlite3.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	server/sqlite3.c	/^static void rowSetTreeToList($/;"	f	file:
rowidIsValid	server/sqlite3.c	/^  u8 rowidIsValid;      \/* True if lastRowid is valid *\/$/;"	m	struct:VdbeCursor	file:
rowidWrite	server/sqlite3.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rp_	xdrpp/xdrpp/pollset.h	/^    std::unique_ptr<R> rp_;$/;"	m	struct:xdr::pollset_plus::wake_type::async_task
rpc_const	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_const {$/;"	s
rpc_decl	xdrpp/xdrc/xdrc_internal.h	/^  rpc_decl() : _base() {}$/;"	f	struct:rpc_decl
rpc_decl	xdrpp/xdrc/xdrc_internal.h	/^  rpc_decl(const rpc_decl &d)$/;"	f	struct:rpc_decl
rpc_decl	xdrpp/xdrc/xdrc_internal.h	/^  rpc_decl(rpc_decl &&d)$/;"	f	struct:rpc_decl
rpc_decl	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_decl {$/;"	s
rpc_enum	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_enum {$/;"	s
rpc_errmsg	xdrpp/xdrpp/rpc_msg.cc	/^rpc_errmsg(accept_stat ev)$/;"	f	namespace:xdr
rpc_errmsg	xdrpp/xdrpp/rpc_msg.cc	/^rpc_errmsg(auth_stat ev)$/;"	f	namespace:xdr
rpc_errmsg	xdrpp/xdrpp/rpc_msg.cc	/^rpc_errmsg(reject_stat ev)$/;"	f	namespace:xdr
rpc_mkerr	xdrpp/xdrpp/server.cc	/^rpc_mkerr(rpc_msg &m, accept_stat stat)$/;"	f	namespace:xdr::__anon36
rpc_mkerr	xdrpp/xdrpp/server.cc	/^rpc_mkerr(rpc_msg &m, reject_stat stat)$/;"	f	namespace:xdr::__anon36
rpc_proc	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_proc {$/;"	s
rpc_program	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_program {$/;"	s
rpc_server_base	xdrpp/xdrpp/server.h	/^class rpc_server_base {$/;"	c	namespace:xdr
rpc_struct	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_struct {$/;"	s
rpc_sym	xdrpp/xdrc/xdrc_internal.h	/^  rpc_sym () : _base() {}$/;"	f	struct:rpc_sym
rpc_sym	xdrpp/xdrc/xdrc_internal.h	/^  rpc_sym (rpc_sym &&s) : _base(std::move(s._base)), type (s.type) {}$/;"	f	struct:rpc_sym
rpc_sym	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_sym {$/;"	s
rpc_tcp_listener	xdrpp/xdrpp/server.cc	/^rpc_tcp_listener::rpc_tcp_listener(unique_fd &&fd, bool reg)$/;"	f	class:xdr::rpc_tcp_listener
rpc_tcp_listener	xdrpp/xdrpp/server.h	/^  rpc_tcp_listener() : rpc_tcp_listener(unique_fd(-1), true) {}$/;"	f	class:xdr::rpc_tcp_listener
rpc_tcp_listener	xdrpp/xdrpp/server.h	/^class rpc_tcp_listener : rpc_server_base {$/;"	c	namespace:xdr
rpc_ufield	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_ufield {$/;"	s
rpc_union	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_union {$/;"	s
rpc_vers	xdrpp/xdrc/xdrc_internal.h	/^struct rpc_vers {$/;"	s
rpcbind_register	xdrpp/xdrpp/socket.cc	/^rpcbind_register(const sockaddr *sa, socklen_t salen,$/;"	f	namespace:xdr
rpcbind_register	xdrpp/xdrpp/socket.cc	/^rpcbind_register(int fd, std::uint32_t prog, std::uint32_t vers)$/;"	f	namespace:xdr
rsFlags	server/sqlite3.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:
rtreeBestIndex	server/sqlite3.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeCallbackConstraint	server/sqlite3.c	/^static int rtreeCallbackConstraint($/;"	f	file:
rtreeClose	server/sqlite3.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	server/sqlite3.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	server/sqlite3.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	server/sqlite3.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	server/sqlite3.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	server/sqlite3.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	server/sqlite3.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEnqueue	server/sqlite3.c	/^static RtreeSearchPoint *rtreeEnqueue($/;"	f	file:
rtreeEof	server/sqlite3.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	server/sqlite3.c	/^static int rtreeFilter($/;"	f	file:
rtreeFreeCallback	server/sqlite3.c	/^static void rtreeFreeCallback(void *p){$/;"	f	file:
rtreeInit	server/sqlite3.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	server/sqlite3.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeLeafConstraint	server/sqlite3.c	/^static void rtreeLeafConstraint($/;"	f	file:
rtreeModule	server/sqlite3.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	server/sqlite3.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeNodeOfFirstSearchPoint	server/sqlite3.c	/^static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){$/;"	f	file:
rtreeNonleafConstraint	server/sqlite3.c	/^static void rtreeNonleafConstraint($/;"	f	file:
rtreeOpen	server/sqlite3.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeQueryStat1	server/sqlite3.c	/^static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){$/;"	f	file:
rtreeReference	server/sqlite3.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	server/sqlite3.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	server/sqlite3.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	server/sqlite3.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSearchPointCompare	server/sqlite3.c	/^static int rtreeSearchPointCompare($/;"	f	file:
rtreeSearchPointFirst	server/sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){$/;"	f	file:
rtreeSearchPointNew	server/sqlite3.c	/^static RtreeSearchPoint *rtreeSearchPointNew($/;"	f	file:
rtreeSearchPointPop	server/sqlite3.c	/^static void rtreeSearchPointPop(RtreeCursor *p){$/;"	f	file:
rtreeSearchPointSwap	server/sqlite3.c	/^static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){$/;"	f	file:
rtreeSqlInit	server/sqlite3.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeStepToLeaf	server/sqlite3.c	/^static int rtreeStepToLeaf(RtreeCursor *pCur){$/;"	f	file:
rtreeUpdate	server/sqlite3.c	/^static int rtreeUpdate($/;"	f	file:
rtreeValueDown	server/sqlite3.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:
rtreeValueUp	server/sqlite3.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:
rtreedepth	server/sqlite3.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	server/sqlite3.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
run	xdrpp/xdrpp/server.cc	/^rpc_tcp_listener::run()$/;"	f	class:xdr::rpc_tcp_listener
run	xdrpp/xdrpp/srpc.cc	/^srpc_server::run()$/;"	f	class:xdr::srpc_server
runOnlyOnce	server/sqlite3.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
run_cleanup	xdrpp/xdrpp/socket.cc	/^run_cleanup()$/;"	f	namespace:xdr::__anon37
run_pending_asyncs	xdrpp/xdrpp/pollset.cc	/^pollset_plus::run_pending_asyncs()$/;"	f	class:xdr::pollset_plus
run_subtype_handlers	xdrpp/xdrpp/pollset.cc	/^pollset_plus::run_subtype_handlers()$/;"	f	class:xdr::pollset_plus
run_subtype_handlers	xdrpp/xdrpp/pollset.h	/^  virtual void run_subtype_handlers() {}$/;"	f	class:xdr::pollset
run_timeouts	xdrpp/xdrpp/pollset.cc	/^pollset::run_timeouts()$/;"	f	class:xdr::pollset
s	server/sqlite3.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	server/sqlite3.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
s	xdrpp/xdrpp/iniparse.cc	/^		 const string &s, T *rp)$/;"	m	namespace:xdr	file:
s	xdrpp/xdrpp/iniparse.cc	/^add_base(T (&conv)(const string &, size_t *), const string &s, size_t *pos)$/;"	m	namespace:xdr	file:
s	xdrpp/xdrpp/iniparse.cc	/^add_base(T (&conv)(const string &, size_t *, int), const string &s, size_t *pos)$/;"	m	namespace:xdr	file:
sArg	server/sqlite3.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	server/sqlite3.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	server/sqlite3.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sMaskSet	server/sqlite3.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:
sNameToken	server/sqlite3.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
sPoint	server/sqlite3.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:
sPragmaNames	server/sqlite3.c	/^static const struct sPragmaNames {$/;"	s	file:
sWC	server/sqlite3.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:
safety_level	server/sqlite3.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
sampleClear	server/sqlite3.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:
sampleCopy	server/sqlite3.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:
sampleInsert	server/sqlite3.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:
sampleIsBetter	server/sqlite3.c	/^static int sampleIsBetter($/;"	f	file:
sampleIsBetterPost	server/sqlite3.c	/^static int sampleIsBetterPost($/;"	f	file:
samplePushPrevious	server/sqlite3.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:
sampleSetRowid	server/sqlite3.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:
sampleSetRowidInt64	server/sqlite3.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:
save	include/server.hh	/^  save(Archive &ar, const ::cacheTransfer &obj) {$/;"	f	struct:xdr::xdr_traits
save	include/server.hh	/^  save(Archive &ar, const ::heartbeat &obj) {$/;"	f	struct:xdr::xdr_traits
save	include/server.hh	/^  save(Archive &ar, const ::newCacheServerInfo &obj) {$/;"	f	struct:xdr::xdr_traits
save	xdrpp/xdrpp/cereal.h	/^save(Archive &ar, const T &t)$/;"	f	namespace:xdr::detail
save	xdrpp/xdrpp/types.h	/^  save(Archive &ar, const xdr_void &obj) {}$/;"	f	struct:xdr::xdr_traits
save	xdrpp/xdrpp/types.h	/^  template<typename Archive> static void save(Archive &a, const T &t) {$/;"	f	struct:xdr::detail::xdr_container_base
saveAllCursors	server/sqlite3.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	server/sqlite3.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveCursorsOnList	server/sqlite3.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:
savedNQueryLoop	server/sqlite3.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	server/sqlite3.c	/^static int saved_cnt;$/;"	v	file:
sbindir	xdrpp/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scalarFunc	server/sqlite3.c	/^static void scalarFunc($/;"	f	file:
schemaFlags	server/sqlite3.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
schemaIsValid	server/sqlite3.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	server/sqlite3.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
sconst	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_const> sconst;$/;"	m	union:rpc_sym::__anon31
scope	xdrpp/xdrc/gen_hh.cc	/^vec<string> scope;$/;"	m	namespace:__anon26	file:
scratchAllocOut	server/sqlite3.c	/^static int scratchAllocOut = 0;$/;"	v	file:
searchWith	server/sqlite3.c	/^static struct Cte *searchWith($/;"	f	file:
sectorSize	server/sqlite3.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:
sectorSize	server/sqlite3.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	server/sqlite3.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	server/sqlite3.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekAndWriteFd	server/sqlite3.c	/^static int seekAndWriteFd($/;"	f	file:
seekOp	server/sqlite3.c	/^  u8 seekOp;            \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:
seekResult	server/sqlite3.c	/^  int seekResult;       \/* Result of previous sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
selFlags	server/sqlite3.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
select	xdrpp/xdrc/union.h	/^  T &select() {$/;"	f	class:union_entry
select	xdrpp/xdrc/union.h	/^  void select() {$/;"	f	class:union_entry
select	xdrpp/xdrc/union.h	/^  void select() {$/;"	f	class:union_ptr
selectAddColumnTypeAndCollation	server/sqlite3.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	server/sqlite3.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	server/sqlite3.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	server/sqlite3.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	server/sqlite3.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	server/sqlite3.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	server/sqlite3.c	/^static const char *selectOpName(int id){$/;"	f	file:
selectPopWith	server/sqlite3.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:
selectPopWith	server/sqlite3.c	108001;"	d	file:
selfpipe_	xdrpp/xdrpp/pollset.h	/^  int selfpipe_[2];$/;"	m	class:xdr::pollset_plus::wake_type
semCheckReservedLock	server/sqlite3.c	/^static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semClose	server/sqlite3.c	/^static int semClose(sqlite3_file *id) {$/;"	f	file:
semLock	server/sqlite3.c	/^static int semLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semUnlock	server/sqlite3.c	/^static int semUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
sendCachedData	cacheserver/cacheserverimpl.cc	/^cache_api_v1_server::sendCachedData(std::unique_ptr<cacheTransfer> arg)$/;"	f	class:cache_api_v1_server
sendCachedData_t	include/server.hh	/^  struct sendCachedData_t {$/;"	s	struct:cache_api_v1
sendHeartbeat	server/serverimpl.cc	/^api_v1_server::sendHeartbeat(std::unique_ptr<heartbeat> arg)$/;"	f	class:api_v1_server
sendHeartbeat_t	include/server.hh	/^  struct sendHeartbeat_t {$/;"	s	struct:api_v1
sendRequest	include/httpclient.cc	/^httpclient::sendRequest(string queryStr,$/;"	f	class:httpclient
sendreq	xdrpp/tests/srpc.cc	/^sendreq(int fd)$/;"	f
senum	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_enum> senum;$/;"	m	union:rpc_sym::__anon31
seqCount	server/sqlite3.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
serialGet	server/sqlite3.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:
serial_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t serial_size(const opaque_vec<N> &a) {$/;"	f	struct:xdr::xdr_traits
serial_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t serial_size(const typename FP::class_type &) {$/;"	f	struct:xdr::detail::xdr_struct_base_fs
serial_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t serial_size(const xstring<N> &a) {$/;"	f	struct:xdr::xdr_traits
serial_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t serial_size(type) { return fixed_size; }$/;"	f	struct:xdr::xdr_fp_base
serial_size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t serial_size(type) { return fixed_size; }$/;"	f	struct:xdr::xdr_integral_base
serial_size	xdrpp/xdrpp/types.h	/^  static std::size_t serial_size(const T &) { return fixed_size; }$/;"	f	struct:xdr::detail::xdr_container_base
serial_size	xdrpp/xdrpp/types.h	/^  static std::size_t serial_size(const T &t) {$/;"	f	struct:xdr::detail::xdr_container_base
serial_size	xdrpp/xdrpp/types.h	/^  static std::size_t serial_size(const opaque_array<N> &) { return fixed_size; }$/;"	f	struct:xdr::xdr_traits
serial_size	xdrpp/xdrpp/types.h	/^  static std::size_t serial_size(const typename FP::class_type &t) {$/;"	f	struct:xdr::detail::xdr_struct_base_vs
serial_size	xdrpp/xdrpp/types.h	/^  template<typename T> static constexpr std::size_t serial_size(const T&) {$/;"	f	struct:xdr::xdr_struct_base
servers_	xdrpp/xdrpp/server.h	/^	   std::map<uint32_t, std::unique_ptr<service_base>>> servers_;$/;"	m	class:xdr::rpc_server_base
service_base	xdrpp/xdrpp/server.h	/^  service_base(uint32_t prog, uint32_t vers) : prog_(prog), vers_(vers) {}$/;"	f	struct:xdr::service_base
service_base	xdrpp/xdrpp/server.h	/^struct service_base {$/;"	s	namespace:xdr
set	server/serverdb.cc	/^ServerDB::set(const string &path, const string &val)$/;"	f	class:ServerDB
setAllPagerFlags	server/sqlite3.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:
setAllPagerFlags	server/sqlite3.c	101363;"	d	file:
setChildPtrmaps	server/sqlite3.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	server/sqlite3.c	55394;"	d	file:
setDateTimeToCurrent	server/sqlite3.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	server/sqlite3.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setEstimatedRows	server/sqlite3.c	/^static void setEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
setJoinExpr	server/sqlite3.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	server/sqlite3.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	server/sqlite3.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPageReferenced	server/sqlite3.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	server/sqlite3.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	server/sqlite3.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	server/sqlite3.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	server/sqlite3.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	server/sqlite3.c	52209;"	d	file:
setStrAccumError	server/sqlite3.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:
set_authorizer	server/sqlite3.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	server/sqlite3.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
set_base_from	xdrpp/depcomp	/^set_base_from ()$/;"	f
set_cleanup	xdrpp/xdrpp/socket.cc	/^set_cleanup()$/;"	f	namespace:xdr::__anon37
set_close_on_exec	xdrpp/xdrpp/socket.cc	/^set_close_on_exec(int fd)$/;"	f	namespace:xdr
set_dir_from	xdrpp/depcomp	/^set_dir_from ()$/;"	f
set_id	xdrpp/xdrc/xdrc.cc	/^rpc_decl::set_id(const string &nid)$/;"	f	class:rpc_decl
set_max_size	cacheserver/lrucache.hh	/^  void set_max_size(int size) {$/;"	f	class:lru_cache
set_nonblock	xdrpp/xdrpp/socket.cc	/^set_nonblock(int fd)$/;"	f	namespace:xdr
set_status	server/sqlstmt.cc	/^SQLStmt::set_status (int status)$/;"	f	class:SQLStmt
setrcb	xdrpp/xdrpp/msgsock.h	/^  template<typename T> void setrcb(T &&rcb) {$/;"	f	class:xdr::msg_sock
settype	xdrpp/xdrc/xdrc_internal.h	/^  void settype (symtype t) {$/;"	f	struct:rpc_sym
setupLookaside	server/sqlite3.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	server/sqlite3.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	server/sqlite3.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	server/sqlite3.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	server/sqlite3.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	server/sqlite3.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	server/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	server/sqlite3.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	server/sqlite3.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
sharedstatedir	xdrpp/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
short	xdrpp/xdrc/parse.cc	176;"	d	file:
signal_cb	xdrpp/xdrpp/pollset.cc	/^pollset_plus::signal_cb(int sig, cb_t cb)$/;"	f	class:xdr::pollset_plus
signal_cb	xdrpp/xdrpp/pollset.cc	/^pollset_plus::signal_cb(int sig, std::nullptr_t)$/;"	f	class:xdr::pollset_plus
signal_cbs_	xdrpp/xdrpp/pollset.h	/^  std::map<int, cb_t> signal_cbs_;$/;"	m	class:xdr::pollset_plus::wake_type
signal_flags	xdrpp/xdrpp/pollset.cc	/^volatile std::sig_atomic_t pollset_plus::signal_flags[num_sig];$/;"	m	class:xdr::pollset_plus	file:
signal_flags	xdrpp/xdrpp/pollset.h	/^  static volatile std::sig_atomic_t signal_flags[num_sig];$/;"	m	class:xdr::pollset_plus::wake_type
signal_handler	xdrpp/xdrpp/pollset.cc	/^pollset_plus::signal_handler(int sig)$/;"	f	class:xdr::pollset_plus
signal_owners	xdrpp/xdrpp/pollset.cc	/^pollset_plus *pollset_plus::signal_owners[num_sig];$/;"	m	class:xdr::pollset_plus	file:
signal_owners	xdrpp/xdrpp/pollset.h	/^  static pollset_plus *signal_owners[num_sig];$/;"	m	class:xdr::pollset_plus::wake_type
signal_owners_lock	xdrpp/xdrpp/pollset.cc	/^std::mutex pollset_plus::signal_owners_lock;$/;"	m	class:xdr::pollset_plus	file:
signal_owners_lock	xdrpp/xdrpp/pollset.h	/^  static std::mutex signal_owners_lock;$/;"	m	class:xdr::pollset_plus::wake_type
simpleClose	server/sqlite3.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	server/sqlite3.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	server/sqlite3.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	server/sqlite3.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	server/sqlite3.c	/^static int simpleNext($/;"	f	file:
simpleOpen	server/sqlite3.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	server/sqlite3.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	server/sqlite3.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	server/sqlite3.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	server/sqlite3.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	server/sqlite3.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
size	xdrpp/xdrpp/message.h	/^  std::size_t size() const { return size_; }$/;"	f	class:xdr::message_t
size	xdrpp/xdrpp/types.h	/^  static constexpr std::size_t size() { return N; }$/;"	f	struct:xdr::xarray
size	xdrpp/xdrpp/types.h	/^  uint32_t size() const { return *this ? 1 : 0; }$/;"	f	struct:xdr::pointer
size4x	server/sqlite3.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:
size_	xdrpp/xdrpp/message.h	/^  const std::size_t size_;$/;"	m	class:xdr::message_t
sjfd	server/sqlite3.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipFlag	server/sqlite3.c	/^  u8 skipFlag;          \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	server/sqlite3.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive *\/$/;"	m	struct:BtCursor	file:
sleep	server/sqlite3.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sleepObj	server/sqlite3.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
sliteral	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<string> sliteral;$/;"	m	union:rpc_sym::__anon31
snprintf	server/sqlite3.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
softHeapLimitEnforcer	server/sqlite3.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	server/sqlite3.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	server/sqlite3.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortFlags	server/sqlite3.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:
sortOrder	server/sqlite3.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sorted	server/sqlite3.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:
sortingIdx	server/sqlite3.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	server/sqlite3.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	server/sqlite3.c	/^static void soundexFunc($/;"	f	file:
sourceid	server/sqlite3.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	server/sqlite3.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	server/sqlite3.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	server/sqlite3.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	server/sqlite3.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	server/sqlite3.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	server/sqlite3.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeStartree	server/sqlite3.c	/^static int splitNodeStartree($/;"	f	file:
sprogram	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_program> sprogram;$/;"	m	union:rpc_sym::__anon31
sql	server/sqlite3.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sqldone_t	server/sqlstmt.h	/^  sqldone_t (const std::string &msg) : std::runtime_error (msg) {}$/;"	f	struct:sqldone_t
sqldone_t	server/sqlstmt.h	/^struct sqldone_t : public std::runtime_error {$/;"	s
sqlerr_t	server/sqlstmt.h	/^  sqlerr_t (const std::string &msg) : std::runtime_error (msg) {}$/;"	f	struct:sqlerr_t
sqlerr_t	server/sqlstmt.h	/^struct sqlerr_t : public std::runtime_error {$/;"	s
sqlexec	server/serverdb.cc	/^ServerDB::sqlexec(const char *fmt, ...)$/;"	f	class:ServerDB
sqlite3	server/sqlite3.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	server/sqlite3.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3	server/sqlite3.h	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3
sqlite3AbsInt32	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	server/sqlite3.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f
sqlite3AllocateIndexObject	server/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject($/;"	f
sqlite3AlterBeginAddColumn	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3AnalyzeFunctions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){$/;"	f
sqlite3ApiExit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	server/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	server/sqlite3.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendSpace	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AppendSpace(StrAccum *p, int N){$/;"	f
sqlite3ArrayAllocate	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	server/sqlite3.c	12902;"	d	file:
sqlite3AuthContextPop	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	server/sqlite3.c	12904;"	d	file:
sqlite3AuthContextPush	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	server/sqlite3.c	12903;"	d	file:
sqlite3AuthRead	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	server/sqlite3.c	12901;"	d	file:
sqlite3AuthReadCol	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	server/sqlite3.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	server/sqlite3.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	server/sqlite3.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	server/sqlite3.c	12724;"	d	file:
sqlite3AutoincrementEnd	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	server/sqlite3.c	12725;"	d	file:
sqlite3BackupRestart	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	server/sqlite3.c	13208;"	d	file:
sqlite3BeginParse	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	server/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	server/sqlite3.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlobCompare	server/sqlite3.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:
sqlite3BlockedList	server/sqlite3.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCheckpoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClearTableOfCursor	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClose	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeCopyFile	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasMoved	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorHints	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHints(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorIsValid	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorRestore	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f
sqlite3BtreeCursorSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	server/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreeDataSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	server/sqlite3.c	9152;"	d	file:
sqlite3BtreeEnterAll	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	server/sqlite3.c	9153;"	d	file:
sqlite3BtreeEnterCursor	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	server/sqlite3.c	9172;"	d	file:
sqlite3BtreeEof	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetFilename	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetPageSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserve	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){$/;"	f
sqlite3BtreeGetReserveNoMutex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	server/sqlite3.c	9177;"	d	file:
sqlite3BtreeHoldsMutex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	server/sqlite3.c	9176;"	d	file:
sqlite3BtreeIncrVacuum	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeIncrblobCursor	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeInsert	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeIsReadonly	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){$/;"	f
sqlite3BtreeKey	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	server/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreeKeySize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	server/sqlite3.c	9171;"	d	file:
sqlite3BtreeLeaveAll	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	server/sqlite3.c	9174;"	d	file:
sqlite3BtreeLeaveCursor	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	server/sqlite3.c	9173;"	d	file:
sqlite3BtreeLockTable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNewDb	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){$/;"	f
sqlite3BtreeNext	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	server/sqlite3.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode){$/;"	f
sqlite3BtreeSavepoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetMmapLimit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f
sqlite3BtreeSetPageSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetPagerFlags	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags($/;"	f
sqlite3BtreeSetVersion	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	server/sqlite3.c	9170;"	d	file:
sqlite3BtreeSyncDisabled	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){$/;"	f
sqlite3BtreeUpdateMeta	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	server/sqlite3.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3Close	server/sqlite3.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:
sqlite3CloseExtensions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	server/sqlite3.c	13092;"	d	file:
sqlite3CloseSavepoints	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeOnce	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *pParse){$/;"	f
sqlite3CodeRowTrigger	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	server/sqlite3.c	12884;"	d	file:
sqlite3CodeRowTriggerDirect	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	server/sqlite3.c	12885;"	d	file:
sqlite3CodeSubselect	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3ColumnOfIndex	server/sqlite3.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f
sqlite3CommitInternalChanges	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	server/sqlite3.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	server/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	server/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	server/sqlite3.c	13260;"	d	file:
sqlite3ConnectionClosed	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	server/sqlite3.c	13262;"	d	file:
sqlite3ConnectionUnlocked	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	server/sqlite3.c	13261;"	d	file:
sqlite3CorruptError	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	server/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	server/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	server/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMaskAllZero	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){$/;"	f
sqlite3DbNameToBtree	server/sqlite3.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbReallocOrFree	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbStrDup	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f
sqlite3DebugPrintf	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DecOrHexToI64	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f
sqlite3DefaultMutex	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	server/sqlite3.c	12881;"	d	file:
sqlite3DeleteTriggerStep	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	server/sqlite3.c	12882;"	d	file:
sqlite3EndBenignMalloc	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	server/sqlite3.c	13209;"	d	file:
sqlite3EndTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrName	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int rc){$/;"	f
sqlite3ErrStr	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){$/;"	f
sqlite3ErrorMsg	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ErrorWithMsg	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3ExplainBegin	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainBegin(Vdbe *pVdbe){$/;"	f
sqlite3ExplainBegin	server/sqlite3.c	12628;"	d	file:
sqlite3ExplainExpr	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainExpr(Vdbe *pOut, Expr *pExpr){$/;"	f
sqlite3ExplainExpr	server/sqlite3.c	12630;"	d	file:
sqlite3ExplainExprList	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainExprList(Vdbe *pOut, ExprList *pList){$/;"	f
sqlite3ExplainExprList	server/sqlite3.c	12631;"	d	file:
sqlite3ExplainFinish	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainFinish(Vdbe *pVdbe){$/;"	f
sqlite3ExplainFinish	server/sqlite3.c	12632;"	d	file:
sqlite3ExplainNL	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainNL(Vdbe *pVdbe){$/;"	f
sqlite3ExplainPop	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPop(Vdbe *p){$/;"	f
sqlite3ExplainPrintf	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPrintf(Vdbe *pVdbe, const char *zFormat, ...){$/;"	f
sqlite3ExplainPush	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainPush(Vdbe *pVdbe){$/;"	f
sqlite3ExplainSelect	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExplainSelect(Vdbe *pVdbe, Select *p){$/;"	f
sqlite3ExplainSelect	server/sqlite3.c	12629;"	d	file:
sqlite3Expr	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAddCollateString	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f
sqlite3ExprAddCollateToken	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken($/;"	f
sqlite3ExprAffinity	server/sqlite3.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	server/sqlite3.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){$/;"	f
sqlite3ExprCachePush	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	server/sqlite3.c	13249;"	d	file:
sqlite3ExprCode	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAtInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAtInit($/;"	f
sqlite3ExprCodeExprList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeFactorable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeGetColumn	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	server/sqlite3.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeMove	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	server/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprImpliesExpr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){$/;"	f
sqlite3ExprIsConstant	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f
sqlite3ExprIsInteger	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprListAppend	server/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f
sqlite3ExprListDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	server/sqlite3.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListSetName	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetHeight	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSetHeight	server/sqlite3.c	13247;"	d	file:
sqlite3ExprSkipCollate	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f
sqlite3FaultSim	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FaultSim(int iTest){$/;"	f
sqlite3FaultSim	server/sqlite3.c	12687;"	d	file:
sqlite3FileSuffix3	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	server/sqlite3.c	12986;"	d	file:
sqlite3FindCollSeq	server/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	server/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, u32 inFlags, int *prRhsHasNull){$/;"	f
sqlite3FindIndex	server/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	server/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FixInit($/;"	f
sqlite3FixSelect	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	server/sqlite3.c	13178;"	d	file:
sqlite3FkCheck	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	server/sqlite3.c	13179;"	d	file:
sqlite3FkDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	server/sqlite3.c	13188;"	d	file:
sqlite3FkDropTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	server/sqlite3.c	13180;"	d	file:
sqlite3FkLocateIndex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkLocateIndex($/;"	f
sqlite3FkLocateIndex	server/sqlite3.c	13189;"	d	file:
sqlite3FkOldmask	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	server/sqlite3.c	13181;"	d	file:
sqlite3FkReferences	server/sqlite3.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	server/sqlite3.c	13182;"	d	file:
sqlite3Fts3AllSegdirs	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3CacheDeferredDoclists	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3CacheDeferredDoclists	server/sqlite3.c	129730;"	d	file:
sqlite3Fts3Corrupt	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3CreateStatTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f
sqlite3Fts3DeferToken	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferToken	server/sqlite3.c	129729;"	d	file:
sqlite3Fts3DeferredTokenList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3DeferredTokenList	server/sqlite3.c	129732;"	d	file:
sqlite3Fts3Dequote	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistNext	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f
sqlite3Fts3DoclistPrev	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3EvalPhraseCleanup	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3ExprFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){$/;"	f
sqlite3Fts3ExprInitTestInterface	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredDoclists	server/sqlite3.c	129731;"	d	file:
sqlite3Fts3FreeDeferredTokens	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	server/sqlite3.c	129728;"	d	file:
sqlite3Fts3GetVarint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	server/sqlite3.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Incrmerge	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f
sqlite3Fts3Init	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTok	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){$/;"	f
sqlite3Fts3InitTokenizer	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MaxLevel	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f
sqlite3Fts3MsrIncrNext	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3NextToken	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3SegReaderCursor	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UnicodeTokenizer	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f
sqlite3Fts3UpdateMethod	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FtsUnicodeFold	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f
sqlite3FtsUnicodeIsalnum	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f
sqlite3FtsUnicodeIsdiacritic	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f
sqlite3FuncDefInsert	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3FunctionUsesThisSrc	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f
sqlite3GenerateConstraintChecks	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	server/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f
sqlite3GetCollSeq	server/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	server/sqlite3.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	server/sqlite3.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVTable	server/sqlite3.c	13115;"	d	file:
sqlite3GetVarint	server/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	server/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	server/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	server/sqlite3.c	8843;"	d	file:
sqlite3GlobalConfig	server/sqlite3.c	8849;"	d	file:
sqlite3GlobalFunctions	server/sqlite3.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint($/;"	f
sqlite3HashClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f
sqlite3HashInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f
sqlite3HeapNearlyFull	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	server/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	server/sqlite3.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	server/sqlite3.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	server/sqlite3.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	server/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	server/sqlite3.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3InRhsIsConstant	server/sqlite3.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:
sqlite3IndexAffinityOk	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	server/sqlite3.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	server/sqlite3.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	server/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	server/sqlite3.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	server/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IoTrace	server/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IsEbcdicIdChar	server/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	server/sqlite3.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsIdChar	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f
sqlite3IsLikeFunction	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	server/sqlite3.c	12588;"	d	file:
sqlite3IsNumericAffinity	server/sqlite3.c	10973;"	d	file:
sqlite3IsReadOnly	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	server/sqlite3.c	12502;"	d	file:
sqlite3Isalnum	server/sqlite3.c	12510;"	d	file:
sqlite3Isalpha	server/sqlite3.c	12503;"	d	file:
sqlite3Isalpha	server/sqlite3.c	12511;"	d	file:
sqlite3Isdigit	server/sqlite3.c	12504;"	d	file:
sqlite3Isdigit	server/sqlite3.c	12512;"	d	file:
sqlite3Isspace	server/sqlite3.c	12501;"	d	file:
sqlite3Isspace	server/sqlite3.c	12509;"	d	file:
sqlite3Isxdigit	server/sqlite3.c	12505;"	d	file:
sqlite3Isxdigit	server/sqlite3.c	12513;"	d	file:
sqlite3JoinType	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalExists	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalExists(sqlite3_file *p){$/;"	f
sqlite3JournalExists	server/sqlite3.c	13235;"	d	file:
sqlite3JournalModename	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	server/sqlite3.c	13234;"	d	file:
sqlite3KeyInfoAlloc	server/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f
sqlite3KeyInfoIsWriteable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f
sqlite3KeyInfoOfIndex	server/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f
sqlite3KeyInfoRef	server/sqlite3.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f
sqlite3KeyInfoUnref	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f
sqlite3KeywordCode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LeaveMutexAndCloseZombie	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f
sqlite3LimitWhere	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	server/sqlite3.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	server/sqlite3.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	server/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LocateTableItem	server/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem($/;"	f
sqlite3LockAndPrepare	server/sqlite3.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3LogEst	server/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){$/;"	f
sqlite3LogEstAdd	server/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f
sqlite3LogEstFromDouble	server/sqlite3.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){$/;"	f
sqlite3LogEstToInt	server/sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){$/;"	f
sqlite3MAppendf	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64 n){$/;"	f
sqlite3MallocAlarm	server/sqlite3.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){$/;"	f
sqlite3MatchSpanName	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName($/;"	f
sqlite3MaterializeView	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	server/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	server/sqlite3.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	server/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	server/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	server/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	server/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	server/sqlite3.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	server/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	server/sqlite3.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	server/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	server/sqlite3.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	server/sqlite3.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	server/sqlite3.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	server/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	server/sqlite3.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	server/sqlite3.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	server/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	server/sqlite3.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	server/sqlite3.c	13317;"	d	file:
sqlite3MemdebugMallocCount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	server/sqlite3.c	13318;"	d	file:
sqlite3MemdebugSetType	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	server/sqlite3.c	13316;"	d	file:
sqlite3MemdebugSettitle	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	server/sqlite3.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	server/sqlite3.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	server/sqlite3.c	10395;"	d	file:
sqlite3MutexEnd	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	server/sqlite3.c	10397;"	d	file:
sqlite3MutexInit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	server/sqlite3.c	10396;"	d	file:
sqlite3NameFromToken	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	server/sqlite3.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OpcodeName	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	server/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	server/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	server/sqlite3.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFetch	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f
sqlite3OsFileControl	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnfetch	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f
sqlite3OsUnlock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	server/sqlite3.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClearCache	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerGet	server/sqlite3.c	9807;"	d	file:
sqlite3PagerGetCodec	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	server/sqlite3.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	server/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	server/sqlite3.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	server/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRollback	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetFlags	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags($/;"	f
sqlite3PagerSetJournalMode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetMmapLimit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f
sqlite3PagerSetPagesize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSharedLock	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerState	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){$/;"	f
sqlite3PagerStats	server/sqlite3.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f
sqlite3PagerTempSpace	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerUnrefNotNull	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f
sqlite3PagerVfs	server/sqlite3.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){$/;"	f
sqlite3ParseToplevel	server/sqlite3.c	12878;"	d	file:
sqlite3ParseToplevel	server/sqlite3.c	12887;"	d	file:
sqlite3ParseUri	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	server/sqlite3.c	120355;"	d	file:
sqlite3ParserARG_PDECL	server/sqlite3.c	120354;"	d	file:
sqlite3ParserARG_SDECL	server/sqlite3.c	120353;"	d	file:
sqlite3ParserARG_STORE	server/sqlite3.c	120356;"	d	file:
sqlite3ParserAlloc	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(u64)){$/;"	f
sqlite3ParserFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserReset	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){$/;"	f
sqlite3ParserStackPeak	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	server/sqlite3.c	120330;"	d	file:
sqlite3ParserTrace	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3PcacheCleanAll	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	server/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f
sqlite3PcacheFetchFinish	server/sqlite3.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish($/;"	f
sqlite3PcacheFetchStress	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress($/;"	f
sqlite3PcacheGetCachesize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	server/sqlite3.c	/^SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShrink	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	server/sqlite3.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	server/sqlite3.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrimaryKeyIndex	server/sqlite3.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f
sqlite3Prng	server/sqlite3.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	server/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3ReadSchema	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f
sqlite3RefillIndex	server/sqlite3.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolvePartIdxLabel	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f
sqlite3ResolveSelectNames	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResolveSelfReference	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference($/;"	f
sqlite3ResultSetOfSelect	server/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	server/sqlite3.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RowidConstraint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint($/;"	f
sqlite3RtreeInit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	server/sqlite3.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	server/sqlite3.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	server/sqlite3.c	9178;"	d	file:
sqlite3SchemaToIndex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	server/sqlite3.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3SectorSize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f
sqlite3Select	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	server/sqlite3.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	server/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	server/sqlite3.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	server/sqlite3.c	13248;"	d	file:
sqlite3SelectNew	server/sqlite3.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SelectSetName	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f
sqlite3SelectSetName	server/sqlite3.c	12842;"	d	file:
sqlite3SelectTrace	server/sqlite3.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SetHasNullFlag	server/sqlite3.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:
sqlite3SetString	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	server/sqlite3.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	server/sqlite3.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	server/sqlite3.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SrcListAppend	server/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	server/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	server/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	server/sqlite3.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	server/sqlite3.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	server/sqlite3.c	12556;"	d	file:
sqlite3StackAllocRaw	server/sqlite3.c	12560;"	d	file:
sqlite3StackAllocZero	server/sqlite3.c	12557;"	d	file:
sqlite3StackAllocZero	server/sqlite3.c	12561;"	d	file:
sqlite3StackFree	server/sqlite3.c	12558;"	d	file:
sqlite3StackFree	server/sqlite3.c	12562;"	d	file:
sqlite3StartTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	server/sqlite3.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4Column($/;"	f
sqlite3Stat4ProbeFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f
sqlite3Stat4ProbeSetValue	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue($/;"	f
sqlite3Stat4ValueFromExpr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr($/;"	f
sqlite3StatType	server/sqlite3.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	server/sqlite3.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusAdd	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){$/;"	f
sqlite3StatusSet	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusValue	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3StatusValue(int op){$/;"	f
sqlite3Step	server/sqlite3.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StmtCurrentTime	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f
sqlite3StrAccumAppend	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumAppendAll	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f
sqlite3StrAccumEnlarge	server/sqlite3.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:
sqlite3StrAccumFinish	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	server/sqlite3.c	12521;"	d	file:
sqlite3StrNICmp	server/sqlite3.c	12523;"	d	file:
sqlite3Strlen30	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3TableAffinity	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f
sqlite3TableLock	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	server/sqlite3.c	13098;"	d	file:
sqlite3TempInMemory	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3ThreadCreate	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate($/;"	f
sqlite3ThreadJoin	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f
sqlite3ThreadProc	server/sqlite3.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:
sqlite3Tolower	server/sqlite3.c	12506;"	d	file:
sqlite3Tolower	server/sqlite3.c	12514;"	d	file:
sqlite3Toupper	server/sqlite3.c	12500;"	d	file:
sqlite3Toupper	server/sqlite3.c	12508;"	d	file:
sqlite3TransferBindings	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TriggerColmask	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	server/sqlite3.c	12888;"	d	file:
sqlite3TriggerDeleteStep	server/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	server/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	server/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	server/sqlite3.c	12886;"	d	file:
sqlite3TriggerSelectStep	server/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	server/sqlite3.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	server/sqlite3.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	server/sqlite3.c	12880;"	d	file:
sqlite3TwoPartName	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UniqueConstraint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint($/;"	f
sqlite3UnlinkAndDeleteIndex	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	server/sqlite3.c	12883;"	d	file:
sqlite3Update	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	server/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	server/sqlite3.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3UserAuthTable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){$/;"	f
sqlite3Utf16ByteLen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	server/sqlite3.c	94673;"	d	file:
sqlite3Utf8To8	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	server/sqlite3.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetNull	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f
sqlite3ValueSetStr	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	server/sqlite3.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp, int iLineno){$/;"	f
sqlite3VdbeAddParseSchemaOp	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAllocUnpackedRecord	server/sqlite3.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAssertMayAbort	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	server/sqlite3.c	14483;"	d	file:
sqlite3VdbeCheckMemInvariants	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f
sqlite3VdbeClearObject	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeCloseStatement	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	server/sqlite3.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f
sqlite3VdbeCurrentAddr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(Vdbe *pVdbe, int iOp, int mask){$/;"	f
sqlite3VdbeDeletePriorOpcode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f
sqlite3VdbeEnter	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	server/sqlite3.c	14471;"	d	file:
sqlite3VdbeExec	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	server/sqlite3.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeExplanation	server/sqlite3.c	/^SQLITE_PRIVATE const char *sqlite3VdbeExplanation(Vdbe *pVdbe){$/;"	f
sqlite3VdbeExplanation	server/sqlite3.c	12633;"	d	file:
sqlite3VdbeFinalize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFindCompare	server/sqlite3.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f
sqlite3VdbeFrameDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetBoundValue	server/sqlite3.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeGetOp	server/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeHalt	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	server/sqlite3.c	13280;"	d	file:
sqlite3VdbeIdxKeyCompare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	server/sqlite3.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	server/sqlite3.c	14472;"	d	file:
sqlite3VdbeLinkSubProgram	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f
sqlite3VdbeMakeReady	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCast	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f
sqlite3VdbeMemClearAndResize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f
sqlite3VdbeMemCopy	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	server/sqlite3.c	14497;"	d	file:
sqlite3VdbeMemFinalize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	server/sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f
sqlite3VdbeMemHandleBom	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f
sqlite3VdbeMemIntegerify	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	server/sqlite3.c	14428;"	d	file:
sqlite3VdbeMemSetInt64	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStringify	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f
sqlite3VdbeMemTooBig	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	server/sqlite3.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeNoopComment	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	server/sqlite3.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordUnpack	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f
sqlite3VdbeRewind	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeSerialGet	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f
sqlite3VdbeSerialType	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	server/sqlite3.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetLineNumber	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f
sqlite3VdbeSetNumCols	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetP4KeyInfo	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3VdbeSetSql	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterCompare	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterInit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit($/;"	f
sqlite3VdbeSorterNext	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterReset	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f
sqlite3VdbeSorterRewind	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRowkey	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterWrite	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSwap	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	server/sqlite3.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTransferError	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	server/sqlite3.c	12711;"	d	file:
sqlite3VtabArgExtend	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	server/sqlite3.c	13106;"	d	file:
sqlite3VtabCommit	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	server/sqlite3.c	13109;"	d	file:
sqlite3VtabDisconnect	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabFinishParse	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabImportErrmsg	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f
sqlite3VtabInSync	server/sqlite3.c	13110;"	d	file:
sqlite3VtabInSync	server/sqlite3.c	13128;"	d	file:
sqlite3VtabLock	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	server/sqlite3.c	13111;"	d	file:
sqlite3VtabMakeWritable	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	server/sqlite3.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	server/sqlite3.c	13108;"	d	file:
sqlite3VtabSavepoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	server/sqlite3.c	13114;"	d	file:
sqlite3VtabSync	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VtabSync	server/sqlite3.c	13107;"	d	file:
sqlite3VtabUnlock	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	server/sqlite3.c	13112;"	d	file:
sqlite3VtabUnlockList	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	server/sqlite3.c	13113;"	d	file:
sqlite3WalBeginReadTransaction	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	server/sqlite3.c	40703;"	d	file:
sqlite3WalBeginWriteTransaction	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	server/sqlite3.c	40706;"	d	file:
sqlite3WalCallback	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	server/sqlite3.c	40713;"	d	file:
sqlite3WalCheckpoint	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	server/sqlite3.c	40712;"	d	file:
sqlite3WalClose	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	server/sqlite3.c	40702;"	d	file:
sqlite3WalDbsize	server/sqlite3.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	server/sqlite3.c	40705;"	d	file:
sqlite3WalDefaultHook	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	server/sqlite3.c	40704;"	d	file:
sqlite3WalEndWriteTransaction	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	server/sqlite3.c	40707;"	d	file:
sqlite3WalExclusiveMode	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	server/sqlite3.c	40714;"	d	file:
sqlite3WalFindFrame	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame($/;"	f
sqlite3WalFindFrame	server/sqlite3.c	40717;"	d	file:
sqlite3WalFrames	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	server/sqlite3.c	40711;"	d	file:
sqlite3WalFramesize	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	server/sqlite3.c	40716;"	d	file:
sqlite3WalHeapMemory	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	server/sqlite3.c	40715;"	d	file:
sqlite3WalLimit	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	server/sqlite3.c	40701;"	d	file:
sqlite3WalOpen	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	server/sqlite3.c	40700;"	d	file:
sqlite3WalReadFrame	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame($/;"	f
sqlite3WalSavepoint	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	server/sqlite3.c	40709;"	d	file:
sqlite3WalSavepointUndo	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	server/sqlite3.c	40710;"	d	file:
sqlite3WalTrace	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	server/sqlite3.c	40708;"	d	file:
sqlite3WalkExpr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	server/sqlite3.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereBreakLabel	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereContinueLabel	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereEnd	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsDistinct	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsOrdered	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsSorted	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOkOnePass	server/sqlite3.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f
sqlite3WhereOutputRowCount	server/sqlite3.c	/^SQLITE_PRIVATE u64 sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	server/sqlite3.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3Win32Wait	server/sqlite3.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f
sqlite3WithAdd	server/sqlite3.c	/^SQLITE_PRIVATE With *sqlite3WithAdd($/;"	f
sqlite3WithDelete	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f
sqlite3WithDelete	server/sqlite3.c	13160;"	d	file:
sqlite3WithPush	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f
sqlite3WithPush	server/sqlite3.c	13159;"	d	file:
sqlite3XPrintf	server/sqlite3.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, u32 bFlags, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	server/sqlite3.c	/^SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	server/sqlite3.c	99726;"	d	file:
sqlite3_aggregate_count	server/sqlite3.c	/^SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	server/sqlite3.c	99728;"	d	file:
sqlite3_api_routines	server/sqlite3.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	server/sqlite3.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	server/sqlite3.c	/^SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_auto_extension	server/sqlite3.c	99930;"	d	file:
sqlite3_backup	server/sqlite3.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	server/sqlite3.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup	server/sqlite3.h	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup
sqlite3_backup_finish	server/sqlite3.c	/^SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	server/sqlite3.c	99891;"	d	file:
sqlite3_backup_init	server/sqlite3.c	/^SQLITE_API sqlite3_backup *sqlite3_backup_init($/;"	f
sqlite3_backup_init	server/sqlite3.c	99892;"	d	file:
sqlite3_backup_pagecount	server/sqlite3.c	/^SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	server/sqlite3.c	99893;"	d	file:
sqlite3_backup_remaining	server/sqlite3.c	/^SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	server/sqlite3.c	99894;"	d	file:
sqlite3_backup_step	server/sqlite3.c	/^SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	server/sqlite3.c	99895;"	d	file:
sqlite3_bind_blob	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	server/sqlite3.c	99730;"	d	file:
sqlite3_bind_blob64	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_blob64($/;"	f
sqlite3_bind_blob64	server/sqlite3.c	99931;"	d	file:
sqlite3_bind_double	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	server/sqlite3.c	99731;"	d	file:
sqlite3_bind_int	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	server/sqlite3.c	99732;"	d	file:
sqlite3_bind_int64	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	server/sqlite3.c	99733;"	d	file:
sqlite3_bind_null	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	server/sqlite3.c	99734;"	d	file:
sqlite3_bind_parameter_count	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	server/sqlite3.c	99735;"	d	file:
sqlite3_bind_parameter_index	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	server/sqlite3.c	99736;"	d	file:
sqlite3_bind_parameter_name	server/sqlite3.c	/^SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	server/sqlite3.c	99737;"	d	file:
sqlite3_bind_text	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_text( $/;"	f
sqlite3_bind_text	server/sqlite3.c	99738;"	d	file:
sqlite3_bind_text16	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	server/sqlite3.c	99739;"	d	file:
sqlite3_bind_text16	server/sqlite3.c	99987;"	d	file:
sqlite3_bind_text64	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_text64( $/;"	f
sqlite3_bind_text64	server/sqlite3.c	99932;"	d	file:
sqlite3_bind_value	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	server/sqlite3.c	99740;"	d	file:
sqlite3_bind_zeroblob	server/sqlite3.c	/^SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	server/sqlite3.c	100048;"	d	file:
sqlite3_bind_zeroblob	server/sqlite3.c	99856;"	d	file:
sqlite3_blob	server/sqlite3.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob	server/sqlite3.h	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob
sqlite3_blob_bytes	server/sqlite3.c	/^SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	server/sqlite3.c	100049;"	d	file:
sqlite3_blob_bytes	server/sqlite3.c	99857;"	d	file:
sqlite3_blob_close	server/sqlite3.c	/^SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	server/sqlite3.c	100050;"	d	file:
sqlite3_blob_close	server/sqlite3.c	99858;"	d	file:
sqlite3_blob_open	server/sqlite3.c	/^SQLITE_API int sqlite3_blob_open($/;"	f
sqlite3_blob_open	server/sqlite3.c	100051;"	d	file:
sqlite3_blob_open	server/sqlite3.c	99859;"	d	file:
sqlite3_blob_read	server/sqlite3.c	/^SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	server/sqlite3.c	100052;"	d	file:
sqlite3_blob_read	server/sqlite3.c	99860;"	d	file:
sqlite3_blob_reopen	server/sqlite3.c	/^SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_reopen	server/sqlite3.c	100054;"	d	file:
sqlite3_blob_reopen	server/sqlite3.c	99912;"	d	file:
sqlite3_blob_write	server/sqlite3.c	/^SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	server/sqlite3.c	100053;"	d	file:
sqlite3_blob_write	server/sqlite3.c	99861;"	d	file:
sqlite3_busy_handler	server/sqlite3.c	/^SQLITE_API int sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	server/sqlite3.c	99741;"	d	file:
sqlite3_busy_timeout	server/sqlite3.c	/^SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	server/sqlite3.c	99742;"	d	file:
sqlite3_callback	server/sqlite3.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_callback	server/sqlite3.h	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t
sqlite3_cancel_auto_extension	server/sqlite3.c	/^SQLITE_API int sqlite3_cancel_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_cancel_auto_extension	server/sqlite3.c	99933;"	d	file:
sqlite3_changes	server/sqlite3.c	/^SQLITE_API int sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	server/sqlite3.c	99743;"	d	file:
sqlite3_clear_bindings	server/sqlite3.c	/^SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	server/sqlite3.c	99855;"	d	file:
sqlite3_close	server/sqlite3.c	/^SQLITE_API int sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f
sqlite3_close	server/sqlite3.c	99744;"	d	file:
sqlite3_close_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f
sqlite3_close_v2	server/sqlite3.c	99916;"	d	file:
sqlite3_collation_needed	server/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	server/sqlite3.c	99745;"	d	file:
sqlite3_collation_needed16	server/sqlite3.c	/^SQLITE_API int sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	server/sqlite3.c	99746;"	d	file:
sqlite3_collation_needed16	server/sqlite3.c	99988;"	d	file:
sqlite3_column_blob	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	server/sqlite3.c	99747;"	d	file:
sqlite3_column_bytes	server/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	server/sqlite3.c	99748;"	d	file:
sqlite3_column_bytes16	server/sqlite3.c	/^SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	server/sqlite3.c	99749;"	d	file:
sqlite3_column_count	server/sqlite3.c	/^SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	server/sqlite3.c	99750;"	d	file:
sqlite3_column_database_name	server/sqlite3.c	/^SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	server/sqlite3.c	99751;"	d	file:
sqlite3_column_database_name	server/sqlite3.c	99973;"	d	file:
sqlite3_column_database_name16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	server/sqlite3.c	100006;"	d	file:
sqlite3_column_database_name16	server/sqlite3.c	99752;"	d	file:
sqlite3_column_database_name16	server/sqlite3.c	99974;"	d	file:
sqlite3_column_decltype	server/sqlite3.c	/^SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	server/sqlite3.c	100018;"	d	file:
sqlite3_column_decltype	server/sqlite3.c	99753;"	d	file:
sqlite3_column_decltype16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	server/sqlite3.c	100017;"	d	file:
sqlite3_column_decltype16	server/sqlite3.c	99754;"	d	file:
sqlite3_column_decltype16	server/sqlite3.c	99989;"	d	file:
sqlite3_column_double	server/sqlite3.c	/^SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	server/sqlite3.c	99755;"	d	file:
sqlite3_column_int	server/sqlite3.c	/^SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	server/sqlite3.c	99756;"	d	file:
sqlite3_column_int64	server/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	server/sqlite3.c	99757;"	d	file:
sqlite3_column_name	server/sqlite3.c	/^SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	server/sqlite3.c	99758;"	d	file:
sqlite3_column_name16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	server/sqlite3.c	99759;"	d	file:
sqlite3_column_name16	server/sqlite3.c	99990;"	d	file:
sqlite3_column_origin_name	server/sqlite3.c	/^SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	server/sqlite3.c	99760;"	d	file:
sqlite3_column_origin_name	server/sqlite3.c	99977;"	d	file:
sqlite3_column_origin_name16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	server/sqlite3.c	100008;"	d	file:
sqlite3_column_origin_name16	server/sqlite3.c	99761;"	d	file:
sqlite3_column_origin_name16	server/sqlite3.c	99978;"	d	file:
sqlite3_column_table_name	server/sqlite3.c	/^SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	server/sqlite3.c	99762;"	d	file:
sqlite3_column_table_name	server/sqlite3.c	99975;"	d	file:
sqlite3_column_table_name16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	server/sqlite3.c	100007;"	d	file:
sqlite3_column_table_name16	server/sqlite3.c	99763;"	d	file:
sqlite3_column_table_name16	server/sqlite3.c	99976;"	d	file:
sqlite3_column_text	server/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	server/sqlite3.c	99764;"	d	file:
sqlite3_column_text16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	server/sqlite3.c	99765;"	d	file:
sqlite3_column_text16	server/sqlite3.c	99991;"	d	file:
sqlite3_column_type	server/sqlite3.c	/^SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	server/sqlite3.c	99766;"	d	file:
sqlite3_column_value	server/sqlite3.c	/^SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	server/sqlite3.c	99767;"	d	file:
sqlite3_commit_hook	server/sqlite3.c	/^SQLITE_API void *sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	server/sqlite3.c	99768;"	d	file:
sqlite3_compileoption_get	server/sqlite3.c	/^SQLITE_API const char *sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	server/sqlite3.c	99896;"	d	file:
sqlite3_compileoption_used	server/sqlite3.c	/^SQLITE_API int sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	server/sqlite3.c	99897;"	d	file:
sqlite3_complete	server/sqlite3.c	/^SQLITE_API int sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	server/sqlite3.c	100012;"	d	file:
sqlite3_complete	server/sqlite3.c	99769;"	d	file:
sqlite3_complete16	server/sqlite3.c	/^SQLITE_API int sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	server/sqlite3.c	100013;"	d	file:
sqlite3_complete16	server/sqlite3.c	99770;"	d	file:
sqlite3_complete16	server/sqlite3.c	99992;"	d	file:
sqlite3_config	server/sqlite3.c	/^SQLITE_API int sqlite3_config(int op, ...){$/;"	f
sqlite3_context	server/sqlite3.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	server/sqlite3.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context	server/sqlite3.h	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context
sqlite3_context_db_handle	server/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	server/sqlite3.c	99885;"	d	file:
sqlite3_create_collation	server/sqlite3.c	/^SQLITE_API int sqlite3_create_collation($/;"	f
sqlite3_create_collation	server/sqlite3.c	99771;"	d	file:
sqlite3_create_collation16	server/sqlite3.c	/^SQLITE_API int sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	server/sqlite3.c	99772;"	d	file:
sqlite3_create_collation16	server/sqlite3.c	99993;"	d	file:
sqlite3_create_collation_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	server/sqlite3.c	99862;"	d	file:
sqlite3_create_function	server/sqlite3.c	/^SQLITE_API int sqlite3_create_function($/;"	f
sqlite3_create_function	server/sqlite3.c	99773;"	d	file:
sqlite3_create_function16	server/sqlite3.c	/^SQLITE_API int sqlite3_create_function16($/;"	f
sqlite3_create_function16	server/sqlite3.c	99774;"	d	file:
sqlite3_create_function16	server/sqlite3.c	99994;"	d	file:
sqlite3_create_function_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	server/sqlite3.c	99898;"	d	file:
sqlite3_create_module	server/sqlite3.c	/^SQLITE_API int sqlite3_create_module($/;"	f
sqlite3_create_module	server/sqlite3.c	100026;"	d	file:
sqlite3_create_module	server/sqlite3.c	99775;"	d	file:
sqlite3_create_module_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	server/sqlite3.c	100027;"	d	file:
sqlite3_create_module_v2	server/sqlite3.c	99776;"	d	file:
sqlite3_current_time	server/sqlite3.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	server/sqlite3.c	/^SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	server/sqlite3.c	99777;"	d	file:
sqlite3_data_directory	server/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	server/sqlite3.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_data_directory	server/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;$/;"	v
sqlite3_db_config	server/sqlite3.c	/^SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	server/sqlite3.c	99899;"	d	file:
sqlite3_db_filename	server/sqlite3.c	/^SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_filename	server/sqlite3.c	99917;"	d	file:
sqlite3_db_handle	server/sqlite3.c	/^SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	server/sqlite3.c	99778;"	d	file:
sqlite3_db_mutex	server/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	server/sqlite3.c	99900;"	d	file:
sqlite3_db_readonly	server/sqlite3.c	/^SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_readonly	server/sqlite3.c	99918;"	d	file:
sqlite3_db_release_memory	server/sqlite3.c	/^SQLITE_API int sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_release_memory	server/sqlite3.c	99919;"	d	file:
sqlite3_db_status	server/sqlite3.c	/^SQLITE_API int sqlite3_db_status($/;"	f
sqlite3_db_status	server/sqlite3.c	99901;"	d	file:
sqlite3_debug_mutex	server/sqlite3.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	server/sqlite3.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	server/sqlite3.c	/^SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	server/sqlite3.c	100028;"	d	file:
sqlite3_declare_vtab	server/sqlite3.c	99779;"	d	file:
sqlite3_destructor_type	server/sqlite3.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_destructor_type	server/sqlite3.h	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t
sqlite3_diskfull	server/sqlite3.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	server/sqlite3.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	server/sqlite3.c	/^SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	server/sqlite3.c	/^SQLITE_API int sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	server/sqlite3.c	100034;"	d	file:
sqlite3_enable_shared_cache	server/sqlite3.c	99780;"	d	file:
sqlite3_errcode	server/sqlite3.c	/^SQLITE_API int sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	server/sqlite3.c	99781;"	d	file:
sqlite3_errmsg	server/sqlite3.c	/^SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	server/sqlite3.c	99782;"	d	file:
sqlite3_errmsg16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	server/sqlite3.c	99783;"	d	file:
sqlite3_errmsg16	server/sqlite3.c	99995;"	d	file:
sqlite3_errstr	server/sqlite3.c	/^SQLITE_API const char *sqlite3_errstr(int rc){$/;"	f
sqlite3_errstr	server/sqlite3.c	99920;"	d	file:
sqlite3_exec	server/sqlite3.c	/^SQLITE_API int sqlite3_exec($/;"	f
sqlite3_exec	server/sqlite3.c	99784;"	d	file:
sqlite3_expired	server/sqlite3.c	/^SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	server/sqlite3.c	99786;"	d	file:
sqlite3_extended_errcode	server/sqlite3.c	/^SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	server/sqlite3.c	99902;"	d	file:
sqlite3_extended_result_codes	server/sqlite3.c	/^SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	server/sqlite3.c	99886;"	d	file:
sqlite3_file	server/sqlite3.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	server/sqlite3.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file	server/sqlite3.h	/^struct sqlite3_file {$/;"	s
sqlite3_file	server/sqlite3.h	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file
sqlite3_file_control	server/sqlite3.c	/^SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	server/sqlite3.c	99863;"	d	file:
sqlite3_finalize	server/sqlite3.c	/^SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	server/sqlite3.c	99788;"	d	file:
sqlite3_found_count	server/sqlite3.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	server/sqlite3.c	/^SQLITE_API void sqlite3_free(void *p){$/;"	f
sqlite3_free	server/sqlite3.c	99789;"	d	file:
sqlite3_free_table	server/sqlite3.c	/^SQLITE_API void sqlite3_free_table($/;"	f
sqlite3_free_table	server/sqlite3.c	100043;"	d	file:
sqlite3_free_table	server/sqlite3.c	99790;"	d	file:
sqlite3_fts3_enable_parentheses	server/sqlite3.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	server/sqlite3.c	135991;"	d	file:
sqlite3_fts3_enable_parentheses	server/sqlite3.c	135993;"	d	file:
sqlite3_fullsync_count	server/sqlite3.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	server/sqlite3.c	/^SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	server/sqlite3.c	99791;"	d	file:
sqlite3_get_auxdata	server/sqlite3.c	/^SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	server/sqlite3.c	99792;"	d	file:
sqlite3_get_table	server/sqlite3.c	/^SQLITE_API int sqlite3_get_table($/;"	f
sqlite3_get_table	server/sqlite3.c	100044;"	d	file:
sqlite3_get_table	server/sqlite3.c	99793;"	d	file:
sqlite3_get_table_cb	server/sqlite3.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	server/sqlite3.c	/^SQLITE_API int sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	server/sqlite3.c	99795;"	d	file:
sqlite3_hostid_num	server/sqlite3.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	server/sqlite3.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint	server/sqlite3.h	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info
sqlite3_index_constraint_usage	server/sqlite3.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	server/sqlite3.h	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info
sqlite3_index_info	server/sqlite3.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	server/sqlite3.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_info	server/sqlite3.h	/^struct sqlite3_index_info {$/;"	s
sqlite3_index_info	server/sqlite3.h	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info
sqlite3_index_orderby	server/sqlite3.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_orderby	server/sqlite3.h	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info
sqlite3_initialize	server/sqlite3.c	/^SQLITE_API int sqlite3_initialize(void){$/;"	f
sqlite3_int64	server/sqlite3.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_int64	server/sqlite3.h	/^typedef sqlite_int64 sqlite3_int64;$/;"	t
sqlite3_interrupt	server/sqlite3.c	/^SQLITE_API void sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	server/sqlite3.c	99797;"	d	file:
sqlite3_interrupt_count	server/sqlite3.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	server/sqlite3.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	server/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	server/sqlite3.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	server/sqlite3.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	server/sqlite3.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	server/sqlite3.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	server/sqlite3.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_io_methods	server/sqlite3.h	/^struct sqlite3_io_methods {$/;"	s
sqlite3_io_methods	server/sqlite3.h	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods
sqlite3_last_insert_rowid	server/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	server/sqlite3.c	99798;"	d	file:
sqlite3_libversion	server/sqlite3.c	/^SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	server/sqlite3.c	99799;"	d	file:
sqlite3_libversion_number	server/sqlite3.c	/^SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	server/sqlite3.c	99800;"	d	file:
sqlite3_like_count	server/sqlite3.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	server/sqlite3.c	/^SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	server/sqlite3.c	99887;"	d	file:
sqlite3_load_extension	server/sqlite3.c	/^SQLITE_API int sqlite3_load_extension($/;"	f
sqlite3_load_extension	server/sqlite3.c	99934;"	d	file:
sqlite3_log	server/sqlite3.c	/^SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	server/sqlite3.c	99903;"	d	file:
sqlite3_malloc	server/sqlite3.c	/^SQLITE_API void *sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	server/sqlite3.c	99801;"	d	file:
sqlite3_malloc64	server/sqlite3.c	/^SQLITE_API void *sqlite3_malloc64(sqlite3_uint64 n){$/;"	f
sqlite3_malloc64	server/sqlite3.c	99935;"	d	file:
sqlite3_max_blobsize	server/sqlite3.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	server/sqlite3.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	server/sqlite3.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_mem_methods	server/sqlite3.h	/^struct sqlite3_mem_methods {$/;"	s
sqlite3_mem_methods	server/sqlite3.h	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods
sqlite3_memdebug_vfs_oom_test	server/sqlite3.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	server/sqlite3.c	/^SQLITE_API int sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	server/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	server/sqlite3.c	99864;"	d	file:
sqlite3_memory_used	server/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	server/sqlite3.c	99865;"	d	file:
sqlite3_module	server/sqlite3.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	server/sqlite3.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_module	server/sqlite3.h	/^struct sqlite3_module {$/;"	s
sqlite3_module	server/sqlite3.h	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module
sqlite3_mprintf	server/sqlite3.c	/^SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	server/sqlite3.c	99802;"	d	file:
sqlite3_msize	server/sqlite3.c	/^SQLITE_API sqlite3_uint64 sqlite3_msize(void *p){$/;"	f
sqlite3_msize	server/sqlite3.c	99936;"	d	file:
sqlite3_mutex	server/sqlite3.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	server/sqlite3.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex	server/sqlite3.h	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex
sqlite3_mutex_alloc	server/sqlite3.c	/^SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	server/sqlite3.c	10388;"	d	file:
sqlite3_mutex_alloc	server/sqlite3.c	99866;"	d	file:
sqlite3_mutex_enter	server/sqlite3.c	/^SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	server/sqlite3.c	10390;"	d	file:
sqlite3_mutex_enter	server/sqlite3.c	99867;"	d	file:
sqlite3_mutex_free	server/sqlite3.c	/^SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	server/sqlite3.c	10389;"	d	file:
sqlite3_mutex_free	server/sqlite3.c	99868;"	d	file:
sqlite3_mutex_held	server/sqlite3.c	/^SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	server/sqlite3.c	10393;"	d	file:
sqlite3_mutex_leave	server/sqlite3.c	/^SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	server/sqlite3.c	10392;"	d	file:
sqlite3_mutex_leave	server/sqlite3.c	99869;"	d	file:
sqlite3_mutex_methods	server/sqlite3.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	server/sqlite3.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_methods	server/sqlite3.h	/^struct sqlite3_mutex_methods {$/;"	s
sqlite3_mutex_methods	server/sqlite3.h	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods
sqlite3_mutex_notheld	server/sqlite3.c	/^SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	server/sqlite3.c	10394;"	d	file:
sqlite3_mutex_try	server/sqlite3.c	/^SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	server/sqlite3.c	10391;"	d	file:
sqlite3_mutex_try	server/sqlite3.c	99870;"	d	file:
sqlite3_next_stmt	server/sqlite3.c	/^SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	server/sqlite3.c	99888;"	d	file:
sqlite3_open	server/sqlite3.c	/^SQLITE_API int sqlite3_open($/;"	f
sqlite3_open	server/sqlite3.c	99803;"	d	file:
sqlite3_open16	server/sqlite3.c	/^SQLITE_API int sqlite3_open16($/;"	f
sqlite3_open16	server/sqlite3.c	99804;"	d	file:
sqlite3_open16	server/sqlite3.c	99996;"	d	file:
sqlite3_open_file_count	server/sqlite3.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_open_v2($/;"	f
sqlite3_open_v2	server/sqlite3.c	99871;"	d	file:
sqlite3_opentemp_count	server/sqlite3.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	server/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	server/sqlite3.c	/^SQLITE_API int sqlite3_os_end(void){$/;"	f
sqlite3_os_init	server/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	server/sqlite3.c	/^SQLITE_API int sqlite3_os_init(void){$/;"	f
sqlite3_os_type	server/sqlite3.c	/^SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	server/sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	server/sqlite3.c	/^SQLITE_API int sqlite3_overload_function($/;"	f
sqlite3_overload_function	server/sqlite3.c	99852;"	d	file:
sqlite3_pager_readdb_count	server/sqlite3.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	server/sqlite3.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	server/sqlite3.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	server/sqlite3.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache	server/sqlite3.h	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache
sqlite3_pcache_methods	server/sqlite3.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	server/sqlite3.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods	server/sqlite3.h	/^struct sqlite3_pcache_methods {$/;"	s
sqlite3_pcache_methods	server/sqlite3.h	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods
sqlite3_pcache_methods2	server/sqlite3.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	server/sqlite3.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_methods2	server/sqlite3.h	/^struct sqlite3_pcache_methods2 {$/;"	s
sqlite3_pcache_methods2	server/sqlite3.h	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2
sqlite3_pcache_page	server/sqlite3.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	server/sqlite3.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_pcache_page	server/sqlite3.h	/^struct sqlite3_pcache_page {$/;"	s
sqlite3_pcache_page	server/sqlite3.h	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page
sqlite3_prepare	server/sqlite3.c	/^SQLITE_API int sqlite3_prepare($/;"	f
sqlite3_prepare	server/sqlite3.c	99805;"	d	file:
sqlite3_prepare16	server/sqlite3.c	/^SQLITE_API int sqlite3_prepare16($/;"	f
sqlite3_prepare16	server/sqlite3.c	99806;"	d	file:
sqlite3_prepare16	server/sqlite3.c	99997;"	d	file:
sqlite3_prepare16_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	server/sqlite3.c	99808;"	d	file:
sqlite3_prepare16_v2	server/sqlite3.c	99854;"	d	file:
sqlite3_prepare16_v2	server/sqlite3.c	99998;"	d	file:
sqlite3_prepare_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	server/sqlite3.c	99807;"	d	file:
sqlite3_prepare_v2	server/sqlite3.c	99853;"	d	file:
sqlite3_profile	server/sqlite3.c	/^SQLITE_API void *sqlite3_profile($/;"	f
sqlite3_profile	server/sqlite3.c	100038;"	d	file:
sqlite3_profile	server/sqlite3.c	99809;"	d	file:
sqlite3_progress_handler	server/sqlite3.c	/^SQLITE_API void sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	server/sqlite3.c	100022;"	d	file:
sqlite3_progress_handler	server/sqlite3.c	99810;"	d	file:
sqlite3_randomness	server/sqlite3.c	/^SQLITE_API void sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	server/sqlite3.c	99884;"	d	file:
sqlite3_realloc	server/sqlite3.c	/^SQLITE_API void *sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	server/sqlite3.c	99811;"	d	file:
sqlite3_realloc64	server/sqlite3.c	/^SQLITE_API void *sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f
sqlite3_realloc64	server/sqlite3.c	99937;"	d	file:
sqlite3_release_memory	server/sqlite3.c	/^SQLITE_API int sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	server/sqlite3.c	99872;"	d	file:
sqlite3_reset	server/sqlite3.c	/^SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	server/sqlite3.c	99812;"	d	file:
sqlite3_reset_auto_extension	server/sqlite3.c	/^SQLITE_API void sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_reset_auto_extension	server/sqlite3.c	99938;"	d	file:
sqlite3_result_blob	server/sqlite3.c	/^SQLITE_API void sqlite3_result_blob($/;"	f
sqlite3_result_blob	server/sqlite3.c	99813;"	d	file:
sqlite3_result_blob64	server/sqlite3.c	/^SQLITE_API void sqlite3_result_blob64($/;"	f
sqlite3_result_blob64	server/sqlite3.c	99939;"	d	file:
sqlite3_result_double	server/sqlite3.c	/^SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	server/sqlite3.c	99814;"	d	file:
sqlite3_result_error	server/sqlite3.c	/^SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	server/sqlite3.c	99815;"	d	file:
sqlite3_result_error16	server/sqlite3.c	/^SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	server/sqlite3.c	99816;"	d	file:
sqlite3_result_error16	server/sqlite3.c	99999;"	d	file:
sqlite3_result_error_code	server/sqlite3.c	/^SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	server/sqlite3.c	99882;"	d	file:
sqlite3_result_error_nomem	server/sqlite3.c	/^SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	server/sqlite3.c	99873;"	d	file:
sqlite3_result_error_toobig	server/sqlite3.c	/^SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	server/sqlite3.c	99874;"	d	file:
sqlite3_result_int	server/sqlite3.c	/^SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	server/sqlite3.c	99817;"	d	file:
sqlite3_result_int64	server/sqlite3.c	/^SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	server/sqlite3.c	99818;"	d	file:
sqlite3_result_null	server/sqlite3.c	/^SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	server/sqlite3.c	99819;"	d	file:
sqlite3_result_text	server/sqlite3.c	/^SQLITE_API void sqlite3_result_text($/;"	f
sqlite3_result_text	server/sqlite3.c	99820;"	d	file:
sqlite3_result_text16	server/sqlite3.c	/^SQLITE_API void sqlite3_result_text16($/;"	f
sqlite3_result_text16	server/sqlite3.c	100000;"	d	file:
sqlite3_result_text16	server/sqlite3.c	99821;"	d	file:
sqlite3_result_text16be	server/sqlite3.c	/^SQLITE_API void sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	server/sqlite3.c	100001;"	d	file:
sqlite3_result_text16be	server/sqlite3.c	99822;"	d	file:
sqlite3_result_text16le	server/sqlite3.c	/^SQLITE_API void sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	server/sqlite3.c	100002;"	d	file:
sqlite3_result_text16le	server/sqlite3.c	99823;"	d	file:
sqlite3_result_text64	server/sqlite3.c	/^SQLITE_API void sqlite3_result_text64($/;"	f
sqlite3_result_text64	server/sqlite3.c	99940;"	d	file:
sqlite3_result_value	server/sqlite3.c	/^SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	server/sqlite3.c	99824;"	d	file:
sqlite3_result_zeroblob	server/sqlite3.c	/^SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	server/sqlite3.c	99881;"	d	file:
sqlite3_rollback_hook	server/sqlite3.c	/^SQLITE_API void *sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	server/sqlite3.c	99825;"	d	file:
sqlite3_rtree_dbl	server/sqlite3.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	server/sqlite3.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	server/sqlite3.h	/^  typedef double sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_dbl	server/sqlite3.h	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t
sqlite3_rtree_geometry	server/sqlite3.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	server/sqlite3.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry	server/sqlite3.h	/^struct sqlite3_rtree_geometry {$/;"	s
sqlite3_rtree_geometry	server/sqlite3.h	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry
sqlite3_rtree_geometry_callback	server/sqlite3.c	/^SQLITE_API int sqlite3_rtree_geometry_callback($/;"	f
sqlite3_rtree_query_callback	server/sqlite3.c	/^SQLITE_API int sqlite3_rtree_query_callback($/;"	f
sqlite3_rtree_query_info	server/sqlite3.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	server/sqlite3.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_rtree_query_info	server/sqlite3.h	/^struct sqlite3_rtree_query_info {$/;"	s
sqlite3_rtree_query_info	server/sqlite3.h	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info
sqlite3_search_count	server/sqlite3.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	server/sqlite3.c	/^SQLITE_API int sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	server/sqlite3.c	99826;"	d	file:
sqlite3_set_authorizer	server/sqlite3.c	99983;"	d	file:
sqlite3_set_auxdata	server/sqlite3.c	/^SQLITE_API void sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	server/sqlite3.c	99827;"	d	file:
sqlite3_shutdown	server/sqlite3.c	/^SQLITE_API int sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	server/sqlite3.c	/^SQLITE_API int sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	server/sqlite3.c	99875;"	d	file:
sqlite3_snprintf	server/sqlite3.c	/^SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	server/sqlite3.c	99828;"	d	file:
sqlite3_soft_heap_limit	server/sqlite3.c	/^SQLITE_API void sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	server/sqlite3.c	99876;"	d	file:
sqlite3_soft_heap_limit64	server/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	server/sqlite3.c	99904;"	d	file:
sqlite3_sort_count	server/sqlite3.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	server/sqlite3.c	/^SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	server/sqlite3.c	99905;"	d	file:
sqlite3_sql	server/sqlite3.c	/^SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	server/sqlite3.c	99889;"	d	file:
sqlite3_status	server/sqlite3.c	/^SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	server/sqlite3.c	99890;"	d	file:
sqlite3_step	server/sqlite3.c	/^SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	server/sqlite3.c	99829;"	d	file:
sqlite3_stmt	server/sqlite3.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt	server/sqlite3.h	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt
sqlite3_stmt_busy	server/sqlite3.c	/^SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_busy	server/sqlite3.c	99921;"	d	file:
sqlite3_stmt_readonly	server/sqlite3.c	/^SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	server/sqlite3.c	99922;"	d	file:
sqlite3_stmt_status	server/sqlite3.c	/^SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	server/sqlite3.c	99906;"	d	file:
sqlite3_strglob	server/sqlite3.c	/^SQLITE_API int sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f
sqlite3_strglob	server/sqlite3.c	99941;"	d	file:
sqlite3_stricmp	server/sqlite3.c	/^SQLITE_API int sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_stricmp	server/sqlite3.c	99923;"	d	file:
sqlite3_strnicmp	server/sqlite3.c	/^SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	server/sqlite3.c	99907;"	d	file:
sqlite3_sync_count	server/sqlite3.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	server/sqlite3.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_syscall_ptr	server/sqlite3.h	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t
sqlite3_table_column_metadata	server/sqlite3.c	/^SQLITE_API int sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	server/sqlite3.c	99830;"	d	file:
sqlite3_table_column_metadata	server/sqlite3.c	99979;"	d	file:
sqlite3_temp_directory	server/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	server/sqlite3.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_temp_directory	server/sqlite3.h	/^SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	server/sqlite3.c	/^SQLITE_API int sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	server/sqlite3.c	99883;"	d	file:
sqlite3_thread_cleanup	server/sqlite3.c	/^SQLITE_API void sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	server/sqlite3.c	99831;"	d	file:
sqlite3_threadsafe	server/sqlite3.c	/^SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	server/sqlite3.c	99880;"	d	file:
sqlite3_tokenizer	server/sqlite3.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	server/sqlite3.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	server/sqlite3.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	server/sqlite3.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	server/sqlite3.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	server/sqlite3.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	server/sqlite3.c	/^SQLITE_API int sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	server/sqlite3.c	99832;"	d	file:
sqlite3_trace	server/sqlite3.c	/^SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	server/sqlite3.c	100039;"	d	file:
sqlite3_trace	server/sqlite3.c	99833;"	d	file:
sqlite3_transfer_bindings	server/sqlite3.c	/^SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	server/sqlite3.c	99835;"	d	file:
sqlite3_uint64	server/sqlite3.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_uint64	server/sqlite3.h	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t
sqlite3_unlock_notify	server/sqlite3.c	/^SQLITE_API int sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	server/sqlite3.c	99908;"	d	file:
sqlite3_update_hook	server/sqlite3.c	/^SQLITE_API void *sqlite3_update_hook($/;"	f
sqlite3_update_hook	server/sqlite3.c	99837;"	d	file:
sqlite3_uri_boolean	server/sqlite3.c	/^SQLITE_API int sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_boolean	server/sqlite3.c	99924;"	d	file:
sqlite3_uri_int64	server/sqlite3.c	/^SQLITE_API sqlite3_int64 sqlite3_uri_int64($/;"	f
sqlite3_uri_int64	server/sqlite3.c	99925;"	d	file:
sqlite3_uri_parameter	server/sqlite3.c	/^SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_uri_parameter	server/sqlite3.c	99926;"	d	file:
sqlite3_uri_vsnprintf	server/sqlite3.c	99927;"	d	file:
sqlite3_user_data	server/sqlite3.c	/^SQLITE_API void *sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	server/sqlite3.c	99838;"	d	file:
sqlite3_userauth	server/sqlite3.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	server/sqlite3.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_value	server/sqlite3.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value	server/sqlite3.h	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem
sqlite3_value_blob	server/sqlite3.c	/^SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	server/sqlite3.c	99839;"	d	file:
sqlite3_value_bytes	server/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	server/sqlite3.c	99840;"	d	file:
sqlite3_value_bytes16	server/sqlite3.c	/^SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	server/sqlite3.c	99841;"	d	file:
sqlite3_value_double	server/sqlite3.c	/^SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	server/sqlite3.c	99842;"	d	file:
sqlite3_value_int	server/sqlite3.c	/^SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	server/sqlite3.c	99843;"	d	file:
sqlite3_value_int64	server/sqlite3.c	/^SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	server/sqlite3.c	99844;"	d	file:
sqlite3_value_numeric_type	server/sqlite3.c	/^SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	server/sqlite3.c	99845;"	d	file:
sqlite3_value_text	server/sqlite3.c	/^SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	server/sqlite3.c	99846;"	d	file:
sqlite3_value_text16	server/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	server/sqlite3.c	100003;"	d	file:
sqlite3_value_text16	server/sqlite3.c	99847;"	d	file:
sqlite3_value_text16be	server/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	server/sqlite3.c	100004;"	d	file:
sqlite3_value_text16be	server/sqlite3.c	99848;"	d	file:
sqlite3_value_text16le	server/sqlite3.c	/^SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	server/sqlite3.c	100005;"	d	file:
sqlite3_value_text16le	server/sqlite3.c	99849;"	d	file:
sqlite3_value_type	server/sqlite3.c	/^SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	server/sqlite3.c	99850;"	d	file:
sqlite3_version	server/sqlite3.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_version	server/sqlite3.h	/^SQLITE_API SQLITE_EXTERN const char sqlite3_version[];$/;"	v
sqlite3_vfs	server/sqlite3.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	server/sqlite3.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs	server/sqlite3.h	/^struct sqlite3_vfs {$/;"	s
sqlite3_vfs	server/sqlite3.h	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs
sqlite3_vfs_find	server/sqlite3.c	/^SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	server/sqlite3.c	99877;"	d	file:
sqlite3_vfs_register	server/sqlite3.c	/^SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	server/sqlite3.c	99878;"	d	file:
sqlite3_vfs_unregister	server/sqlite3.c	/^SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	server/sqlite3.c	99879;"	d	file:
sqlite3_vmprintf	server/sqlite3.c	/^SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	server/sqlite3.c	99851;"	d	file:
sqlite3_vsnprintf	server/sqlite3.c	/^SQLITE_API char *sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	server/sqlite3.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	server/sqlite3.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab	server/sqlite3.h	/^struct sqlite3_vtab {$/;"	s
sqlite3_vtab	server/sqlite3.h	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab
sqlite3_vtab_config	server/sqlite3.c	/^SQLITE_API int sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_config	server/sqlite3.c	100029;"	d	file:
sqlite3_vtab_config	server/sqlite3.c	99913;"	d	file:
sqlite3_vtab_cursor	server/sqlite3.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	server/sqlite3.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_cursor	server/sqlite3.h	/^struct sqlite3_vtab_cursor {$/;"	s
sqlite3_vtab_cursor	server/sqlite3.h	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor
sqlite3_vtab_on_conflict	server/sqlite3.c	/^SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_vtab_on_conflict	server/sqlite3.c	100030;"	d	file:
sqlite3_vtab_on_conflict	server/sqlite3.c	99914;"	d	file:
sqlite3_wal_autocheckpoint	server/sqlite3.c	/^SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	server/sqlite3.c	99909;"	d	file:
sqlite3_wal_checkpoint	server/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	server/sqlite3.c	99910;"	d	file:
sqlite3_wal_checkpoint_v2	server/sqlite3.c	/^SQLITE_API int sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_checkpoint_v2	server/sqlite3.c	99928;"	d	file:
sqlite3_wal_hook	server/sqlite3.c	/^SQLITE_API void *sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	server/sqlite3.c	99911;"	d	file:
sqlite3_win32_compact_heap	server/sqlite3.c	/^SQLITE_API int sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f
sqlite3_win32_is_nt	server/sqlite3.c	/^SQLITE_API int sqlite3_win32_is_nt(void){$/;"	f
sqlite3_win32_mbcs_to_utf8	server/sqlite3.c	/^SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_win32_reset_heap	server/sqlite3.c	/^SQLITE_API int sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	server/sqlite3.c	/^SQLITE_API int sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f
sqlite3_win32_sleep	server/sqlite3.c	/^SQLITE_API void sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_utf8_to_mbcs	server/sqlite3.c	/^SQLITE_API char *sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f
sqlite3_win32_write_debug	server/sqlite3.c	/^SQLITE_API void sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f
sqlite3_xauth	server/sqlite3.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	file:
sqlite3_xferopt_count	server/sqlite3.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	server/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	server/sqlite3.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	server/sqlite3.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	server/sqlite3.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	server/sqlite3.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	server/sqlite3.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	server/sqlite3.c	8247;"	d	file:
sqliteHashFirst	server/sqlite3.c	8245;"	d	file:
sqliteHashNext	server/sqlite3.c	8246;"	d	file:
sqliteProcessJoin	server/sqlite3.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	server/sqlite3.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	server/sqlite3.c	90682;"	d	file:
sqlite_int64	server/sqlite3.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	server/sqlite3.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	server/sqlite3.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_int64	server/sqlite3.h	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t
sqlite_int64	server/sqlite3.h	/^  typedef __int64 sqlite_int64;$/;"	t
sqlite_int64	server/sqlite3.h	/^  typedef long long int sqlite_int64;$/;"	t
sqlite_uint64	server/sqlite3.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	server/sqlite3.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	server/sqlite3.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
sqlite_uint64	server/sqlite3.h	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t
sqlite_uint64	server/sqlite3.h	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t
sqlite_uint64	server/sqlite3.h	/^  typedef unsigned long long int sqlite_uint64;$/;"	t
srcdir	xdrpp/Makefile	/^srcdir = .$/;"	m
srpc_server	xdrpp/xdrpp/srpc.h	/^  srpc_server(int fd, bool close_on_destruction = true)$/;"	f	class:xdr::srpc_server
srpc_server	xdrpp/xdrpp/srpc.h	/^class srpc_server : public rpc_server_base {$/;"	c	namespace:xdr
sstruct	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_struct> sstruct;$/;"	m	union:rpc_sym::__anon31
star_oh	server/sqlite3.c	/^static int star_oh(const char *z){$/;"	f	file:
start	xdrpp/xdrpp/pollset.h	/^    void start() {$/;"	f	struct:xdr::pollset_plus::wake_type::async_task
startEndFlag	server/sqlite3.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	server/sqlite3.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
stat4Destructor	server/sqlite3.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:
stat4ValueFromExpr	server/sqlite3.c	/^static int stat4ValueFromExpr($/;"	f	file:
statGet	server/sqlite3.c	/^static void statGet($/;"	f	file:
statGetFuncdef	server/sqlite3.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	server/sqlite3.c	/^static void statInit($/;"	f	file:
statInitFuncdef	server/sqlite3.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statPush	server/sqlite3.c	/^static void statPush($/;"	f	file:
statPushFuncdef	server/sqlite3.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
state_	xdrpp/xdrpp/pollset.h	/^  std::unordered_map<int, fd_state> state_;$/;"	m	class:xdr::pollset
stateno	server/sqlite3.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
status	server/sqlite3.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
status	server/sqlstmt.h	/^  int status() const { return status_; }$/;"	f	class:SQLStmt
status_	server/sqlstmt.h	/^  int status_ = SQLITE_OK;$/;"	m	class:SQLStmt
stem	server/sqlite3.c	/^static int stem($/;"	f	file:
step	server/sqlite3.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step	server/sqlstmt.h	/^  SQLStmt &step() { return set_status(sqlite3_step (stmt_)); }$/;"	f	class:SQLStmt
step_list	server/sqlite3.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_	server/sqlstmt.h	/^  sqlite3_stmt *stmt_;$/;"	m	class:SQLStmt
stmt_busy	server/sqlite3.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_readonly	server/sqlite3.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_status	server/sqlite3.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
str	server/sqlite3.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:
str	server/sqlstmt.h	/^  std::string str(int i) {$/;"	f	class:SQLStmt
str	xdrpp/xdrc/xdrc_internal.h	/^  string str;$/;"	m	struct:YYSTYPE
strHash	server/sqlite3.c	/^static unsigned int strHash(const char *z){$/;"	f	file:
strftimeFunc	server/sqlite3.c	/^static void strftimeFunc($/;"	f	file:
strglob	server/sqlite3.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
stricmp	server/sqlite3.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
strip_directory	xdrpp/xdrc/xdrc.cc	/^strip_directory(string in)$/;"	f
strip_suffix	xdrpp/xdrc/xdrc.cc	/^strip_suffix(string in, string suffix)$/;"	f
strnicmp	server/sqlite3.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
stypedef	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_decl> stypedef;$/;"	m	union:rpc_sym::__anon31
subdir	xdrpp/Makefile	/^subdir = .$/;"	m
subjInMemory	server/sqlite3.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	server/sqlite3.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	server/sqlite3.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	server/sqlite3.c	/^static Expr *substExpr($/;"	f	file:
substExprList	server/sqlite3.c	/^static void substExprList($/;"	f	file:
substSelect	server/sqlite3.c	/^static void substSelect($/;"	f	file:
substrFunc	server/sqlite3.c	/^static void substrFunc($/;"	f	file:
sumFinalize	server/sqlite3.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	server/sqlite3.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
sunion	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_union> sunion;$/;"	m	union:rpc_sym::__anon31
suppressErr	server/sqlite3.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swap32	xdrpp/xdrpp/endian.h	/^swap32(std::uint32_t v)$/;"	f	namespace:xdr
swap32be	xdrpp/xdrpp/endian.h	/^swap32be(std::uint32_t v)$/;"	f	namespace:xdr
swap32le	xdrpp/xdrpp/endian.h	/^swap32le(std::uint32_t v)$/;"	f	namespace:xdr
swap64	xdrpp/xdrpp/endian.h	/^swap64(std::uint64_t v)$/;"	f	namespace:xdr
swap64be	xdrpp/xdrpp/endian.h	/^swap64be(std::uint64_t v)$/;"	f	namespace:xdr
swap64le	xdrpp/xdrpp/endian.h	/^swap64le(std::uint64_t v)$/;"	f	namespace:xdr
swapMixedEndianFloat	server/sqlite3.c	66015;"	d	file:
swapMixedEndianFloat	server/sqlite3.c	66017;"	d	file:
switchLockProxyPath	server/sqlite3.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
symlist	xdrpp/xdrc/parse.cc	/^symlist_t symlist;$/;"	v
symtype	xdrpp/xdrc/xdrc_internal.h	/^  enum symtype { CONST, STRUCT, UNION, ENUM, TYPEDEF, PROGRAM, LITERAL,$/;"	g	struct:rpc_sym
syncFlags	server/sqlite3.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	server/sqlite3.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	server/sqlite3.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	server/sqlite3.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	server/sqlite3.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synchronous_client_base	xdrpp/xdrpp/srpc.h	/^  synchronous_client_base(const synchronous_client_base &c) : fd_(c.fd_) {}$/;"	f	class:xdr::synchronous_client_base
synchronous_client_base	xdrpp/xdrpp/srpc.h	/^  synchronous_client_base(int fd) : fd_(fd) {}$/;"	f	class:xdr::synchronous_client_base
synchronous_client_base	xdrpp/xdrpp/srpc.h	/^class synchronous_client_base {$/;"	c	namespace:xdr
synchronous_server	xdrpp/xdrpp/server.h	/^  synchronous_server(T &server)$/;"	f	struct:xdr::synchronous_server
synchronous_server	xdrpp/xdrpp/server.h	/^template<typename T> struct synchronous_server : service_base {$/;"	s	namespace:xdr
synthCollSeq	server/sqlite3.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sysconfdir	xdrpp/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sz	server/sqlite3.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	server/sqlite3.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	server/sqlite3.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szChunk	server/sqlite3.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	server/sqlite3.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szEst	server/sqlite3.c	/^  u8 szEst;        \/* Estimated size of this column.  INT==1 *\/$/;"	m	struct:Column	file:
szExtra	server/sqlite3.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	server/sqlite3.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:
szFirstBlock	server/sqlite3.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szIdxRow	server/sqlite3.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:
szLookaside	server/sqlite3.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMalloc	server/sqlite3.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:Mem	file:
szMaster	server/sqlite3.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMmap	server/sqlite3.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:
szMmap	server/sqlite3.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:
szMmap	server/sqlite3.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:
szOsFile	server/sqlite3.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szOsFile	server/sqlite3.h	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs
szPMA	server/sqlite3.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:
szPage	server/sqlite3.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	server/sqlite3.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	server/sqlite3.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	server/sqlite3.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	server/sqlite3.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	server/sqlite3.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szRegion	server/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	server/sqlite3.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRow	server/sqlite3.c	/^  u32 szRow;            \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:
szScratch	server/sqlite3.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	server/sqlite3.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szTabRow	server/sqlite3.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:
tRowcnt	server/sqlite3.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	server/sqlite3.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	server/sqlite3.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
tabTnct	server/sqlite3.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:
table	server/sqlite3.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	server/sqlite3.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	server/sqlite3.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	server/sqlite3.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
tagid	xdrpp/xdrc/xdrc_internal.h	/^  string tagid;$/;"	m	struct:rpc_union
tags	xdrpp/xdrc/xdrc_internal.h	/^  vec<rpc_const> tags;$/;"	m	struct:rpc_enum
tagtype	xdrpp/xdrc/xdrc_internal.h	/^  string tagtype;$/;"	m	struct:rpc_union
tail	cacheserver/lrucache.hh	/^  node* tail;$/;"	m	class:lru_cache
tardir	xdrpp/Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	xdrpp/Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	xdrpp/Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	xdrpp/Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	xdrpp/Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target	server/sqlite3.c	/^  Token target;        \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
targetSrcList	server/sqlite3.c	/^static SrcList *targetSrcList($/;"	f	file:
target_alias	xdrpp/Makefile	/^target_alias = $/;"	m
tblHash	server/sqlite3.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tcp_connect	xdrpp/xdrpp/socket.cc	/^tcp_connect(const addrinfo *ai)$/;"	f	namespace:xdr
tcp_connect	xdrpp/xdrpp/socket.cc	/^tcp_connect(const char *host, const char *service, int family)$/;"	f	namespace:xdr
tcp_connect	xdrpp/xdrpp/socket.h	/^tcp_connect(const unique_addrinfo &ai)$/;"	f	namespace:xdr
tcp_connect1	xdrpp/xdrpp/socket.cc	/^tcp_connect1(const addrinfo *ai, bool ndelay)$/;"	f	namespace:xdr
tcp_connect_rpc	xdrpp/xdrpp/socket.cc	/^tcp_connect_rpc(const char *host, std::uint32_t prog, std::uint32_t vers,$/;"	f	namespace:xdr
tcp_listen	xdrpp/xdrpp/socket.cc	/^tcp_listen(const char *service, int family)$/;"	f	namespace:xdr
tempFile	server/sqlite3.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:
tempReg	server/sqlite3.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	server/sqlite3.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
term	server/sqlite3.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:
termCanDriveIndex	server/sqlite3.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	server/sqlite3.c	/^static void testFunc($/;"	f	file:
test_addop_breakpoint	server/sqlite3.c	/^static void test_addop_breakpoint(void){$/;"	f	file:
test_control	server/sqlite3.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	server/sqlite3.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	server/sqlite3.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
test_rpcb	xdrpp/tests/srpc.cc	/^test_rpcb()$/;"	f
test_size	xdrpp/tests/marshal.cc	/^test_size()$/;"	f
testcase	server/sqlite3.c	129378;"	d	file:
testcase	server/sqlite3.c	8086;"	d	file:
testcase	server/sqlite3.c	8088;"	d	file:
tests_test_cereal_DEPENDENCIES	xdrpp/Makefile	/^tests_test_cereal_DEPENDENCIES = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
tests_test_cereal_LDADD	xdrpp/Makefile	/^tests_test_cereal_LDADD = $(LDADD)$/;"	m
tests_test_cereal_OBJECTS	xdrpp/Makefile	/^tests_test_cereal_OBJECTS = $(am_tests_test_cereal_OBJECTS)$/;"	m
tests_test_cereal_SOURCES	xdrpp/Makefile	/^tests_test_cereal_SOURCES = tests\/cereal.cc$/;"	m
tests_test_listener_DEPENDENCIES	xdrpp/Makefile	/^tests_test_listener_DEPENDENCIES = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
tests_test_listener_LDADD	xdrpp/Makefile	/^tests_test_listener_LDADD = $(LDADD)$/;"	m
tests_test_listener_OBJECTS	xdrpp/Makefile	/^tests_test_listener_OBJECTS = $(am_tests_test_listener_OBJECTS)$/;"	m
tests_test_listener_SOURCES	xdrpp/Makefile	/^tests_test_listener_SOURCES = tests\/listener.cc$/;"	m
tests_test_marshal_DEPENDENCIES	xdrpp/Makefile	/^tests_test_marshal_DEPENDENCIES = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
tests_test_marshal_LDADD	xdrpp/Makefile	/^tests_test_marshal_LDADD = $(LDADD)$/;"	m
tests_test_marshal_OBJECTS	xdrpp/Makefile	/^tests_test_marshal_OBJECTS = $(am_tests_test_marshal_OBJECTS)$/;"	m
tests_test_marshal_SOURCES	xdrpp/Makefile	/^tests_test_marshal_SOURCES = tests\/marshal.cc$/;"	m
tests_test_msgsock_DEPENDENCIES	xdrpp/Makefile	/^tests_test_msgsock_DEPENDENCIES = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
tests_test_msgsock_LDADD	xdrpp/Makefile	/^tests_test_msgsock_LDADD = $(LDADD)$/;"	m
tests_test_msgsock_OBJECTS	xdrpp/Makefile	/^tests_test_msgsock_OBJECTS = $(am_tests_test_msgsock_OBJECTS)$/;"	m
tests_test_msgsock_SOURCES	xdrpp/Makefile	/^tests_test_msgsock_SOURCES = tests\/msgsock.cc$/;"	m
tests_test_printer_DEPENDENCIES	xdrpp/Makefile	/^tests_test_printer_DEPENDENCIES = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
tests_test_printer_LDADD	xdrpp/Makefile	/^tests_test_printer_LDADD = $(LDADD)$/;"	m
tests_test_printer_OBJECTS	xdrpp/Makefile	/^tests_test_printer_OBJECTS = $(am_tests_test_printer_OBJECTS)$/;"	m
tests_test_printer_SOURCES	xdrpp/Makefile	/^tests_test_printer_SOURCES = tests\/printer.cc$/;"	m
tests_test_srpc_DEPENDENCIES	xdrpp/Makefile	/^tests_test_srpc_DEPENDENCIES = $(top_builddir)\/xdrpp\/libxdrpp.a$/;"	m
tests_test_srpc_LDADD	xdrpp/Makefile	/^tests_test_srpc_LDADD = $(LDADD)$/;"	m
tests_test_srpc_OBJECTS	xdrpp/Makefile	/^tests_test_srpc_OBJECTS = $(am_tests_test_srpc_OBJECTS)$/;"	m
tests_test_srpc_SOURCES	xdrpp/Makefile	/^tests_test_srpc_SOURCES = tests\/srpc.cc$/;"	m
thread_cleanup	server/sqlite3.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
threadid	server/sqlite3.c	25019;"	d	file:
threadid	server/sqlite3.c	25021;"	d	file:
tid	server/sqlite3.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:
tid	server/sqlite3.c	/^  uintptr_t tid;           \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:
timeFunc	server/sqlite3.c	/^static void timeFunc($/;"	f	file:
time_cbs_	xdrpp/xdrpp/pollset.h	/^  std::multimap<std::int64_t, cb_t> time_cbs_;$/;"	m	class:xdr::pollset
timeout	xdrpp/xdrpp/pollset.h	/^  template<typename CB> Timeout timeout(std::int64_t ms, CB &&cb) {$/;"	f	class:xdr::pollset
timeout_at	xdrpp/xdrpp/pollset.h	/^  template<typename CB> Timeout timeout_at(std::int64_t ms, CB &&cb) {$/;"	f	class:xdr::pollset
timeout_cancel	xdrpp/xdrpp/pollset.cc	/^pollset::timeout_cancel(Timeout &t)$/;"	f	class:xdr::pollset
timeout_is_not_null	xdrpp/xdrpp/pollset.h	/^  bool timeout_is_not_null(Timeout t) { return t.i_ != timeout_null().i_; }$/;"	f	class:xdr::pollset
timeout_null	xdrpp/xdrpp/pollset.h	/^  Timeout timeout_null() { return time_cbs_.end(); }$/;"	f	class:xdr::pollset
timeout_reschedule	xdrpp/xdrpp/pollset.h	/^  void timeout_reschedule(Timeout &t, std::int64_t ms) {$/;"	f	class:xdr::pollset
timeout_reschedule_at	xdrpp/xdrpp/pollset.cc	/^pollset::timeout_reschedule_at(Timeout &t, std::int64_t ms)$/;"	f	class:xdr::pollset
timeout_time	xdrpp/xdrpp/pollset.h	/^  std::int64_t timeout_time(Timeout t) const { return t.i_->first; }$/;"	f	class:xdr::pollset
tkCREATE	server/sqlite3.c	124554;"	d	file:
tkEND	server/sqlite3.c	124557;"	d	file:
tkEXPLAIN	server/sqlite3.c	124553;"	d	file:
tkOTHER	server/sqlite3.c	124551;"	d	file:
tkSEMI	server/sqlite3.c	124549;"	d	file:
tkTEMP	server/sqlite3.c	124555;"	d	file:
tkTRIGGER	server/sqlite3.c	124556;"	d	file:
tkWS	server/sqlite3.c	124550;"	d	file:
tmask	server/sqlite3.c	98292;"	d	file:
tnum	server/sqlite3.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:
tnum	server/sqlite3.c	/^  int tnum;            \/* Root BTree node for this table (see note above) *\/$/;"	m	struct:Table	file:
to_uint	xdrpp/xdrpp/types.h	/^  static uint_type to_uint(type t) { return t; }$/;"	f	struct:xdr::xdr_integral_base
to_uint	xdrpp/xdrpp/types.h	/^  static uint_type to_uint(type t) { return xdr_reinterpret<uint_type>(t); }$/;"	f	struct:xdr::xdr_fp_base
token	server/sqlite3.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	server/sqlite3.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
top_build_prefix	xdrpp/Makefile	/^top_build_prefix = $/;"	m
top_builddir	xdrpp/Makefile	/^top_builddir = .$/;"	m
top_distdir	xdrpp/Makefile	/^top_distdir = $(distdir)$/;"	m
top_material	xdrpp/xdrc/gen_hh.cc	/^std::ostringstream top_material;$/;"	m	namespace:__anon26	file:
top_srcdir	xdrpp/Makefile	/^top_srcdir = .$/;"	m
totalAlloc	server/sqlite3.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	server/sqlite3.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	server/sqlite3.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	server/sqlite3.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	server/sqlite3.c	/^static void total_changes($/;"	f	file:
tparam	server/sqlstmt.h	/^  SQLStmt &tparam(const std::tuple<Args...> &t) {$/;"	f	class:SQLStmt
tr_tm	server/sqlite3.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	server/sqlite3.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	server/sqlite3.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	server/sqlite3.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
transCntrChng	server/sqlite3.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	server/sqlite3.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	server/sqlite3.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	server/sqlite3.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
transform	xdrpp/Makefile	/^transform = $(program_transform_name)$/;"	m
translateP	server/sqlite3.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:
trigHash	server/sqlite3.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	server/sqlite3.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	server/sqlite3.c	/^static void trimFunc($/;"	f	file:
truncateOnCommit	server/sqlite3.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truthProb	server/sqlite3.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:
ts_enum	xdrpp/xdrc/xdrc_internal.h	/^    union_ptr<rpc_enum> ts_enum;$/;"	m	union:rpc_decl::__anon30
ts_struct	xdrpp/xdrc/xdrc_internal.h	/^    union_ptr<rpc_struct> ts_struct;$/;"	m	union:rpc_decl::__anon30
ts_union	xdrpp/xdrc/xdrc_internal.h	/^    union_ptr<rpc_union> ts_union;$/;"	m	union:rpc_decl::__anon30
ts_which	xdrpp/xdrc/xdrc_internal.h	/^  enum { TS_ID, TS_ENUM, TS_STRUCT, TS_UNION } ts_which {TS_ID};$/;"	g	struct:rpc_decl
type	server/sqlite3.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	server/sqlite3.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
type	xdrpp/xdrc/xdrc_internal.h	/^		 NAMESPACE, CLOSEBRACE } type;$/;"	m	struct:rpc_sym	typeref:enum:rpc_sym::symtype
type	xdrpp/xdrc/xdrc_internal.h	/^  string type;$/;"	m	struct:rpc_decl
type_	xdrpp/xdrpp/exception.h	/^  enum { ACCEPT_STAT, AUTH_STAT, REJECT_STAT } type_;$/;"	m	struct:xdr::xdr_call_error	typeref:enum:xdr::xdr_call_error::__anon34
typeofFunc	server/sqlite3.c	/^static void typeofFunc($/;"	f	file:
tz	server/sqlite3.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	server/sqlite3.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon5	file:
u	server/sqlite3.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon13	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon3	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::MemValue	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon10	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon25	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon14	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon15	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon8	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon16	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon18	file:
u	server/sqlite3.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon21	file:
u1	server/sqlite3.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon2	file:
u16	server/sqlite3.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u16	server/sqlite3.c	/^typedef unsigned short u16;$/;"	t	file:
u32	server/sqlite3.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	server/sqlite3.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	server/sqlite3.c	/^typedef unsigned int u32;$/;"	t	file:
u32	xdrpp/xdrpp/marshal.h	/^      std::uint32_t u32[2];$/;"	m	union:xdr::marshal_base::u64conv::__anon35
u64	server/sqlite3.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	server/sqlite3.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	xdrpp/xdrpp/marshal.h	/^      std::uint64_t u64;$/;"	m	union:xdr::marshal_base::u64conv::__anon35
u64conv	xdrpp/xdrpp/marshal.h	/^    u64conv(std::uint64_t u) : u64(u) {}$/;"	f	struct:xdr::marshal_base::u64conv
u64conv	xdrpp/xdrpp/marshal.h	/^  struct u64conv {$/;"	s	struct:xdr::marshal_base
u8	server/sqlite3.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	server/sqlite3.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	server/sqlite3.c	/^typedef unsigned char u8;$/;"	t	file:
ubody	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_union> ubody;$/;"	m	union:YYSTYPE::__anon32
ufbol	xdrpp/xdrc/gen_hh.cc	/^ufbol(bool *first, std::ostream &os)$/;"	f	namespace:__anon26
ufield	xdrpp/xdrc/xdrc_internal.h	/^    union_entry<rpc_ufield> ufield;$/;"	m	union:YYSTYPE::__anon32
uint128_t	include/helpers.hh	/^typedef unsigned int uint128_t __attribute__((mode(TI)));$/;"	t
unLockFlag	server/sqlite3.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeAddExceptions	server/sqlite3.c	/^static int unicodeAddExceptions($/;"	f	file:
unicodeClose	server/sqlite3.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
unicodeCreate	server/sqlite3.c	/^static int unicodeCreate($/;"	f	file:
unicodeDestroy	server/sqlite3.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
unicodeFunc	server/sqlite3.c	/^static void unicodeFunc($/;"	f	file:
unicodeIsAlnum	server/sqlite3.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeIsException	server/sqlite3.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeNext	server/sqlite3.c	/^static int unicodeNext($/;"	f	file:
unicodeOpen	server/sqlite3.c	/^static int unicodeOpen($/;"	f	file:
unicode_cursor	server/sqlite3.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	server/sqlite3.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	typeref:struct:unicode_cursor	file:
unicode_tokenizer	server/sqlite3.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	server/sqlite3.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	typeref:struct:unicode_tokenizer	file:
union_entry	xdrpp/xdrc/union.h	/^  template<typename ...A> union_entry(A&&...a)$/;"	f	class:union_entry
union_entry	xdrpp/xdrc/union.h	/^  union_entry(const union_entry &ue) : val_(*ue.get()) {}$/;"	f	class:union_entry
union_entry	xdrpp/xdrc/union.h	/^  union_entry(union_entry &&ue) : val_(std::move(*ue.get())) {}$/;"	f	class:union_entry
union_entry	xdrpp/xdrc/union.h	/^template<> class union_entry<void> : public union_entry_base {$/;"	c
union_entry	xdrpp/xdrc/union.h	/^template<typename T> class union_entry : public union_entry_base {$/;"	c
union_entry_base	xdrpp/xdrc/union.h	/^  union_entry_base(const union_entry_base &ueb) { ueb.copy_construct_to(this); }$/;"	f	class:union_entry_base
union_entry_base	xdrpp/xdrc/union.h	/^  union_entry_base(union_entry_base &&ueb) { ueb.move_construct_to(this); }$/;"	f	class:union_entry_base
union_entry_base	xdrpp/xdrc/union.h	/^class union_entry_base {$/;"	c
union_function	xdrpp/xdrc/gen_hh.cc	/^union_function(std::ostream &os, const rpc_union &u, string tagcmp,$/;"	f	namespace:__anon26
union_ptr	xdrpp/xdrc/union.h	/^template<typename T> class union_ptr$/;"	c
uniqNotNull	server/sqlite3.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:
unique_fd	xdrpp/xdrpp/socket.h	/^  explicit unique_fd(int fd) : fd_(fd) {}$/;"	f	class:xdr::unique_fd
unique_fd	xdrpp/xdrpp/socket.h	/^  unique_fd() : unique_fd(-1) {}$/;"	f	class:xdr::unique_fd
unique_fd	xdrpp/xdrpp/socket.h	/^  unique_fd(unique_fd &&uf) : fd_(uf.release()) {}$/;"	f	class:xdr::unique_fd
unique_fd	xdrpp/xdrpp/socket.h	/^class unique_fd {$/;"	c	namespace:xdr
unixAccess	server/sqlite3.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	server/sqlite3.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	server/sqlite3.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	server/sqlite3.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	server/sqlite3.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	server/sqlite3.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	server/sqlite3.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	server/sqlite3.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	server/sqlite3.c	30825;"	d	file:
unixDlError	server/sqlite3.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	server/sqlite3.c	30823;"	d	file:
unixDlOpen	server/sqlite3.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	server/sqlite3.c	30822;"	d	file:
unixDlSym	server/sqlite3.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	server/sqlite3.c	30824;"	d	file:
unixEnterMutex	server/sqlite3.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFetch	server/sqlite3.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
unixFile	server/sqlite3.c	/^struct unixFile {$/;"	s	file:
unixFile	server/sqlite3.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	server/sqlite3.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	server/sqlite3.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	server/sqlite3.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	server/sqlite3.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	server/sqlite3.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	server/sqlite3.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	server/sqlite3.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	server/sqlite3.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixGetpagesize	server/sqlite3.c	/^static int unixGetpagesize(void){$/;"	f	file:
unixInodeInfo	server/sqlite3.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	server/sqlite3.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	server/sqlite3.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	server/sqlite3.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	server/sqlite3.c	25841;"	d	file:
unixLogErrorAtLine	server/sqlite3.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMapfile	server/sqlite3.c	/^static int unixMapfile(unixFile *pFd, i64 nByte){$/;"	f	file:
unixModeBit	server/sqlite3.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	server/sqlite3.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	server/sqlite3.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	server/sqlite3.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	server/sqlite3.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	server/sqlite3.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	server/sqlite3.c	/^static int unixRead($/;"	f	file:
unixRemapfile	server/sqlite3.c	/^static void unixRemapfile($/;"	f	file:
unixSectorSize	server/sqlite3.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixSectorSize	server/sqlite3.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:
unixSetSystemCall	server/sqlite3.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	server/sqlite3.c	/^struct unixShm {$/;"	s	file:
unixShm	server/sqlite3.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	server/sqlite3.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	server/sqlite3.c	29422;"	d	file:
unixShmLock	server/sqlite3.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	server/sqlite3.c	29421;"	d	file:
unixShmMap	server/sqlite3.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	server/sqlite3.c	29420;"	d	file:
unixShmNode	server/sqlite3.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	server/sqlite3.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	server/sqlite3.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmRegionPerMap	server/sqlite3.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:
unixShmSystemLock	server/sqlite3.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	server/sqlite3.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	server/sqlite3.c	29423;"	d	file:
unixSleep	server/sqlite3.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	server/sqlite3.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	server/sqlite3.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	server/sqlite3.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnfetch	server/sqlite3.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
unixUnlock	server/sqlite3.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixUnmapfile	server/sqlite3.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:
unixWrite	server/sqlite3.c	/^static int unixWrite($/;"	f	file:
unix_syscall	server/sqlite3.c	/^static struct unix_syscall {$/;"	s	file:
unlikely	server/sqlite3.c	8157;"	d	file:
unlockBtreeIfUnused	server/sqlite3.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	server/sqlite3.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:
unlock_notify	server/sqlite3.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
unput	xdrpp/xdrc/scan.cc	186;"	d	file:
untestedTerms	server/sqlite3.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	server/sqlite3.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	server/sqlite3.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	server/sqlite3.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	server/sqlite3.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	server/sqlite3.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	server/sqlite3.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	server/sqlite3.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uri_boolean	server/sqlite3.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
uri_int64	server/sqlite3.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
uri_parameter	server/sqlite3.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
usable	server/sqlite3.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usable	server/sqlite3.h	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint
usableSize	server/sqlite3.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
usage	xdrpp/xdrc/xdrc.cc	/^usage(int err = 1)$/;"	f	file:
useJournal	server/sqlite3.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useMalloc	server/sqlite3.c	/^  u8   useMalloc;      \/* 0: none,  1: sqlite3DbMalloc,  2: sqlite3_malloc *\/$/;"	m	struct:StrAccum	file:
useRandomRowid	server/sqlite3.c	/^  Bool useRandomRowid:1;\/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	server/sqlite3.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
use_rpcbind_	xdrpp/xdrpp/server.h	/^  const bool use_rpcbind_;$/;"	m	class:xdr::rpc_tcp_listener
usedAsColumnCache	server/sqlite3.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	server/sqlite3.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	server/sqlite3.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
ut	xdrpp/tests/listener.cc	/^xdrtest2_server::ut(std::unique_ptr<uniontest> arg)$/;"	f	class:xdrtest2_server
ut	xdrpp/tests/srpc.cc	/^xdrtest2_server::ut(std::unique_ptr<uniontest> arg)$/;"	f	class:xdrtest2_server
v	server/sqlite3.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	server/sqlite3.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	server/sqlite3.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v1	server/sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
v2	server/sqlite3.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
vacuumFinalize	server/sqlite3.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
val	xdrpp/xdrc/xdrc_internal.h	/^  string val;$/;"	m	struct:rpc_const
val	xdrpp/xdrc/xdrc_internal.h	/^  uint32_t val;$/;"	m	struct:rpc_proc
val	xdrpp/xdrc/xdrc_internal.h	/^  uint32_t val;$/;"	m	struct:rpc_program
val	xdrpp/xdrc/xdrc_internal.h	/^  uint32_t val;$/;"	m	struct:rpc_vers
val_	xdrpp/xdrc/union.h	/^  T val_;$/;"	m	class:union_entry
valid	xdrpp/xdrpp/types.h	/^  static constexpr bool valid = false;$/;"	m	struct:xdr::xdr_traits
valid	xdrpp/xdrpp/types.h	/^  static constexpr bool valid = true;$/;"	m	struct:xdr::xdr_traits_base
validHMS	server/sqlite3.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	server/sqlite3.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validTZ	server/sqlite3.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	server/sqlite3.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
validate	xdrpp/xdrpp/types.h	/^  static void validate() {}$/;"	f	struct:xdr::xarray
validate	xdrpp/xdrpp/types.h	/^  void validate() const { check_size(size()); }$/;"	f	struct:xdr::xstring
value	server/sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:
value	server/sqlstmt.h	/^  sqlite3_value *value(int i) {$/;"	f	class:SQLStmt
value	xdrpp/xdrpp/types.h	/^  static constexpr value_type value = Ptr;$/;"	m	struct:xdr::field_ptr
valueFromExpr	server/sqlite3.c	/^static int valueFromExpr($/;"	f	file:
valueNew	server/sqlite3.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:
valueToText	server/sqlite3.c	/^SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f
value_	xdrpp/xdrpp/iniparse.h	/^  string value_;		\/\/!< Value of the property.$/;"	m	class:xdr::IniLine
value_blob	server/sqlite3.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	server/sqlite3.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	server/sqlite3.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	server/sqlite3.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	server/sqlite3.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	server/sqlite3.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	server/sqlite3.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	server/sqlite3.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	server/sqlite3.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	server/sqlite3.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	server/sqlite3.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	server/sqlite3.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
variable_nelem	xdrpp/xdrpp/types.h	/^  static constexpr bool variable_nelem = false;$/;"	m	struct:xdr::xdr_traits
variable_nelem	xdrpp/xdrpp/types.h	/^  static constexpr bool variable_nelem = true;$/;"	m	struct:xdr::xdr_traits
variable_nelem	xdrpp/xdrpp/types.h	/^  static constexpr bool variable_nelem = variable;$/;"	m	struct:xdr::detail::xdr_container_base
vdbeCommit	server/sqlite3.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeCompareMemString	server/sqlite3.c	/^static int vdbeCompareMemString($/;"	f	file:
vdbeFreeOpArray	server/sqlite3.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeIncrBgPopulate	server/sqlite3.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrFree	server/sqlite3.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrMergerNew	server/sqlite3.c	/^static int vdbeIncrMergerNew($/;"	f	file:
vdbeIncrMergerSetThreads	server/sqlite3.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulate	server/sqlite3.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulateThread	server/sqlite3.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:
vdbeIncrSwap	server/sqlite3.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:
vdbeInvokeSqllog	server/sqlite3.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:
vdbeInvokeSqllog	server/sqlite3.c	65612;"	d	file:
vdbeMemAddTerminator	server/sqlite3.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:
vdbeMemClear	server/sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:
vdbeMemClearExternAndSetNull	server/sqlite3.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:
vdbeMergeEngineCompare	server/sqlite3.c	/^static void vdbeMergeEngineCompare($/;"	f	file:
vdbeMergeEngineFree	server/sqlite3.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:
vdbeMergeEngineInit	server/sqlite3.c	/^static int vdbeMergeEngineInit($/;"	f	file:
vdbeMergeEngineLevel0	server/sqlite3.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:
vdbeMergeEngineNew	server/sqlite3.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:
vdbeMergeEngineStep	server/sqlite3.c	/^static int vdbeMergeEngineStep($/;"	f	file:
vdbePmaReadBlob	server/sqlite3.c	/^static int vdbePmaReadBlob($/;"	f	file:
vdbePmaReadVarint	server/sqlite3.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:
vdbePmaReaderBgIncrInit	server/sqlite3.c	/^static int vdbePmaReaderBgIncrInit(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderBgInit	server/sqlite3.c	/^static void *vdbePmaReaderBgInit(void *pCtx){$/;"	f	file:
vdbePmaReaderClear	server/sqlite3.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderIncrMergeInit	server/sqlite3.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderInit	server/sqlite3.c	/^static int vdbePmaReaderInit($/;"	f	file:
vdbePmaReaderNext	server/sqlite3.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderSeek	server/sqlite3.c	/^static int vdbePmaReaderSeek($/;"	f	file:
vdbePmaWriteBlob	server/sqlite3.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:
vdbePmaWriteVarint	server/sqlite3.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:
vdbePmaWriterFinish	server/sqlite3.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:
vdbePmaWriterInit	server/sqlite3.c	/^static void vdbePmaWriterInit($/;"	f	file:
vdbeRecordCompareDebug	server/sqlite3.c	/^static int vdbeRecordCompareDebug($/;"	f	file:
vdbeRecordCompareInt	server/sqlite3.c	/^static int vdbeRecordCompareInt($/;"	f	file:
vdbeRecordCompareString	server/sqlite3.c	/^static int vdbeRecordCompareString($/;"	f	file:
vdbeRecordCompareWithSkip	server/sqlite3.c	/^static int vdbeRecordCompareWithSkip($/;"	f	file:
vdbeRecordDecodeInt	server/sqlite3.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:
vdbeReleaseAndSetInt64	server/sqlite3.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:
vdbeSafety	server/sqlite3.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	server/sqlite3.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSortAllocUnpacked	server/sqlite3.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:
vdbeSortSubtaskCleanup	server/sqlite3.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:
vdbeSorterAddToTree	server/sqlite3.c	/^static int vdbeSorterAddToTree($/;"	f	file:
vdbeSorterBlockDebug	server/sqlite3.c	/^static void vdbeSorterBlockDebug($/;"	f	file:
vdbeSorterBlockDebug	server/sqlite3.c	76888;"	d	file:
vdbeSorterCompare	server/sqlite3.c	/^static int vdbeSorterCompare($/;"	f	file:
vdbeSorterCreateThread	server/sqlite3.c	/^static int vdbeSorterCreateThread($/;"	f	file:
vdbeSorterExtendFile	server/sqlite3.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:
vdbeSorterExtendFile	server/sqlite3.c	77076;"	d	file:
vdbeSorterFlushPMA	server/sqlite3.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterFlushThread	server/sqlite3.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:
vdbeSorterJoinAll	server/sqlite3.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:
vdbeSorterJoinAll	server/sqlite3.c	76948;"	d	file:
vdbeSorterJoinThread	server/sqlite3.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:
vdbeSorterJoinThread	server/sqlite3.c	76949;"	d	file:
vdbeSorterListToPMA	server/sqlite3.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterMapFile	server/sqlite3.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:
vdbeSorterMerge	server/sqlite3.c	/^static void vdbeSorterMerge($/;"	f	file:
vdbeSorterMergeTreeBuild	server/sqlite3.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:
vdbeSorterOpenTempFile	server/sqlite3.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:
vdbeSorterPopulateDebug	server/sqlite3.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:
vdbeSorterPopulateDebug	server/sqlite3.c	76887;"	d	file:
vdbeSorterRecordFree	server/sqlite3.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRewindDebug	server/sqlite3.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:
vdbeSorterRewindDebug	server/sqlite3.c	76886;"	d	file:
vdbeSorterRowkey	server/sqlite3.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSetupMerge	server/sqlite3.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterSort	server/sqlite3.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterTreeDepth	server/sqlite3.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:
vdbeSorterWorkDebug	server/sqlite3.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:
vdbeSorterWorkDebug	server/sqlite3.c	76885;"	d	file:
vdbeTakeBranch	server/sqlite3.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:
vdbeUnbind	server/sqlite3.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeVComment	server/sqlite3.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
vec	xdrpp/xdrc/xdrc_internal.h	/^template<typename T> struct vec : std::vector<T> {$/;"	s
verify	xdrpp/xdrc/union.h	/^  void verify() const { want_type(typeid(union_entry)); }$/;"	f	class:union_entry
verifyDbFile	server/sqlite3.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:
vers	xdrpp/xdrc/xdrc_internal.h	/^  vec<rpc_vers> vers;$/;"	m	struct:rpc_program
vers_	xdrpp/xdrpp/server.h	/^  const uint32_t vers_;$/;"	m	struct:xdr::service_base
vers_compare	xdrpp/xdrc/parse.cc	/^vers_compare(const void *_a, const void *_b)$/;"	f	file:
version	include/server.hh	/^  static constexpr std::uint32_t version = 1;$/;"	m	struct:api_v1
version	include/server.hh	/^  static constexpr std::uint32_t version = 1;$/;"	m	struct:cache_api_v1
versionFunc	server/sqlite3.c	/^static void versionFunc($/;"	f	file:
version_name	include/server.hh	/^  static constexpr const char *version_name = "api_v1";$/;"	m	struct:api_v1
version_name	include/server.hh	/^  static constexpr const char *version_name = "cache_api_v1";$/;"	m	struct:cache_api_v1
vfsFlags	server/sqlite3.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	server/sqlite3.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	server/sqlite3.c	16196;"	d	file:
vfsUnlink	server/sqlite3.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	server/sqlite3.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	server/sqlite3.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	server/sqlite3.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
viaCoroutine	server/sqlite3.c	/^    unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
vmprintf	server/sqlite3.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vsnprintf	server/sqlite3.c	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtab	server/sqlite3.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon20	file:
vtabBestIndex	server/sqlite3.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	server/sqlite3.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	server/sqlite3.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	server/sqlite3.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_config	server/sqlite3.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	server/sqlite3.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	server/sqlite3.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	server/sqlite3.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	server/sqlite3.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksReleaseFileId	server/sqlite3.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	server/sqlite3.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
wake	xdrpp/xdrpp/pollset.cc	/^pollset_plus::wake(wake_type wt)$/;"	f	class:xdr::pollset_plus
wake	xdrpp/xdrpp/pollset.h	/^  void wake() { wake(wake_type::Normal); }$/;"	f	class:xdr::pollset_plus::wake_type
wake_type	xdrpp/xdrpp/pollset.h	/^  enum class wake_type : std::uint8_t {$/;"	c	class:xdr::pollset_plus
walBusyLock	server/sqlite3.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	server/sqlite3.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	server/sqlite3.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	server/sqlite3.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	server/sqlite3.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	server/sqlite3.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	server/sqlite3.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	server/sqlite3.c	48431;"	d	file:
walFramePage	server/sqlite3.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	server/sqlite3.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	server/sqlite3.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	server/sqlite3.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	server/sqlite3.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	server/sqlite3.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	server/sqlite3.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	server/sqlite3.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	server/sqlite3.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	server/sqlite3.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	server/sqlite3.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	server/sqlite3.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	server/sqlite3.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	server/sqlite3.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	server/sqlite3.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	server/sqlite3.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	server/sqlite3.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walLockName	server/sqlite3.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	server/sqlite3.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	server/sqlite3.c	/^static void walMerge($/;"	f	file:
walMergesort	server/sqlite3.c	/^static void walMergesort($/;"	f	file:
walNextHash	server/sqlite3.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	server/sqlite3.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartLog	server/sqlite3.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	server/sqlite3.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	server/sqlite3.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	server/sqlite3.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	server/sqlite3.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	server/sqlite3.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	server/sqlite3.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	server/sqlite3.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	server/sqlite3.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	server/sqlite3.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint_v2	server/sqlite3.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	server/sqlite3.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
walkerDepth	server/sqlite3.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:
wantToLock	server/sqlite3.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
want_type	xdrpp/xdrc/union.h	/^  void want_type(const std::type_info &wanted) const {$/;"	f	class:union_entry_base
warn	xdrpp/xdrpp/iniparse.h	/^  std::ostream &warn() const {$/;"	f	class:xdr::IniLine
wc	server/sqlite3.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	server/sqlite3.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wcb	xdrpp/xdrpp/pollset.h	/^    cb_t wcb;$/;"	m	struct:xdr::pollset::fd_state
wctrlFlags	server/sqlite3.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
what	include/client.h	/^    const char *what() {$/;"	f	class:ClientException
whereAndInfoDelete	server/sqlite3.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	server/sqlite3.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	server/sqlite3.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	server/sqlite3.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){$/;"	f	file:
whereEqualScanEst	server/sqlite3.c	/^static int whereEqualScanEst($/;"	f	file:
whereExplainTerm	server/sqlite3.c	/^static void whereExplainTerm(Vdbe *v, WhereTerm *pTerm){$/;"	f	file:
whereForeignKeys	server/sqlite3.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	server/sqlite3.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	server/sqlite3.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	server/sqlite3.c	/^static void whereKeyStats($/;"	f	file:
whereLoopAddAll	server/sqlite3.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereLoopAddBtree	server/sqlite3.c	/^static int whereLoopAddBtree($/;"	f	file:
whereLoopAddBtreeIndex	server/sqlite3.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:
whereLoopAddOr	server/sqlite3.c	/^static int whereLoopAddOr(WhereLoopBuilder *pBuilder, Bitmask mExtra){$/;"	f	file:
whereLoopAddVirtual	server/sqlite3.c	/^static int whereLoopAddVirtual($/;"	f	file:
whereLoopAdjustCost	server/sqlite3.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:
whereLoopCheaperProperSubset	server/sqlite3.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:
whereLoopClear	server/sqlite3.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopClearUnion	server/sqlite3.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopDelete	server/sqlite3.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopFindLesser	server/sqlite3.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:
whereLoopInit	server/sqlite3.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:
whereLoopInsert	server/sqlite3.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:
whereLoopOutputAdjust	server/sqlite3.c	/^static void whereLoopOutputAdjust($/;"	f	file:
whereLoopPrint	server/sqlite3.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:
whereLoopResize	server/sqlite3.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:
whereLoopXfer	server/sqlite3.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:
whereOrInfoDelete	server/sqlite3.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrInsert	server/sqlite3.c	/^static int whereOrInsert($/;"	f	file:
whereOrMove	server/sqlite3.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:
whereOrName	server/sqlite3.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
wherePathName	server/sqlite3.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:
wherePathSatisfiesOrderBy	server/sqlite3.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:
wherePathSolver	server/sqlite3.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:
whereRangeAdjust	server/sqlite3.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:
whereRangeScanEst	server/sqlite3.c	/^static int whereRangeScanEst($/;"	f	file:
whereRangeSkipScanEst	server/sqlite3.c	/^static int whereRangeSkipScanEst($/;"	f	file:
whereScanInit	server/sqlite3.c	/^static WhereTerm *whereScanInit($/;"	f	file:
whereScanNext	server/sqlite3.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:
whereShortCut	server/sqlite3.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereSortingCost	server/sqlite3.c	/^static LogEst whereSortingCost($/;"	f	file:
whereSplit	server/sqlite3.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f	file:
whereTempTriggers	server/sqlite3.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
whereUsablePartialIndex	server/sqlite3.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:
winAccess	server/sqlite3.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	server/sqlite3.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	server/sqlite3.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winConvertFromUtf8Filename	server/sqlite3.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:
winConvertToUtf8Filename	server/sqlite3.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:
winCurrentTime	server/sqlite3.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	server/sqlite3.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	server/sqlite3.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	server/sqlite3.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	server/sqlite3.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	server/sqlite3.c	37765;"	d	file:
winDlError	server/sqlite3.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	server/sqlite3.c	37763;"	d	file:
winDlOpen	server/sqlite3.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	server/sqlite3.c	37762;"	d	file:
winDlSym	server/sqlite3.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:
winDlSym	server/sqlite3.c	37764;"	d	file:
winFetch	server/sqlite3.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
winFile	server/sqlite3.c	/^struct winFile {$/;"	s	file:
winFile	server/sqlite3.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	server/sqlite3.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	server/sqlite3.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	server/sqlite3.c	/^static int winFullPathname($/;"	f	file:
winGetDirSep	server/sqlite3.c	32635;"	d	file:
winGetLastError	server/sqlite3.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetLastErrorMsg	server/sqlite3.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
winGetReadLock	server/sqlite3.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:
winGetSystemCall	server/sqlite3.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winGetTempname	server/sqlite3.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:
winIoMethod	server/sqlite3.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoerrCanRetry1	server/sqlite3.c	34371;"	d	file:
winIoerrRetry	server/sqlite3.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	server/sqlite3.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	server/sqlite3.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsDirSep	server/sqlite3.c	32620;"	d	file:
winIsDriveLetterAndColon	server/sqlite3.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:
winIsVerbatimPathname	server/sqlite3.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	server/sqlite3.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	server/sqlite3.c	/^static BOOL winLockFile($/;"	f	file:
winLogError	server/sqlite3.c	34314;"	d	file:
winLogErrorAtLine	server/sqlite3.c	/^static int winLogErrorAtLine($/;"	f	file:
winLogIoerr	server/sqlite3.c	/^static void winLogIoerr(int nRetry){$/;"	f	file:
winMakeEndInDirSep	server/sqlite3.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:
winMapfile	server/sqlite3.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:
winMbcsToUnicode	server/sqlite3.c	/^static LPWSTR winMbcsToUnicode(const char *zFilename){$/;"	f	file:
winMemAssertMagic	server/sqlite3.c	32854;"	d	file:
winMemAssertMagic	server/sqlite3.c	32856;"	d	file:
winMemAssertMagic1	server/sqlite3.c	32852;"	d	file:
winMemAssertMagic2	server/sqlite3.c	32853;"	d	file:
winMemData	server/sqlite3.c	/^struct winMemData {$/;"	s	file:
winMemData	server/sqlite3.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	server/sqlite3.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetDataPtr	server/sqlite3.c	32859;"	d	file:
winMemGetHeap	server/sqlite3.c	32860;"	d	file:
winMemGetOwned	server/sqlite3.c	32861;"	d	file:
winMemInit	server/sqlite3.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	server/sqlite3.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	server/sqlite3.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	server/sqlite3.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	server/sqlite3.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	server/sqlite3.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	server/sqlite3.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	server/sqlite3.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	server/sqlite3.c	/^static int winMutexEnd(void){$/;"	f	file:
winMutexEnter	server/sqlite3.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	server/sqlite3.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	server/sqlite3.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	server/sqlite3.c	/^static int winMutexInit(void){$/;"	f	file:
winMutexLeave	server/sqlite3.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	server/sqlite3.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	server/sqlite3.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	server/sqlite3.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	server/sqlite3.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	server/sqlite3.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	server/sqlite3.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	server/sqlite3.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	server/sqlite3.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winOpen	server/sqlite3.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	server/sqlite3.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	server/sqlite3.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	server/sqlite3.c	/^static int winRead($/;"	f	file:
winRetryIoerr	server/sqlite3.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
winSectorSize	server/sqlite3.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSeekFile	server/sqlite3.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
winSetSystemCall	server/sqlite3.c	/^static int winSetSystemCall($/;"	f	file:
winShm	server/sqlite3.c	/^struct winShm {$/;"	s	file:
winShm	server/sqlite3.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	server/sqlite3.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	server/sqlite3.c	36403;"	d	file:
winShmEnterMutex	server/sqlite3.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	server/sqlite3.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	server/sqlite3.c	/^static int winShmLock($/;"	f	file:
winShmLock	server/sqlite3.c	36402;"	d	file:
winShmMap	server/sqlite3.c	/^static int winShmMap($/;"	f	file:
winShmMap	server/sqlite3.c	36401;"	d	file:
winShmMutexHeld	server/sqlite3.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	server/sqlite3.c	/^struct winShmNode {$/;"	s	file:
winShmNode	server/sqlite3.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	server/sqlite3.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	server/sqlite3.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	server/sqlite3.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	server/sqlite3.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	server/sqlite3.c	36404;"	d	file:
winSleep	server/sqlite3.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	server/sqlite3.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	server/sqlite3.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	server/sqlite3.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnfetch	server/sqlite3.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
winUnicodeToMbcs	server/sqlite3.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideFilename){$/;"	f	file:
winUnicodeToUtf8	server/sqlite3.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideFilename){$/;"	f	file:
winUnlock	server/sqlite3.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	server/sqlite3.c	/^static BOOL winUnlockFile($/;"	f	file:
winUnlockReadLock	server/sqlite3.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:
winUnmapfile	server/sqlite3.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:
winUtf8ToUnicode	server/sqlite3.c	/^static LPWSTR winUtf8ToUnicode(const char *zFilename){$/;"	f	file:
winWrite	server/sqlite3.c	/^static int winWrite($/;"	f	file:
win_mem_data	server/sqlite3.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	server/sqlite3.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	server/sqlite3.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	server/sqlite3.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	server/sqlite3.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	server/sqlite3.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	server/sqlite3.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	server/sqlite3.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	server/sqlite3.c	34470;"	d	file:
winceUnlockFile	server/sqlite3.c	/^static BOOL winceUnlockFile($/;"	f	file:
withDup	server/sqlite3.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:
withDup	server/sqlite3.c	81525;"	d	file:
withExpand	server/sqlite3.c	/^static int withExpand($/;"	f	file:
woneshot	xdrpp/xdrpp/pollset.h	/^    bool woneshot;$/;"	m	struct:xdr::pollset::fd_state
work_	xdrpp/xdrpp/pollset.h	/^    std::function<R()> work_;$/;"	m	struct:xdr::pollset_plus::wake_type::async_task
wqueue_	xdrpp/xdrpp/msgsock.h	/^  std::deque<msg_ptr> wqueue_;$/;"	m	class:xdr::msg_sock
write32bits	server/sqlite3.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	server/sqlite3.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	server/sqlite3.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	server/sqlite3.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	server/sqlite3.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	server/sqlite3.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	server/sqlite3.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	server/sqlite3.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
write_message	xdrpp/xdrpp/srpc.cc	/^write_message(int fd, const msg_ptr &m)$/;"	f	namespace:xdr
wsFlags	server/sqlite3.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:
wsdAutoext	server/sqlite3.c	100579;"	d	file:
wsdAutoext	server/sqlite3.c	100582;"	d	file:
wsdAutoextInit	server/sqlite3.c	100577;"	d	file:
wsdAutoextInit	server/sqlite3.c	100581;"	d	file:
wsdHooks	server/sqlite3.c	16331;"	d	file:
wsdHooks	server/sqlite3.c	16334;"	d	file:
wsdHooksInit	server/sqlite3.c	16329;"	d	file:
wsdHooksInit	server/sqlite3.c	16333;"	d	file:
wsdPrng	server/sqlite3.c	21840;"	d	file:
wsdStat	server/sqlite3.c	14524;"	d	file:
wsdStat	server/sqlite3.c	14527;"	d	file:
wsdStatInit	server/sqlite3.c	14523;"	d	file:
wsdStatInit	server/sqlite3.c	14526;"	d	file:
wsize	xdrpp/xdrpp/msgsock.h	/^  size_t wsize() const { return wsize_; }$/;"	f	class:xdr::msg_sock
wtFlags	server/sqlite3.c	/^  u8 wtFlags;             \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	server/sqlite3.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon5	typeref:struct:ExprList::ExprList_item::__anon5::__anon6	file:
x	server/sqlite3.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:
xAccess	server/sqlite3.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAccess	server/sqlite3.h	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs
xAdvance	server/sqlite3.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::__anon1	file:
xAuth	server/sqlite3.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:
xBacktrace	server/sqlite3.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon9	file:
xBegin	server/sqlite3.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBegin	server/sqlite3.h	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xBenignBegin	server/sqlite3.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	server/sqlite3.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	server/sqlite3.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBestIndex	server/sqlite3.h	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module
xBusyHandler	server/sqlite3.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	server/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	server/sqlite3.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCachesize	server/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods
xCachesize	server/sqlite3.h	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2
xCheckReservedLock	server/sqlite3.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xCheckReservedLock	server/sqlite3.h	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods
xClose	server/sqlite3.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	server/sqlite3.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	server/sqlite3.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xClose	server/sqlite3.h	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xClose	server/sqlite3.h	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xCmp	server/sqlite3.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	server/sqlite3.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	server/sqlite3.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	server/sqlite3.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	server/sqlite3.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	server/sqlite3.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	server/sqlite3.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xColumn	server/sqlite3.h	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module
xCommit	server/sqlite3.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommit	server/sqlite3.h	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xCommitCallback	server/sqlite3.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xConnect	server/sqlite3.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xConnect	server/sqlite3.h	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	server/sqlite3.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	server/sqlite3.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	server/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	server/sqlite3.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCreate	server/sqlite3.h	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module
xCreate	server/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods
xCreate	server/sqlite3.h	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2
xCurrentTime	server/sqlite3.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTime	server/sqlite3.h	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs
xCurrentTimeInt64	server/sqlite3.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	server/sqlite3.h	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs
xDel	server/sqlite3.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDel	server/sqlite3.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:Mem	file:
xDelUser	server/sqlite3.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	server/sqlite3.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
xDelUser	server/sqlite3.h	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry
xDelUser	server/sqlite3.h	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info
xDelete	server/sqlite3.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	server/sqlite3.c	/^  void (*xDelete)(void *);        \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:
xDelete	server/sqlite3.h	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs
xDestroy	server/sqlite3.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	server/sqlite3.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	server/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	server/sqlite3.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	server/sqlite3.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	server/sqlite3.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestroy	server/sqlite3.h	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDestroy	server/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xDestroy	server/sqlite3.h	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xDestructor	server/sqlite3.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:
xDeviceCharacteristics	server/sqlite3.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDeviceCharacteristics	server/sqlite3.h	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xDisconnect	server/sqlite3.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDisconnect	server/sqlite3.h	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xDlClose	server/sqlite3.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlClose	server/sqlite3.h	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs
xDlError	server/sqlite3.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlError	server/sqlite3.h	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs
xDlOpen	server/sqlite3.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	server/sqlite3.h	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs
xEof	server/sqlite3.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xEof	server/sqlite3.h	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xExprCallback	server/sqlite3.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	server/sqlite3.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:
xFetch	server/sqlite3.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	server/sqlite3.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFetch	server/sqlite3.h	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods
xFetch	server/sqlite3.h	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2
xFetch	server/sqlite3.h	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods
xFileControl	server/sqlite3.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileControl	server/sqlite3.h	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods
xFileSize	server/sqlite3.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	server/sqlite3.h	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods
xFilter	server/sqlite3.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFilter	server/sqlite3.h	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module
xFinalize	server/sqlite3.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	server/sqlite3.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFindFunction	server/sqlite3.h	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module
xFree	server/sqlite3.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	server/sqlite3.c	/^static void xFree(void *p){$/;"	f	file:
xFree	server/sqlite3.h	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods
xFreeSchema	server/sqlite3.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	server/sqlite3.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFullPathname	server/sqlite3.h	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs
xFunc	server/sqlite3.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	server/sqlite3.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	server/sqlite3.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon25	file:
xGeom	server/sqlite3.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:
xGetLastError	server/sqlite3.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetLastError	server/sqlite3.h	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs
xGetSystemCall	server/sqlite3.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	server/sqlite3.h	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xInit	server/sqlite3.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	server/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	server/sqlite3.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xInit	server/sqlite3.h	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xInit	server/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods
xInit	server/sqlite3.h	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xLanguageid	server/sqlite3.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	server/sqlite3.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLock	server/sqlite3.h	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xLog	server/sqlite3.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	server/sqlite3.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMalloc	server/sqlite3.h	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods
xMutexAlloc	server/sqlite3.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexAlloc	server/sqlite3.h	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnd	server/sqlite3.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	server/sqlite3.h	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexEnter	server/sqlite3.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	server/sqlite3.h	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexFree	server/sqlite3.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	server/sqlite3.h	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexHeld	server/sqlite3.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	server/sqlite3.h	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexInit	server/sqlite3.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	server/sqlite3.h	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods
xMutexLeave	server/sqlite3.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	server/sqlite3.h	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexNotheld	server/sqlite3.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	server/sqlite3.h	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xMutexTry	server/sqlite3.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	server/sqlite3.h	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods
xNext	server/sqlite3.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	server/sqlite3.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNext	server/sqlite3.h	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module
xNextSystemCall	server/sqlite3.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xNextSystemCall	server/sqlite3.h	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs
xOpen	server/sqlite3.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	server/sqlite3.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	server/sqlite3.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xOpen	server/sqlite3.h	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs
xOpen	server/sqlite3.h	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module
xPagecount	server/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	server/sqlite3.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xPagecount	server/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods
xPagecount	server/sqlite3.h	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xProfile	server/sqlite3.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	server/sqlite3.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xQueryFunc	server/sqlite3.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon25	file:
xQueryFunc	server/sqlite3.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:
xRandomness	server/sqlite3.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRandomness	server/sqlite3.h	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs
xRead	server/sqlite3.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRead	server/sqlite3.h	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xRealloc	server/sqlite3.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRealloc	server/sqlite3.h	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xReiniter	server/sqlite3.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	server/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	server/sqlite3.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRekey	server/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2
xRekey	server/sqlite3.h	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods
xRelease	server/sqlite3.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRelease	server/sqlite3.h	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRename	server/sqlite3.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRename	server/sqlite3.h	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module
xRollback	server/sqlite3.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollback	server/sqlite3.h	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xRollbackCallback	server/sqlite3.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	server/sqlite3.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRollbackTo	server/sqlite3.h	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xRoundup	server/sqlite3.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRoundup	server/sqlite3.h	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods
xRowid	server/sqlite3.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xRowid	server/sqlite3.h	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module
xSavepoint	server/sqlite3.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSavepoint	server/sqlite3.h	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module
xSectorSize	server/sqlite3.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSectorSize	server/sqlite3.h	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xSelectCallback	server/sqlite3.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSelectCallback2	server/sqlite3.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetSystemCall	server/sqlite3.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xSetSystemCall	server/sqlite3.h	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs
xShmBarrier	server/sqlite3.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmBarrier	server/sqlite3.h	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods
xShmLock	server/sqlite3.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	server/sqlite3.h	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods
xShmMap	server/sqlite3.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	server/sqlite3.h	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods
xShmUnmap	server/sqlite3.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	server/sqlite3.h	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods
xShrink	server/sqlite3.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShrink	server/sqlite3.h	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2
xShutdown	server/sqlite3.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	server/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	server/sqlite3.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	server/sqlite3.h	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods
xShutdown	server/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods
xShutdown	server/sqlite3.h	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2
xSize	server/sqlite3.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSize	server/sqlite3.h	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods
xSleep	server/sqlite3.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSleep	server/sqlite3.h	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs
xSqllog	server/sqlite3.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:
xStep	server/sqlite3.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	server/sqlite3.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	server/sqlite3.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	server/sqlite3.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xSync	server/sqlite3.h	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods
xSync	server/sqlite3.h	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module
xTask	server/sqlite3.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:
xTask	server/sqlite3.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:
xTestCallback	server/sqlite3.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:
xTrace	server/sqlite3.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	server/sqlite3.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	server/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	server/sqlite3.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xTruncate	server/sqlite3.h	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods
xTruncate	server/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods
xTruncate	server/sqlite3.h	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2
xUnfetch	server/sqlite3.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:
xUnfetch	server/sqlite3.h	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods
xUnlock	server/sqlite3.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	server/sqlite3.h	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods
xUnlockNotify	server/sqlite3.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	server/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	server/sqlite3.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUnpin	server/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2
xUnpin	server/sqlite3.h	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods
xUpdate	server/sqlite3.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdate	server/sqlite3.h	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module
xUpdateCallback	server/sqlite3.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xVdbeBranch	server/sqlite3.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:
xWalCallback	server/sqlite3.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	server/sqlite3.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xWrite	server/sqlite3.h	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods
xarray	xdrpp/xdrpp/types.h	/^  xarray() { array::fill(T{}); }$/;"	f	struct:xdr::xarray
xarray	xdrpp/xdrpp/types.h	/^  xarray(detail::no_clear_t) {}$/;"	f	struct:xdr::xarray
xarray	xdrpp/xdrpp/types.h	/^template<typename T, uint32_t N> struct xarray$/;"	s	namespace:xdr
xdr	include/server.hh	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/cereal.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/clear.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/endian.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/exception.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/iniparse.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/iniparse.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/marshal.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/marshal.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/message.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/msgsock.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/msgsock.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/pollset.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/pollset.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/printer.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/printer.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/rpc_msg.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/server.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/server.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/socket.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/socket.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/srpc.cc	/^namespace xdr {$/;"	n	file:
xdr	xdrpp/xdrpp/srpc.h	/^namespace xdr {$/;"	n
xdr	xdrpp/xdrpp/types.h	/^namespace xdr {$/;"	n
xdr_argpack_archive	xdrpp/xdrpp/marshal.h	/^xdr_argpack_archive(Archive &)$/;"	f	namespace:xdr
xdr_argpack_archive	xdrpp/xdrpp/marshal.h	/^xdr_argpack_archive(Archive &ar, T &&t, Args &&...args)$/;"	f	namespace:xdr
xdr_argpack_size	xdrpp/xdrpp/marshal.h	/^xdr_argpack_size()$/;"	f	namespace:xdr
xdr_argpack_size	xdrpp/xdrpp/marshal.h	/^xdr_argpack_size(const T &t, const Args &...a)$/;"	f	namespace:xdr
xdr_bad_discriminant	xdrpp/xdrpp/types.h	/^struct xdr_bad_discriminant : xdr_runtime_error {$/;"	s	namespace:xdr
xdr_bad_message_size	xdrpp/xdrpp/types.h	/^struct xdr_bad_message_size : xdr_runtime_error {$/;"	s	namespace:xdr
xdr_call_error	xdrpp/xdrpp/exception.h	/^struct xdr_call_error : xdr_runtime_error {$/;"	s	namespace:xdr
xdr_call_error	xdrpp/xdrpp/rpc_msg.cc	/^xdr_call_error::xdr_call_error(accept_stat ev)$/;"	f	class:xdr::xdr_call_error
xdr_call_error	xdrpp/xdrpp/rpc_msg.cc	/^xdr_call_error::xdr_call_error(auth_stat ev)$/;"	f	class:xdr::xdr_call_error
xdr_call_error	xdrpp/xdrpp/rpc_msg.cc	/^xdr_call_error::xdr_call_error(reject_stat ev)$/;"	f	class:xdr::xdr_call_error
xdr_clear	xdrpp/xdrpp/clear.h	/^xdr_clear(T &t)$/;"	f	namespace:xdr
xdr_clear_t	xdrpp/xdrpp/clear.h	/^  constexpr xdr_clear_t() {}$/;"	f	struct:xdr::detail::xdr_clear_t
xdr_clear_t	xdrpp/xdrpp/clear.h	/^struct xdr_clear_t {$/;"	s	namespace:xdr::detail
xdr_container_base	xdrpp/xdrpp/types.h	/^struct xdr_container_base : xdr_traits_base {$/;"	s	namespace:xdr::detail
xdr_container_base	xdrpp/xdrpp/types.h	/^template<typename T> struct xdr_container_base<T, false, true>$/;"	s	namespace:xdr::detail
xdr_container_base	xdrpp/xdrpp/types.h	/^template<typename T> struct xdr_container_base<T, true, true>$/;"	s	namespace:xdr::detail
xdr_fp_base	xdrpp/xdrpp/types.h	/^template<typename T, typename U> struct xdr_fp_base : xdr_traits_base {$/;"	s	namespace:xdr
xdr_from_msg	xdrpp/xdrpp/marshal.h	/^xdr_from_msg(const msg_ptr &m, T &t)$/;"	f	namespace:xdr
xdr_generic_get	xdrpp/xdrpp/marshal.h	/^  xdr_generic_get(const msg_ptr &m)$/;"	f	struct:xdr::xdr_generic_get
xdr_generic_get	xdrpp/xdrpp/marshal.h	/^template<typename Base> struct xdr_generic_get : Base {$/;"	s	namespace:xdr
xdr_generic_put	xdrpp/xdrpp/marshal.h	/^  xdr_generic_put(msg_ptr &m)$/;"	f	struct:xdr::xdr_generic_put
xdr_generic_put	xdrpp/xdrpp/marshal.h	/^template<typename Base> struct xdr_generic_put : Base {$/;"	s	namespace:xdr
xdr_getsize	xdrpp/tests/marshal.cc	/^xdr_getsize(const T &t)$/;"	f
xdr_integral_base	xdrpp/xdrpp/types.h	/^template<typename T, typename U> struct xdr_integral_base : xdr_traits_base {$/;"	s	namespace:xdr
xdr_overflow	xdrpp/xdrpp/types.h	/^struct xdr_overflow : xdr_runtime_error {$/;"	s	namespace:xdr
xdr_reinterpret	xdrpp/xdrpp/types.h	/^xdr_reinterpret(From f)$/;"	f	namespace:xdr
xdr_runtime_error	xdrpp/xdrpp/types.h	/^struct xdr_runtime_error : std::runtime_error {$/;"	s	namespace:xdr
xdr_should_be_zero	xdrpp/xdrpp/types.h	/^struct xdr_should_be_zero : xdr_runtime_error {$/;"	s	namespace:xdr
xdr_size	xdrpp/xdrpp/types.h	/^xdr_size(const T&t)$/;"	f	namespace:xdr
xdr_struct_base	xdrpp/xdrpp/types.h	/^template<> struct xdr_struct_base<> : xdr_traits_base {$/;"	s	namespace:xdr
xdr_struct_base	xdrpp/xdrpp/types.h	/^template<typename FP, typename ...Rest> struct xdr_struct_base<FP, Rest...>$/;"	s	namespace:xdr
xdr_struct_base_fs	xdrpp/xdrpp/types.h	/^  struct xdr_struct_base_fs : xdr_struct_base<Fields...> {$/;"	s	namespace:xdr::detail
xdr_struct_base_vs	xdrpp/xdrpp/types.h	/^  struct xdr_struct_base_vs : xdr_struct_base<Fields...> {$/;"	s	namespace:xdr::detail
xdr_system_error	xdrpp/xdrpp/exception.h	/^  xdr_system_error(const char *what, int no = errno)$/;"	f	struct:xdr::xdr_system_error
xdr_system_error	xdrpp/xdrpp/exception.h	/^struct xdr_system_error : xdr_runtime_error {$/;"	s	namespace:xdr
xdr_to_msg	xdrpp/xdrpp/marshal.h	/^xdr_to_msg(const Args &...args)$/;"	f	namespace:xdr
xdr_to_string	xdrpp/xdrpp/printer.h	/^xdr_to_string(const T &t, const char *name = nullptr, int indent = 0)$/;"	f	namespace:xdr
xdr_trace_client	xdrpp/xdrpp/srpc.cc	/^bool xdr_trace_client = std::getenv("XDR_TRACE_CLIENT");$/;"	m	namespace:xdr	file:
xdr_trace_server	xdrpp/xdrpp/server.cc	/^bool xdr_trace_server = std::getenv("XDR_TRACE_SERVER");$/;"	m	namespace:xdr	file:
xdr_traits	include/server.hh	/^template<> struct xdr_traits<::cacheTransfer>$/;"	s	namespace:xdr
xdr_traits	include/server.hh	/^template<> struct xdr_traits<::heartbeat>$/;"	s	namespace:xdr
xdr_traits	include/server.hh	/^template<> struct xdr_traits<::newCacheServerInfo>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^struct xdr_traits<xarray<T,N>>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<bool>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<double>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<float>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<std::int32_t>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<std::int64_t>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<std::uint32_t>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<std::uint64_t>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<> struct xdr_traits<xdr_void> : xdr_struct_base<> {$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<typename T, uint32_t N> struct xdr_traits<xvector<T,N>>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<typename T> struct xdr_traits {$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<typename T> struct xdr_traits<pointer<T>>$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<uint32_t N> struct xdr_traits<opaque_array<N>> : xdr_traits_base {$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<uint32_t N> struct xdr_traits<opaque_vec<N>> : xdr_traits_base {$/;"	s	namespace:xdr
xdr_traits	xdrpp/xdrpp/types.h	/^template<uint32_t N> struct xdr_traits<xstring<N>> : xdr_traits_base {$/;"	s	namespace:xdr
xdr_traits_base	xdrpp/xdrpp/types.h	/^struct xdr_traits_base {$/;"	s	namespace:xdr
xdr_unbounded	xdrpp/xdrc/parse.cc	/^string xdr_unbounded = "";$/;"	v
xdr_void	xdrpp/xdrpp/types.h	/^struct xdr_void {};$/;"	s	namespace:xdr
xdr_wrong_union	xdrpp/xdrpp/types.h	/^struct xdr_wrong_union : std::logic_error {$/;"	s	namespace:xdr
xdrc_options	xdrpp/xdrc/xdrc.cc	/^static const struct option xdrc_options[] = {$/;"	v	typeref:struct:option	file:
xdrc_xdrc_DEPENDENCIES	xdrpp/Makefile	/^xdrc_xdrc_DEPENDENCIES =$/;"	m
xdrc_xdrc_LDADD	xdrpp/Makefile	/^xdrc_xdrc_LDADD = $/;"	m
xdrc_xdrc_OBJECTS	xdrpp/Makefile	/^xdrc_xdrc_OBJECTS = $(am_xdrc_xdrc_OBJECTS)$/;"	m
xdrc_xdrc_SOURCES	xdrpp/Makefile	/^xdrc_xdrc_SOURCES = xdrc\/xdrc.cc xdrc\/gen_hh.cc xdrc\/gen_server.cc	\\$/;"	m
xdrpp_libxdrpp_a_AR	xdrpp/Makefile	/^xdrpp_libxdrpp_a_AR = $(AR) $(ARFLAGS)$/;"	m
xdrpp_libxdrpp_a_LIBADD	xdrpp/Makefile	/^xdrpp_libxdrpp_a_LIBADD =$/;"	m
xdrpp_libxdrpp_a_OBJECTS	xdrpp/Makefile	/^xdrpp_libxdrpp_a_OBJECTS = $(am_xdrpp_libxdrpp_a_OBJECTS)$/;"	m
xdrpp_libxdrpp_a_SOURCES	xdrpp/Makefile	/^xdrpp_libxdrpp_a_SOURCES = xdrpp\/iniparse.cc xdrpp\/marshal.cc	\\$/;"	m
xdrtest2_server	xdrpp/tests/listener.cc	/^class xdrtest2_server {$/;"	c	file:
xdrtest2_server	xdrpp/tests/srpc.cc	/^class xdrtest2_server {$/;"	c	file:
xferCompatibleCollation	server/sqlite3.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	server/sqlite3.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	server/sqlite3.c	/^static int xferOptimization($/;"	f	file:
xid_counter	xdrpp/xdrpp/srpc.cc	/^uint32_t xid_counter;$/;"	m	namespace:xdr	file:
xstring	xdrpp/xdrpp/types.h	/^  template<typename...Args> xstring(Args&&...args)$/;"	f	struct:xdr::xstring
xstring	xdrpp/xdrpp/types.h	/^template<uint32_t N = XDR_MAX_LEN> struct xstring : std::string {$/;"	s	namespace:xdr
xthreadsafe	server/sqlite3.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
xvector	xdrpp/xdrpp/types.h	/^struct xvector : std::vector<T> {$/;"	s	namespace:xdr
yColCache	server/sqlite3.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	server/sqlite3.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	file:
yDbMask	server/sqlite3.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	server/sqlite3.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	server/sqlite3.c	/^typedef int ynVar;$/;"	t	file:
yy0	server/sqlite3.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon22	file:
yy132	server/sqlite3.c	/^  Expr* yy132;$/;"	m	union:__anon22	file:
yy14	server/sqlite3.c	/^  ExprList* yy14;$/;"	m	union:__anon22	file:
yy186	server/sqlite3.c	/^  u8 yy186;$/;"	m	union:__anon22	file:
yy3	server/sqlite3.c	/^  Select* yy3;$/;"	m	union:__anon22	file:
yy328	server/sqlite3.c	/^  int yy328;$/;"	m	union:__anon22	file:
yy346	server/sqlite3.c	/^  ExprSpan yy346;$/;"	m	union:__anon22	file:
yy378	server/sqlite3.c	/^  struct TrigEvent yy378;$/;"	m	union:__anon22	typeref:struct:__anon22::TrigEvent	file:
yy381	server/sqlite3.c	/^  u16 yy381;$/;"	m	union:__anon22	file:
yy408	server/sqlite3.c	/^  IdList* yy408;$/;"	m	union:__anon22	file:
yy429	server/sqlite3.c	/^  struct {int value; int mask;} yy429;$/;"	m	union:__anon22	typeref:struct:__anon22::__anon23	file:
yy473	server/sqlite3.c	/^  TriggerStep* yy473;$/;"	m	union:__anon22	file:
yy476	server/sqlite3.c	/^  struct LimitVal yy476;$/;"	m	union:__anon22	typeref:struct:__anon22::LimitVal	file:
yy59	server/sqlite3.c	/^  With* yy59;$/;"	m	union:__anon22	file:
yy65	server/sqlite3.c	/^  SrcList* yy65;$/;"	m	union:__anon22	file:
yy96	server/sqlite3.c	/^  struct LikeOp yy96;$/;"	m	union:__anon22	typeref:struct:__anon22::LikeOp	file:
yyFallback	server/sqlite3.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	server/sqlite3.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	server/sqlite3.c	/^struct yyParser {$/;"	s	file:
yyParser	server/sqlite3.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	server/sqlite3.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon24	file:
yyRuleName	server/sqlite3.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	server/sqlite3.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	server/sqlite3.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	server/sqlite3.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	server/sqlite3.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	server/sqlite3.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	server/sqlite3.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	server/sqlite3.c	/^static void yy_accept($/;"	f	file:
yy_accept	xdrpp/xdrc/scan.cc	/^static yyconst flex_int16_t yy_accept[182] =$/;"	v	file:
yy_action	server/sqlite3.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_at_bol	xdrpp/xdrc/scan.cc	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	xdrpp/xdrc/scan.cc	/^static yyconst flex_int16_t yy_base[193] =$/;"	v	file:
yy_bs_column	xdrpp/xdrc/scan.cc	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	xdrpp/xdrc/scan.cc	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	xdrpp/xdrc/scan.cc	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	xdrpp/xdrc/scan.cc	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	xdrpp/xdrc/scan.cc	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	xdrpp/xdrc/scan.cc	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	xdrpp/xdrc/scan.cc	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	xdrpp/xdrc/scan.cc	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	xdrpp/xdrc/scan.cc	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	xdrpp/xdrc/scan.cc	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	xdrpp/xdrc/scan.cc	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	xdrpp/xdrc/scan.cc	/^static yyconst flex_int16_t yy_chk[429] =$/;"	v	file:
yy_create_buffer	xdrpp/xdrc/scan.cc	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	xdrpp/xdrc/scan.cc	/^static yyconst flex_int16_t yy_def[193] =$/;"	v	file:
yy_default	server/sqlite3.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_delete_buffer	xdrpp/xdrc/scan.cc	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_destructor	server/sqlite3.c	/^static void yy_destructor($/;"	f	file:
yy_did_buffer_switch_on_eof	xdrpp/xdrc/scan.cc	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	xdrpp/xdrc/scan.cc	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	xdrpp/xdrc/scan.cc	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	xdrpp/xdrc/scan.cc	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_find_reduce_action	server/sqlite3.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	server/sqlite3.c	/^static int yy_find_shift_action($/;"	f	file:
yy_flex_debug	xdrpp/xdrc/scan.cc	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	xdrpp/xdrc/scan.cc	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	xdrpp/xdrc/scan.cc	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	xdrpp/xdrc/scan.cc	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	xdrpp/xdrc/scan.cc	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	xdrpp/xdrc/scan.cc	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	xdrpp/xdrc/scan.cc	/^static char yy_hold_char;$/;"	v	file:
yy_init	xdrpp/xdrc/scan.cc	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	xdrpp/xdrc/scan.cc	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	xdrpp/xdrc/scan.cc	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	xdrpp/xdrc/scan.cc	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	xdrpp/xdrc/scan.cc	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	xdrpp/xdrc/scan.cc	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	xdrpp/xdrc/scan.cc	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	xdrpp/xdrc/scan.cc	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	xdrpp/xdrc/scan.cc	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_lookahead	server/sqlite3.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_meta	xdrpp/xdrc/scan.cc	/^static yyconst flex_int32_t yy_meta[38] =$/;"	v	file:
yy_n_chars	xdrpp/xdrc/scan.cc	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	xdrpp/xdrc/scan.cc	/^static yy_size_t yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	xdrpp/xdrc/scan.cc	310;"	d	file:
yy_nxt	xdrpp/xdrc/scan.cc	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	xdrpp/xdrc/scan.cc	/^static yyconst flex_int16_t yy_nxt[429] =$/;"	v	file:
yy_parse_failed	server/sqlite3.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	server/sqlite3.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	server/sqlite3.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	server/sqlite3.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_reduce_print	xdrpp/xdrc/parse.cc	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	xdrpp/xdrc/scan.cc	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	xdrpp/xdrc/scan.cc	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )$/;"	f
yy_scan_string	xdrpp/xdrc/scan.cc	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	xdrpp/xdrc/scan.cc	322;"	d	file:
yy_set_interactive	xdrpp/xdrc/scan.cc	312;"	d	file:
yy_shift	server/sqlite3.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	server/sqlite3.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_size_t	xdrpp/xdrc/scan.cc	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	xdrpp/xdrc/parse.cc	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	xdrpp/xdrc/scan.cc	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	xdrpp/xdrc/scan.cc	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	xdrpp/xdrc/scan.cc	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	xdrpp/xdrc/parse.cc	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	xdrpp/xdrc/parse.cc	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_syntax_error	server/sqlite3.c	/^static void yy_syntax_error($/;"	f	file:
yy_trans_info	xdrpp/xdrc/scan.cc	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	xdrpp/xdrc/scan.cc	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	xdrpp/xdrc/scan.cc	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	xdrpp/xdrc/parse.cc	/^union yyalloc$/;"	u	file:
yyalloc	xdrpp/xdrc/scan.cc	/^void *yyalloc (yy_size_t  size )$/;"	f
yychar	xdrpp/xdrc/parse.cc	/^int yychar;$/;"	v
yycheck	xdrpp/xdrc/parse.cc	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	xdrpp/xdrc/parse.cc	704;"	d	file:
yyconst	xdrpp/xdrc/scan.cc	106;"	d	file:
yyconst	xdrpp/xdrc/scan.cc	108;"	d	file:
yydebug	xdrpp/xdrc/parse.cc	/^int yydebug;$/;"	v
yydefact	xdrpp/xdrc/parse.cc	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	xdrpp/xdrc/parse.cc	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	xdrpp/xdrc/parse.cc	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	xdrpp/xdrc/scan.cc	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrcnt	server/sqlite3.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyerrok	xdrpp/xdrc/parse.cc	703;"	d	file:
yyerror	xdrpp/xdrc/scan.cc	/^yyerror(string msg)$/;"	f
yyerror	xdrpp/xdrc/xdrc_internal.h	25;"	d
yyfree	xdrpp/xdrc/scan.cc	/^void yyfree (void * ptr )$/;"	f
yyget_debug	xdrpp/xdrc/scan.cc	/^int yyget_debug  (void)$/;"	f
yyget_in	xdrpp/xdrc/scan.cc	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	xdrpp/xdrc/scan.cc	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_lineno	xdrpp/xdrc/scan.cc	/^int yyget_lineno  (void)$/;"	f
yyget_out	xdrpp/xdrc/scan.cc	/^FILE *yyget_out  (void)$/;"	f
yyget_text	xdrpp/xdrc/scan.cc	/^char *yyget_text  (void)$/;"	f
yyidx	server/sqlite3.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	server/sqlite3.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyin	xdrpp/xdrc/scan.cc	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinit	server/sqlite3.c	/^  int yyinit;$/;"	m	union:__anon22	file:
yyinput	xdrpp/xdrc/scan.cc	/^    static int yyinput (void)$/;"	f	file:
yyleng	xdrpp/xdrc/scan.cc	/^yy_size_t yyleng;$/;"	v
yyless	xdrpp/xdrc/scan.cc	173;"	d	file:
yyless	xdrpp/xdrc/scan.cc	1866;"	d	file:
yyless	xdrpp/xdrc/scan.cc	1867;"	d	file:
yylex_destroy	xdrpp/xdrc/scan.cc	/^int yylex_destroy  (void)$/;"	f
yylineno	xdrpp/xdrc/scan.cc	/^int yylineno = 1;$/;"	v
yylval	xdrpp/xdrc/parse.cc	/^YYSTYPE yylval;$/;"	v
yymore	xdrpp/xdrc/scan.cc	604;"	d	file:
yynerrs	xdrpp/xdrc/parse.cc	/^int yynerrs;$/;"	v
yyout	xdrpp/xdrc/scan.cc	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	xdrpp/xdrc/parse.cc	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	xdrpp/xdrc/parse.cc	521;"	d	file:
yyparse	xdrpp/xdrc/parse.cc	/^yyparse (void)$/;"	f
yypgoto	xdrpp/xdrc/parse.cc	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	xdrpp/xdrc/scan.cc	/^void yypop_buffer_state (void)$/;"	f
yypush_buffer_state	xdrpp/xdrc/scan.cc	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	xdrpp/xdrc/parse.cc	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	xdrpp/xdrc/parse.cc	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	xdrpp/xdrc/scan.cc	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	xdrpp/xdrc/scan.cc	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrline	xdrpp/xdrc/parse.cc	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	xdrpp/xdrc/scan.cc	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	xdrpp/xdrc/scan.cc	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	xdrpp/xdrc/scan.cc	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	xdrpp/xdrc/scan.cc	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	xdrpp/xdrc/parse.cc	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystack	server/sqlite3.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	server/sqlite3.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yystos	xdrpp/xdrc/parse.cc	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	xdrpp/xdrc/parse.cc	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	xdrpp/xdrc/parse.cc	905;"	d	file:
yystrlen	xdrpp/xdrc/parse.cc	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	xdrpp/xdrc/parse.cc	889;"	d	file:
yysyntax_error	xdrpp/xdrc/parse.cc	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	xdrpp/xdrc/parse.cc	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable_value_is_error	xdrpp/xdrc/parse.cc	526;"	d	file:
yyterminate	xdrpp/xdrc/scan.cc	759;"	d	file:
yytestcase	server/sqlite3.c	120168;"	d	file:
yytestcase	server/sqlite3.c	120377;"	d	file:
yytext	xdrpp/xdrc/scan.cc	/^char *yytext;$/;"	v
yytext_ptr	xdrpp/xdrc/scan.cc	350;"	d	file:
yytname	xdrpp/xdrc/parse.cc	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	xdrpp/xdrc/parse.cc	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	xdrpp/xdrc/parse.cc	/^  enum yytokentype$/;"	g	file:
yytokentype	xdrpp/xdrc/parse.hh	/^  enum yytokentype$/;"	g
yytoknum	xdrpp/xdrc/parse.cc	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	xdrpp/xdrc/parse.cc	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	xdrpp/xdrc/parse.cc	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	xdrpp/xdrc/parse.cc	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	xdrpp/xdrc/parse.cc	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	xdrpp/xdrc/parse.cc	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	xdrpp/xdrc/parse.cc	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	xdrpp/xdrc/parse.cc	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	xdrpp/xdrc/parse.cc	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	xdrpp/xdrc/parse.cc	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyvs_alloc	xdrpp/xdrc/parse.cc	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywarn	xdrpp/xdrc/scan.cc	/^yywarn(string msg)$/;"	f
yywrap	xdrpp/xdrc/scan.cc	336;"	d	file:
yyzerominor	server/sqlite3.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	server/sqlite3.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon1	file:
z	server/sqlite3.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	server/sqlite3.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	server/sqlite3.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	server/sqlite3.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	server/sqlite3.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	server/sqlite3.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	server/sqlite3.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zAuthPW	server/sqlite3.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zAuthUser	server/sqlite3.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zBase	server/sqlite3.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBase	server/sqlite3.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:
zBuf	server/sqlite3.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	server/sqlite3.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	server/sqlite3.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	server/sqlite3.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	server/sqlite3.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	server/sqlite3.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColAff	server/sqlite3.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColl	server/sqlite3.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zCollName	server/sqlite3.c	/^  char *zCollName;           \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:
zComment	server/sqlite3.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContentTbl	server/sqlite3.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zData	server/sqlite3.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:
zDatabase	server/sqlite3.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	server/sqlite3.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	server/sqlite3.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	server/sqlite3.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	server/sqlite3.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	server/sqlite3.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	server/sqlite3.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	server/sqlite3.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErr	server/sqlite3.c	/^    const char *zErr;               \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:
zErrMsg	server/sqlite3.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	server/sqlite3.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	server/sqlite3.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	server/sqlite3.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zErrMsg	server/sqlite3.h	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab
zExplain	server/sqlite3.c	/^  char *zExplain;         \/* Explanation of data structures *\/$/;"	m	struct:Vdbe	file:
zFilename	server/sqlite3.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	server/sqlite3.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	server/sqlite3.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zIndex	server/sqlite3.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	server/sqlite3.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:
zInput	server/sqlite3.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	server/sqlite3.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	server/sqlite3.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLanguageid	server/sqlite3.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLocale	server/sqlite3.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	server/sqlite3.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	server/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	server/sqlite3.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	server/sqlite3.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:Mem	file:
zMatchinfo	server/sqlite3.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	server/sqlite3.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:
zName	server/sqlite3.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	server/sqlite3.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	server/sqlite3.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	server/sqlite3.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	server/sqlite3.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	server/sqlite3.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	server/sqlite3.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	server/sqlite3.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	server/sqlite3.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	server/sqlite3.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	server/sqlite3.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	server/sqlite3.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	server/sqlite3.c	/^  const char *const zName;  \/* Name of pragma *\/$/;"	m	struct:sPragmaNames	file:
zName	server/sqlite3.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	server/sqlite3.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	server/sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:
zName	server/sqlite3.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:
zName	server/sqlite3.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	server/sqlite3.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zName	server/sqlite3.h	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs
zPath	server/sqlite3.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	server/sqlite3.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPfx	server/sqlite3.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:
zPool	server/sqlite3.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zReadExprlist	server/sqlite3.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zSegmentsTbl	server/sqlite3.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSelName	server/sqlite3.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:
zSpan	server/sqlite3.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	server/sqlite3.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	server/sqlite3.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zStop	server/sqlite3.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zTail	server/sqlite3.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTerm	server/sqlite3.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	server/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	server/sqlite3.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	server/sqlite3.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	server/sqlite3.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	server/sqlite3.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	server/sqlite3.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon9	file:
zTo	server/sqlite3.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	server/sqlite3.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon3	file:
zToken	server/sqlite3.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:
zToken	server/sqlite3.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zToken	server/sqlite3.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:
zType	server/sqlite3.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	server/sqlite3.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	server/sqlite3.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	server/sqlite3.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	server/sqlite3.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	server/sqlite3.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	server/sqlite3.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	server/sqlite3.c	/^static void zeroblobFunc($/;"	f	file:
~Client	libclient/client.cc	/^Client::~Client()$/;"	f	class:Client
~ClientException	include/client.h	/^    virtual ~ClientException() { }$/;"	f	class:ClientException
~SQLStmt	server/sqlstmt.h	/^  ~SQLStmt() { sqlite3_finalize (stmt_); }$/;"	f	class:SQLStmt
~ServerDB	cacheserver/serverdb.cc	/^ServerDB::~ServerDB()$/;"	f	class:ServerDB
~ServerDB	server/serverdb.cc	/^ServerDB::~ServerDB()$/;"	f	class:ServerDB
~YYSTYPE	xdrpp/xdrc/xdrc_internal.h	/^  ~YYSTYPE() { _base.destroy(); }$/;"	f	struct:YYSTYPE
~fd_state	xdrpp/xdrpp/pollset.cc	/^pollset::fd_state::~fd_state()$/;"	f	class:xdr::pollset::fd_state
~httpclient	include/httpclient.cc	/^httpclient::~httpclient()$/;"	f	class:httpclient
~lru_cache	cacheserver/lrucache.hh	/^  ~lru_cache() {$/;"	f	class:lru_cache
~msg_sock	xdrpp/xdrpp/msgsock.cc	/^msg_sock::~msg_sock()$/;"	f	class:xdr::msg_sock
~pollset_plus	xdrpp/xdrpp/pollset.cc	/^pollset_plus::~pollset_plus()$/;"	f	class:xdr::pollset_plus
~rpc_decl	xdrpp/xdrc/xdrc_internal.h	/^  ~rpc_decl() { _base.destroy(); }$/;"	f	struct:rpc_decl
~rpc_sym	xdrpp/xdrc/xdrc_internal.h	/^  ~rpc_sym () { _base.destroy (); }$/;"	f	struct:rpc_sym
~rpc_tcp_listener	xdrpp/xdrpp/server.cc	/^rpc_tcp_listener::~rpc_tcp_listener()$/;"	f	class:xdr::rpc_tcp_listener
~service_base	xdrpp/xdrpp/server.h	/^  virtual ~service_base() {}$/;"	f	struct:xdr::service_base
~srpc_server	xdrpp/xdrpp/srpc.h	/^  ~srpc_server() { if (close_on_destruction_) close(fd_); }$/;"	f	class:xdr::srpc_server
~union_entry_base	xdrpp/xdrc/union.h	/^  virtual ~union_entry_base() {}$/;"	f	class:union_entry_base
~unique_fd	xdrpp/xdrpp/socket.h	/^  ~unique_fd() { clear(); }$/;"	f	class:xdr::unique_fd
